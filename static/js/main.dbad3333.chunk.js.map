{"version":3,"sources":["helpers/format.helpers.js","constants/realms.js","services/auction.service.js","helpers/prices.helper.js","constants/hero-classes.js","helpers/genes.helpers.js","services/hero.service.js","components/RegressiveSearchPage/functions.js","constants/degenking.js","constants/hero-genes.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroSnapshot/HeroSnapshotStatGenes.js","components/HeroSnapshot/HeroSnapshotBack.js","components/HeroCard/HeroStatSection.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/HeroSnapshotFront.js","components/HeroSnapshot/HeroSnapshot.js","components/HeroSnapshot/index.js","components/SortFilter/SortFilter.js","components/SearchFormSimple/SearchFormSimple.js","components/SummonsMatchList/index.js","components/SummonsMatchList/SummonsMatchList.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["PascalCase","word","toUpperCase","slice","CamelCase","toLowerCase","REALMS","id","name","NETWORKS","apiv6_endpoint","getHeroDataByAuction","a","auctionType","network","mainClasses","profession","take","skip","console","log","options","headers","graphQLClient","GraphQLClient","filter","length","map","price","query","gql","request","data","heroes","SummonsCosts","generation","baseCost","increment","maxCost","calcuateSummonCost","summons","maxSummons","tier","classMutationPairings","mutation","dominantGeneProbabilities","mutationProbabilities","getPotentialDominantGenes","heroGenes","condenseGenes","i","value","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","hero1Genes","hero2Genes","j","push","getMutations","concat","sort","b","condenseAndSortGenesByHighestProbability","getProbabilityThatHeroesCanSummonTargetGene","targetClass","_class","getPossibleSummonClasses","parentClass","summonedClass","include","mutationPairing","parentIsMutatable","c","assistingClass","getMutationClass","heroClass","getHeroById","getMainHero","hero","decodeRecessiveGenesAndNormalize","displayId","Number","toString","summonCost","mutationClass","mainClass","CLASS_REV","warrior","knight","thief","archer","priest","wizard","monk","pirate","seer","berserker","paladin","darkKnight","summoner","ninja","shapeshifter","dragoon","sage","dreadKnight","basicClasses","advancedClasses","eliteClasses","exaltedClasses","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","className","heroid","highlighted","title","type","geneName","defaultProps","StatGene","boldIfNot","HeroSnapshotStatGenes","HeroSnapshotBack","highlights","mainClassGenes","subClassGenes","professionGenes","HeroStatSection","children","HeroStat","main","minor","nameClasses","HeroSnapshotFront","strength","statBoost1","statBoost2","agility","endurance","wisdom","dexterity","vitality","intelligence","luck","rarityClass","JewelIcon","src","alt","CrystalIcon","PriceGroup","label","showIcon","icon","HeroSnapshot","view","grl","Rarity","rarity","level","cp","subClass","originRealm","summonsRemaining","owner","SortFilter","onFiltersChange","onSortByChange","onViewToggled","visible","useState","sortBy","setSort","setSummonsRemaining","setMaxSummons","minGen","setMinGen","maxGen","setMaxGen","includeSummonClass","setIncludeSummonClass","handleFilterChange","target","_summonsRemaining","_maxSummons","_minGen","_maxGen","_includeSummonClass","Boolean","Grid","container","justifyContent","item","Switch","defaultChecked","onChange","event","checked","Select","variant","MenuItem","TextField","Checkbox","networks","array","auctionTypeOptions","networkOptions","professionOptions","SearchFormSimple","defaultSummonClass","isHeroLoaded","onHeroChange","onSubmit","onToggle","summonClass","setSummonClass","summonProfession","setSummonProfession","setAuctionType","setNetwork","setOriginRealm","heroId","setHeroId","summonClassOptions","setSummonClassOptions","useEffect","basic","advanced","elite","exalted","ListSubheader","handleHeroIdBlur","canSubmit","spacing","placeholder","onBlur","onKeyPress","key","Button","onClick","disabled","SummonsMatchList","renderTitle","targetProbability","toFixed","statusMessages","MainHero","LoadingMessage","heroCount","loaded","loading","message","textToDisplay","Alert","severity","RegressiveSearchPage","isLoading","setIsLoading","hasLoaded","setHasLoaded","loadingMessage","setLoadingMessage","searchForm","setSearchForm","setSortBy","filters","setFilters","setMutationClass","mainHero","setMainHero","setHeroes","setView","setHighlights","delay","ms","Promise","res","setTimeout","setRandomLoadingMessage","randomIndex","Math","floor","random","handleHeroChange","heroNumber","_mainHero","handleSubmit","searchCriteria","allHeroes","pageSize","offset","isLastPage","pageOfListings","listedHeroes","heroToAnalyze","rawPrice","classProbability","professionProbability","filteredHeroes","sortedHeroes","remainingSummons","aPrice","bPrice","sortAndFilterHeroes","Container","maxWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbad3333.chunk.js","sourcesContent":["export const PascalCase = word => `${word[0].toUpperCase()}${word.slice(1)}`\n\nexport const CamelCase = word => `${word[0].toLowerCase()}${word.slice(1)}`\n\nexport const ToPrice = rawPrice => {\n    const nPrice = Number(rawPrice)\n    const price = nPrice / 1000000000000000000\n    return price\n}\n","export const REALMS = {\n    serendale: {\n        id: 'SER',\n        name: 'Serendale'\n    }, \n    crystalvale: {\n        id: 'CRY',\n        name: 'Crystalvale'\n    }\n}\n\nexport const NETWORKS = {\n    harmony: {\n        id: 'hmy',\n        name: 'Harmony'\n    },\n    dfkchain: {\n        id: 'dfk',\n        name: 'DFK Chain'\n    }\n}\n","// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\nimport { PascalCase } from '../helpers/format.helpers'\nimport { NETWORKS } from '../constants/realms'\n\n// const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\nconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n/*\n * auctionType: sale | assisting\n */\nconst getHeroDataByAuction = async (auctionType = 'sale', network = NETWORKS.harmony.id, mainClasses = [], profession = '', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  let filter = `${auctionType}Price_not: null\n                network: \"${network}\"`\n\n  // If specified, add main class to filter\n  if (mainClasses.length) {\n    filter = `${filter}\n    mainClass_in: [${mainClasses.map(name => `\"${PascalCase(name)}\"`)}]`\n  }\n\n  // If specified, add profession to filter\n  if (profession) {\n    filter = `${filter}\n    profession: \"${profession}\"`\n  }\n\n  const price = `price: ${auctionType}Price`\n\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    heroes(\n      first: ${take}\n      skip: ${skip}\n      where:{\n        ${filter}\n      }\n    )\n    {\n      id\n      owner{\n        name\n      }\n      originRealm\n      network\n      firstName\n      lastName\n      rarity\n      gender\n      generation\n      mainClass\n      subClass\n      level\n      profession\n      fishing\n      foraging\n      gardening\n      mining\n  \n      stamina\n  \n      summonsRemaining\n      maxSummons\n      summons\n      \n      active1\n      active2\n      passive1\n      passive2\n      statBoost1\n      statBoost2\n      statsUnknown1\n      statsUnknown2\n      element\n  \n      strength\n      agility\n      endurance\n      wisdom\n      dexterity\n      vitality\n      intelligence\n      luck\n\n      ${price}\n      status\n      hpFullAt\n      mpFullAt\n      statGenesRaw: statGenes\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.heroes.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\nexport { getHeroDataByAuction }\n","const SummonsCosts = [\n    { generation: 0, baseCost: 6, increment: 2, maxCost: 30 },\n    { generation: 1, baseCost: 16, increment: 2, maxCost: 34 },\n    { generation: 2, baseCost: 26, increment: 2, maxCost: 42 },\n    { generation: 3, baseCost: 36, increment: 2, maxCost: 50 },\n    { generation: 4, baseCost: 46, increment: 2, maxCost: 58 },\n    { generation: 5, baseCost: 56, increment: 2, maxCost: 66 },\n    { generation: 6, baseCost: 66, increment: 2, maxCost: 74 },\n    { generation: 7, baseCost: 76, increment: 2, maxCost: 82 },\n    { generation: 8, baseCost: 86, increment: 2, maxCost: 90 },\n    { generation: 9, baseCost: 96, increment: 2, maxCost: 98 },\n    { generation: 10, baseCost: 106, increment: 2, maxCost: 106 }\n]\n\nexport const calcuateSummonCost = ({ generation, summons, maxSummons }) => {\n    if (generation < 0 || generation > 10) return '?'\n    \n    const tier = SummonsCosts[generation]\n\n    // Gen0s have price cap\n    if (summons >= maxSummons) return tier.maxCost\n\n    return tier.baseCost + (summons * tier.increment)\n}","/**\n * @fileoverview Hero Classes and tiers.\n */\n\nexport const classMutationPairings = [\n  { 'classes': ['warrior', 'knight'], mutation: 'paladin' },\n  { 'classes': ['thief', 'archer'], mutation: 'darkKnight' },\n  { 'classes': ['priest', 'wizard'], mutation: 'summoner' },\n  { 'classes': ['monk', 'pirate'], mutation: 'ninja' },\n  { 'classes': ['seer', 'berserker'], mutation: 'shapeshifter' },\n  { 'classes': ['paladin', 'darkKnight'], mutation: 'dragoon' },\n  { 'classes': ['summoner', 'ninja'], mutation: 'sage' },\n  { 'classes': ['dragoon', 'sage'], mutation: 'dreadKnight' }\n]\n","import { getHeroTier } from '@thanpolas/degenking/src/heroes-helpers/summon-utils.ent'\nimport { classMutationPairings } from '../constants/hero-classes'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\n\nconst getPotentialDominantGenes = heroGenes => {\n    return condenseGenes(heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] })))\n}\n\n\n// If the same gene appears in multiple gene slots, combine those in to a single gene/value pair.\n// value equals the sum of the multiple slots\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1Genes, hero2Genes) => {\n    const mutations = []\n\n    for (let i = 0; i < hero1Genes.length; i++) {\n        for (let j = 0; j < hero2Genes.length; j++) {\n            // 2. Mutable dominant gene\n            const mutation = getMutationProbability(hero1Genes[i], hero2Genes[j])\n\n            // 3. Adjust dominant gene, if mutation is possible\n            if (mutation) {\n                mutations.push(mutation)\n                hero1Genes[i].value -= mutation.value\n                hero2Genes[j].value -= mutation.value\n                break\n            }\n        }\n    }\n\n    return mutations\n}\n\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(hero1DominantGene.name, hero2DominantGene.name)\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\n\nconst lookupMutation = (gene1, gene2) => classMutationPairings.find(pair => {\n    const m = gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2)\n    return m\n})\n\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const getProbabilityThatHeroesCanSummonTargetGene = (hero1Genes, hero2Genes, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1Genes, hero2Genes)\n    return classProbabilities.find(_class => _class.name.toLowerCase() === targetClass.toLowerCase())\n}\n\nexport const getPossibleSummonClasses = (parentClass, summonedClass, include) => {\n    const classes = [summonedClass]\n\n    // If the parent and the child are the same class, 2nd parent should be same as 1st parent for highest probability\n    if (parentClass === summonedClass) return classes\n\n    // If the parentClass could mutate to the summonedClass, add the complimentary parent class\n    const mutationPairing = classMutationPairings.find(pair => pair.mutation === summonedClass)\n\n    if (mutationPairing) {\n        const parentIsMutatable = mutationPairing.classes.find(c => c === parentClass)\n        let assistingClass = mutationPairing.classes.find(c => c !== parentClass)\n\n        if (parentIsMutatable)\n            classes.push(assistingClass)\n    }\n\n    return classes\n}\n\n// Retrieves the mutation class for the specified base class\nexport const getMutationClass = heroClass => {\n    return classMutationPairings.find(pair => pair.classes.includes(heroClass)).mutation\n}\n","// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\nexport const getHeroById = async (id) => {\n    // Then define our endpoint URL\n    //const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\n\tconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n    // Create a new GQL Client\n    const graphQLClient = new GraphQLClient(apiv6_endpoint, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n\n    // Define our query, this will return data for the first 1000 heroes\n    // 1000 is the max query size for GQL\n    const query = gql`\n\t{\n\t\theroes( \n\t\t\torderBy: numberId\n\t\t\torderDirection: asc\n\t\t\twhere: \n\t\t\t{\n\t\t\t\tid: ${id}\n\t\t   \t}\n\t\t)\n\t\t{\n\t\t\tid\n\t\t\towner{\n\t\t\t  name\n\t\t\t}\n\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\toriginRealm\n\t\t\tnetwork\n\t\t\trarity\n\t\t\tgender\n\t\t\tgeneration\n\t\t\tmainClass\n\t\t\tsubClass\n\t\t\tlevel\n\t\t\tprofession\n\t\t\tfishing\n\t\t\tforaging\n\t\t\tgardening\n\t\t\tmining\n\t\t\n\t\t\tstamina\n\t\t\n\t\t\tsummonsRemaining\n\t\t\tmaxSummons\n\t\t\tsummons\n\t\t\t\n\t\t\tactive1\n\t\t\tactive2\n\t\t\tpassive1\n\t\t\tpassive2\n\t\t\tstatBoost1\n\t\t\tstatBoost2\n\t\t\tstatsUnknown1\n\t\t\tstatsUnknown2\n\t\t\telement\n\t\t\n\t\t\tstrength\n\t\t\tagility\n\t\t\tendurance\n\t\t\twisdom\n\t\t\tdexterity\n\t\t\tvitality\n\t\t\tintelligence\n\t\t\tluck\n\t  \n\t\t\tstatus\n\t\t\thpFullAt\n\t\t\tmpFullAt\n\t\t\tstatGenesRaw: statGenes\n\t\t}\n\t}`\n\n    let data = await graphQLClient.request(query)\n    return data\n}\n","import { decodeRecessiveGenesAndNormalize } from '@thanpolas/degenking/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroById } from '../../services/hero.service'\nimport { calcuateSummonCost } from '../../helpers/prices.helper'\nimport { getMutationClass } from '../../helpers/genes.helpers'\nimport { CamelCase, PascalCase } from '../../helpers/format.helpers'\n\nexport const getMainHero = async id => {\n    const data = await getHeroById(id)\n\n    const hero = decodeRecessiveGenesAndNormalize(data.heroes)[0]\n    hero.displayId = hero.id.length === 13 ? Number(hero.id.slice(1)).toString() : hero.id\n    hero.summonCost = calcuateSummonCost(hero)\n    hero.mutationClass = getMutationClass(CamelCase(hero.mainClass))\n\n    return hero\n}\n\nexport const sortAndFilterHeroes = (heroes, filters, sortBy, mutationClass) => {\n    let sortedHeroes = heroes\n\n    // Skip filtering and sorting if there are no records\n    if (!heroes.length) return sortedHeroes\n\n    const summonClass = PascalCase(mutationClass)\n\n    // Filter based on filter criteria\n    sortedHeroes = sortedHeroes.filter(hero => {\n        const remainingSummons = !filters.summonsRemaining || Number(hero.summonsRemaining) >= Number(filters.summonsRemaining)\n        const maxSummons = !filters.maxSummons || Number(hero.maxSummons) >= Number(filters.maxSummons)\n        const minGen = !filters.minGen || filters.minGen === '' || Number(hero.generation) >= Number(filters.minGen)\n        const maxGen = !filters.maxGen || filters.maxGen === '' || Number(hero.generation) <= Number(filters.maxGen)\n        const mainClass = filters.includeSummonClass || hero.mainClass !== summonClass\n\n        return maxSummons && remainingSummons && minGen && maxGen && mainClass\n    })\n\n    // Heroes are sorted by Probability by default, only sort here if a different sorting is requested\n    sortedHeroes = sortBy === 'probability' ?\n        sortedHeroes.sort((a, b) => a.targetProbability > b.targetProbability ? -1 : a.targetProbability < b.targetProbability ? 1 : 0) :\n        sortedHeroes.sort((a, b) => {\n            if (sortBy === 'price') {\n                const aPrice = a.price + (a.auctionType === 'sale' ? 0 : a.summonCost)\n                const bPrice = b.price + (b.auctionType === 'sale' ? 0 : b.summonCost)\n                return aPrice > bPrice ? 1 : aPrice < bPrice ? -1 : 0\n            }\n\n            return 0\n        })\n\n    return sortedHeroes\n}","/**\n * @fileoverview Hero Classes and tiers.\n */\n\n export const CLASS_REV = {\n    warrior: 'Warrior',\n    knight: 'Knight',\n    thief: 'Thief',\n    archer: 'Archer',\n    priest: 'Priest',\n    wizard: 'Wizard',\n    monk: 'Monk',\n    pirate: 'Pirate',\n    seer: 'Seer',\n    berserker: 'Berserker',\n    paladin: 'Paladin',\n    darkKnight: 'DarkKnight',\n    summoner: 'Summoner',\n    ninja: 'Ninja',\n    shapeshifter: 'Shapeshifter',\n    dragoon: 'Dragoon',\n    sage: 'Sage',\n    dreadKnight: 'DreadKnight',\n}\n\nexport const basicClasses = [\n    'warrior',\n    'knight',\n    'thief',\n    'archer',\n    'priest',\n    'wizard',\n    'monk',\n    'pirate',\n    'seer',\n    'berserker'\n  ]\n\nexport const advancedClasses = ['paladin', 'darkKnight', 'summoner', 'ninja', 'shapeshifter']\n\nexport const eliteClasses = ['dragoon', 'sage']\n\nexport const exaltedClasses = ['dreadKnight']\n\nexport const PROFESSIONS_AR = ['mining', 'gardening', 'foraging', 'fishing']\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '../../constants/degenking'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, highlighted, title, type }) => {\n    return <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className={`value${highlighted && highlighted.includes(gene) ? ' highlighted' : ''}`}>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    highlighted: PropTypes.array,\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst StatGene = ({ boldIfNot, value }) => {\n    let className = 'value'\n\n    if (boldIfNot && !value.toString().toLowerCase().includes(boldIfNot)) {\n         className += ' highlighted'\n    }\n\n    return (\n        <div className='gene'>\n            <div className={className}>{value}</div>\n        </div>\n    )\n}\n\nconst HeroSnapshotStatGenes = ({ className, genes }) => {\n    // const statsUnknown1 = genes['statsUnknown1'] ? genes['statsUnknown1'] : genes.statGenes['statsUnknown1']\n    // const statsUnknown2 = genes['statsUnknown2'] ? genes['statsUnknown2'] : genes.statGenes['statsUnknown2']\n    // const element = genes['element'] ? genes['element'] : genes.statGenes['element']\n\n    return (\n        <>\n            <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Active</div>\n                <StatGene value={genes['active1']} boldIfNot='basic' />\n                <StatGene value={genes['active2']} boldIfNot='basic' />\n            </div>\n            <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Passive</div>\n                <StatGene value={genes['passive1']} boldIfNot='basic' />\n                <StatGene value={genes['passive2']} boldIfNot='basic' />\n            </div>\n            {/* <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Unknown</div>\n                <StatGene value={statsUnknown1} />\n                <StatGene value={statsUnknown2} />\n            </div>\n            <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Element</div>\n                <StatGene value={element} />\n            </div> */}\n        </>\n    )\n}\n\nHeroSnapshotStatGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.object\n}\n\nHeroSnapshotStatGenes.defaultProps = {\n}\n\nexport default HeroSnapshotStatGenes\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroSnapshotStatGenes from './HeroSnapshotStatGenes'\nimport { GENE_TYPES } from '../../constants/hero-genes'\n\nconst HeroSnapshotBack = ({ highlights, hero }) => {\n    return (\n        <>\n            <div className='hero-snapshot-genes-section'>\n                <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' highlighted={highlights.mainClass} />\n                <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n                <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={GENE_TYPES.Professions} highlighted={highlights.profession} />\n            </div>\n            <div className='hero-snapshot-stat-genes-section'>\n                <HeroSnapshotStatGenes genes={hero} />\n            </div>\n        </>\n    )\n}\n\nHeroSnapshotBack.propTypes = {\n    highlights: PropTypes.object\n}\n\nHeroSnapshotBack.defaultProps = {\n    highlights: {}\n}\n\nexport default HeroSnapshotBack\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroStat from '../HeroCard/HeroStat'\n\nconst HeroSnapshotFront = ({ hero }) => {\n    return (\n        <>\n            <HeroStatSection title='Stats'>\n                <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n                <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n                <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n                <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n                <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n                <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n                <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n                <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n            </HeroStatSection>\n            <HeroStatSection className='profession-stat-section' title='Professions'>\n                <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n                <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n                <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n                <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n            </HeroStatSection>\n        </>\n    )\n}\n\nexport default HeroSnapshotFront","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Rarity } from '@thanpolas/degenking/src/constants/constants.const'\nimport { NETWORKS, REALMS } from '../../constants/realms'\nimport { PascalCase } from '../../helpers/format.helpers'\nimport HeroSnapshotBack from './HeroSnapshotBack'\nimport HeroSnapshotFront from './HeroSnapshotFront'\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\nconst JewelIcon = () => (<img src='/jewel50.png' className='jewel-icon' alt='Jewel' />)\nconst CrystalIcon = () => (<img src='/crystal100.png' className='jewel-icon' alt='Jewel' />)\n\nconst PriceGroup = ({ label, showIcon, network, value }) => {\n    const icon = network === NETWORKS.harmony.id ? <JewelIcon /> : <CrystalIcon />\n    return (\n        <div className='price-group'>\n            <div className='price-value'>\n                {value}{showIcon && icon}\n            </div>\n            <div className='price-label'>\n                {label}\n            </div>\n        </div>\n    )\n}\n\nconst HeroSnapshot = ({ highlights, hero, title, view }) => {\n    const grl = `Gen ${hero.generation} | ${Rarity[hero.rarity]} | Level ${hero.level}`\n    const cp = `${PascalCase(hero.mainClass)} / ${PascalCase(hero.subClass)} | ${PascalCase(hero.profession)}`\n    const icon = hero.originRealm === REALMS.serendale.id ? <JewelIcon /> : <CrystalIcon />\n\n    return (\n        <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n            <div className='hero-snapshot-title'>\n                {title}\n            </div>\n            <div className='hero-snapshot-name'>\n                Hero {icon} #{hero.displayId}\n            </div>\n            <div className='hero-snapshot-grc'>\n                {grl}\n            </div>\n            <div className='hero-snapshot-grc'>\n                {cp}\n            </div>\n            {view === 'front' && <HeroSnapshotFront hero={hero} />}\n            {view === 'back' && <HeroSnapshotBack hero={hero} highlights={highlights} />}\n            <div className='hero-snapshot-pricing'>\n                {hero.price && (<PriceGroup label={<>{`${hero.auctionType === 'sale' ? 'Purchase' : 'Rental'}`}<br />Price</>} value={hero.price} showIcon network={hero.network} />)}\n                <PriceGroup label={<>Summon<br />Cost</>} value={hero.summonCost} showIcon network={hero.network} />\n                {hero.auctionType === 'assisting' && <PriceGroup label={<>Total<br />Cost</>} value={Number(hero.price) + Number(hero.summonCost)} showIcon network={hero.network} />}\n                <PriceGroup label={hero.generation === 0 ? <>Total<br />Summons</> : <>Summons<br />Remaining</>} value={`${hero.maxSummons === 11 ? hero.summons : hero.summonsRemaining}/${hero.maxSummons === 11 ? '∞' : hero.maxSummons}`} />\n            </div>\n            <div className='hero-snapshot-owner'>\n                Owned by: {hero.owner ? hero.owner.name : 'UNAVAILABLE'}\n            </div>\n        </div>\n    )\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object,\n    highlights: PropTypes.object,\n    view: PropTypes.string\n}\n\nHeroSnapshot.defaultProps = {\n    view: 'front'\n}\n\nexport default HeroSnapshot\n","import HeroSnapshot from './HeroSnapshot'\nexport default HeroSnapshot\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Checkbox from '@mui/material/Checkbox'\nimport Grid from '@mui/material/Grid'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport './SortFilter.css'\n\nconst SortFilter = ({ onFiltersChange, onSortByChange, onViewToggled, visible }) => {\n    const [sortBy, setSort] = useState('probability')\n    const [summonsRemaining, setSummonsRemaining] = useState('')\n    const [maxSummons, setMaxSummons] = useState('')\n    const [minGen, setMinGen] = useState('0')\n    const [maxGen, setMaxGen] = useState('14')\n    const [includeSummonClass, setIncludeSummonClass] = useState(false)\n\n    const handleFilterChange = ({ target }) => {\n        let _summonsRemaining = summonsRemaining\n        let _maxSummons = maxSummons\n        let _minGen = minGen\n        let _maxGen = maxGen\n        let _includeSummonClass = includeSummonClass\n\n        if (target.name === 'summonsRemaining') {\n            _summonsRemaining = target.value\n            setSummonsRemaining(target.value)\n        }\n\n        if (target.name === 'maxSummons') {\n            _maxSummons = target.value\n            setMaxSummons(target.value)\n        }\n\n        if (target.name === 'minGen') {\n            _minGen = target.value\n            setMinGen(target.value)\n        }\n\n        if (target.name === 'maxGen') {\n            _maxGen = target.value\n            setMaxGen(target.value)\n        }\n\n        if (target.name === 'includeSummonClass') {\n            _includeSummonClass = Boolean(target.value)\n            setIncludeSummonClass(target.value)\n        }\n\n        onFiltersChange({ summonsRemaining: _summonsRemaining, maxSummons: _maxSummons, minGen: _minGen, maxGen: _maxGen, includeSummonClass: _includeSummonClass })\n    }\n\n    const handleViewToggled = (event) => {\n        onViewToggled(event.target.checked)\n    }\n\n    const handleSortByChange = ({ target }) => {\n        setSort(target.value)\n        onSortByChange(target.value)\n    }\n\n\n    if (!visible)\n        return null\n\n    return (\n        <Grid container className='sort-filter' justifyContent='center'>            \n            <Grid item className='section'>\n                <Switch defaultChecked={false} onChange={handleViewToggled} />\n                Flip Cards\n            </Grid>\n            <Grid item className='section'>\n                <div className='sort-label'>\n                    Sort By:\n                </div>\n                <div className='sort-value'>\n                    <Select\n                        label='Sort by'\n                        name='sort-by'\n                        className='sort-by-selecter'\n                        value={sortBy}\n                        variant='standard'\n                        onChange={handleSortByChange}\n                    >\n                        <MenuItem key='probability' value='probability'>Probability</MenuItem>\n                        <MenuItem key='price' value='price'>Price</MenuItem>\n                    </Select>\n                </div>\n            </Grid>\n            <Grid item className='section'>\n                <div className='filter-label'>\n                    Filters:\n                </div>\n                <div className='filter-selections'>\n                    Summons\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Remaining\n                            <TextField\n                                name='summonsRemaining'\n                                value={summonsRemaining}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxSummons'\n                                value={maxSummons}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='filter-selections'>\n                    Generation\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Min\n                            <TextField\n                                name='minGen'\n                                value={minGen}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxGen'\n                                value={maxGen}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='include-summon-class'>\n                    <div>Include Summon Class</div>\n                    <Checkbox\n                        name='includeSummonClass'\n                        value={includeSummonClass}\n                        onChange={handleFilterChange}\n                    />\n                </div>\n            </Grid>\n        </Grid>\n    )\n}\n\nSortFilter.propTypes = {\n    onFiltersChange: PropTypes.func,\n    onSortByChange: PropTypes.func,\n    onViewToggled: PropTypes.func,\n    visible: PropTypes.bool,\n}\n\nSortFilter.defaultProps = {\n    onFiltersChange: () => { },\n    onSortByChange: () => { },\n    onViewToggled: () => { },\n    visible: false,\n}\n\nexport default SortFilter\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CLASS_REV, basicClasses, advancedClasses, eliteClasses, exaltedClasses, PROFESSIONS_AR as professions } from '../../constants/degenking'\nimport { NETWORKS, REALMS } from '../../constants/realms'\n\nimport Button from '@mui/material/Button'\nimport Grid from '@mui/material/Grid'\nimport ListSubheader from '@mui/material/ListSubheader'\nimport MenuItem from '@mui/material/MenuItem'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\n\nimport './styles.css'\n\nconst JewelIcon = () => (<img src='/jewel50.png' className='jewel-icon' alt='Jewel' />)\nconst CrystalIcon = () => (<img src='/crystal100.png' className='jewel-icon' alt='Jewel' />)\n\nconst auctionTypes = [{ label: 'sale', value: 'sale' }, { label: 'rent', value: 'assisting' }]\n\nconst networks = [{ label: 'Serendale', value: NETWORKS.harmony.id }, { label: 'Crystalvale', value: NETWORKS.dfkchain.id }]\n\nconst professionAllOption = { label: 'any profession', value: 'all' }\n\nconst options = (array) => {\n    return array.map(item => {\n        const label = typeof (item) === 'string' ? item : item.label\n        const value = typeof (item) === 'string' ? item : item.value\n        return <MenuItem key={value} value={value}>{label}</MenuItem>\n    })\n}\n\nconst auctionTypeOptions = options(auctionTypes)\n\nconst networkOptions = options(networks)\n\nconst professionOptions = options([professionAllOption, ...professions])\n\nconst SearchFormSimple = ({ defaultSummonClass, isHeroLoaded, onHeroChange, onSubmit, onToggle }) => {\n    const [summonClass, setSummonClass] = useState('')\n    const [summonProfession, setSummonProfession] = useState('all')\n    const [auctionType, setAuctionType] = useState('assisting')\n    const [network, setNetwork] = useState(NETWORKS.harmony.id)\n    const [originRealm, setOriginRealm] = useState(REALMS.serendale.id)\n    const [heroId, setHeroId] = useState('')\n    const [summonClassOptions, setSummonClassOptions] = useState([])\n\n    useEffect(() => {\n        // Renders the list of options for the Summon Class dropdown\n        const basic = basicClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const advanced = advancedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const elite = eliteClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const exalted = exaltedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const options = [\n            (<ListSubheader key='basic'>Basic Classes</ListSubheader>),\n            ...basic,\n            (<ListSubheader key='advanced'>Advanced Classes</ListSubheader>),\n            ...advanced,\n            (<ListSubheader key='elite'>Elite Classes</ListSubheader>),\n            ...elite,\n            (<ListSubheader key='exalted'>Exalted Classes</ListSubheader>),\n            ...exalted\n        ]\n\n        setSummonClassOptions(options)\n    }, [])\n\n    useEffect(() => {\n        if (defaultSummonClass) {\n            setSummonClass(defaultSummonClass)\n        }\n    }, [defaultSummonClass])\n\n    // Saves changes to the selected Auction Type\n    const handleAuctionTypeChange = ({ target }) => {\n        setAuctionType(target.value)\n    }\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = (event) => {\n        setHeroId(event.target.value)\n    }\n\n\n    // Loads the selected hero\n    const handleHeroIdBlur = ({ target }) => {\n        onHeroChange && onHeroChange(target.value, originRealm)\n    }\n\n\n    const handleHeroIdEnter = (event) => {\n        if (event.key === 'Enter') {\n            handleHeroIdBlur(event)\n        }\n    }\n\n\n    // Saves changes to the selected Network\n    const handleNetworkChange = ({ target }) => {\n        setNetwork(target.value)\n    }\n\n\n    // Saves changes to the selected Origin Realm\n    const handleOriginRealmChange = ({ target }) => {\n        setOriginRealm(target.value)\n        heroId && onHeroChange && onHeroChange(heroId, target.value)\n    }\n\n\n    // Saves changes to the select Summon Profession\n    const handleSummonProfessionChange = ({ target }) => {\n        setSummonProfession(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        setSummonClass(target.value)\n    }\n\n\n    // Submits the form to the calling component\n    const handleSubmit = () => {\n        const searchCriteria = {\n            auctionType,\n            heroId,\n            network,\n            originRealm,\n            summonClass,\n            summonProfession: summonProfession === 'all' ? '' : summonProfession\n        }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n    const canSubmit = isHeroLoaded && summonClass\n\n    return (\n        <Grid container className='search-form-simple' justifyContent='center' spacing={0}>\n            <Grid item>\n                Find me heroes for\n                <Select\n                    label='Auction Type'\n                    name='auction-type'\n                    className='auction-type-selecter'\n                    value={auctionType}\n                    variant='standard'\n                    onChange={handleAuctionTypeChange}\n                >\n                    {auctionTypeOptions}\n                </Select>\n            </Grid>\n            <Grid item>\n                in the\n                <Select\n                    name='network'\n                    className='network-selecter'\n                    value={network}\n                    variant='standard'\n                    onChange={handleNetworkChange}\n                >\n                    {networkOptions}\n                </Select>\n                tavern,\n            </Grid>\n            <Grid item className='hero-container'>\n                who can match with hero\n                <Select\n                    className='origin-realm-selecter'\n                    name='origin-realm'\n                    value={originRealm}\n                    variant='standard'\n                    onChange={handleOriginRealmChange}\n                >\n                    <MenuItem value={REALMS.serendale.id}>\n                        <JewelIcon />\n                    </MenuItem>\n                    <MenuItem value={REALMS.crystalvale.id}>\n                        <CrystalIcon />\n                    </MenuItem>\n                </Select>\n                #\n                <TextField\n                    className='hero-id-selecter'\n                    placeholder='hero id'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                    onKeyPress={handleHeroIdEnter}\n                />\n            </Grid>\n            <Grid item>\n                to summon a\n                <Select\n                    label='Class to be summoned'\n                    name='summoned-class'\n                    className='summoned-class-selecter'\n                    value={summonClass}\n                    variant='standard'\n                    onChange={handleSummonClassChange}\n                >\n                    {summonClassOptions}\n                </Select>\n            </Grid>\n            <Grid item>\n                for\n                <Select\n                    label='Profession to be summoned'\n                    name='summoned-profession'\n                    className='summoned-profession-selecter'\n                    value={summonProfession}\n                    variant='standard'\n                    onChange={handleSummonProfessionChange}\n                >\n                    {professionOptions}\n                </Select>\n            </Grid>\n            <Grid item>\n                <Button variant='contained' onClick={handleSubmit} disabled={!canSubmit}>\n                    <SearchIcon />\n                </Button>\n                {/* <a href=\"#\" className='search-form-toggle' onClick={onToggle}>Advanced Search</a> */}\n            </Grid>\n        </Grid>\n    )\n}\n\nSearchFormSimple.propTypes = {\n    defaultSummonClass: PropTypes.string,\n    isHeroLoaded: PropTypes.bool,\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onToggle: PropTypes.func,\n}\n\nSearchFormSimple.defaultProps = {\n    defaultSummonClass: '',\n    isHeroLoaded: false,\n    onToggle: () => { }\n}\n\nexport default SearchFormSimple\n","import SummonsMatchList from './SummonsMatchList'\nexport default SummonsMatchList\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot/HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ highlights, heroes, view }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability * 100).toFixed(2)}% probability`\n    return heroes.length ?\n        heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} view={view} highlights={highlights} />) :\n        null\n}\n\nSummonsMatchList.propTypes = {\n    highlights: PropTypes.object,\n    heroes: PropTypes.array,\n    view: PropTypes.string\n}\n\nexport default SummonsMatchList\n","import React, { useState } from 'react'\nimport { decodeRecessiveGenesAndNormalize } from '@thanpolas/degenking/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroDataByAuction } from '../../services/auction.service'\nimport { calcuateSummonCost } from '../../helpers/prices.helper'\nimport { getProbabilityThatHeroesCanSummonTargetGene, getPossibleSummonClasses } from '../../helpers/genes.helpers'\nimport { CamelCase, ToPrice } from '../../helpers/format.helpers'\nimport { getMainHero, sortAndFilterHeroes } from './functions'\nimport { REALMS } from '../../constants/realms'\n\nimport Alert from '@mui/material/Alert'\nimport Container from '@mui/material/Container'\nimport HeroSnapshot from '../HeroSnapshot'\nimport SortFilter from '../SortFilter/SortFilter'\nimport SearchFormSimple from '../SearchFormSimple/SearchFormSimple'\nimport SummonsMatchList from '../SummonsMatchList'\n\nimport './styles.css'\n\nconst statusMessages = [\n    'Now there is an interesting fellow.',\n    'Oh, the Tavern has Perch Porter on draft.',\n    'Chatting with Agent Selina.  She is such a sweetheart!',\n    'Are those wings on her back, or she just harpy to see me?',\n    'Woah, big guy!  Careful with those horns!'\n]\n\nconst MainHero = ({ hero, view }) => {\n    return hero ?\n        (<div className='main-hero'>\n            <HeroSnapshot hero={hero} title='Main Hero' view={view} />\n        </div>) :\n        null\n}\n\nconst LoadingMessage = ({ heroCount, loaded, loading, message }) => {\n    const textToDisplay = loading ? message : loaded && !heroCount ? 'No Heroes Found' : null\n    return textToDisplay ? (\n        <Alert variant='outlined' severity='success' className='loading-message'>\n            {textToDisplay}\n        </Alert>\n    ) : null\n}\n\nconst RegressiveSearchPage = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [hasLoaded, setHasLoaded] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState('')\n    const [searchForm, setSearchForm] = useState('simple')\n    const [sortBy, setSortBy] = useState('probability')\n    const [filters, setFilters] = useState({})\n    const [mutationClass, setMutationClass] = useState('')\n    const [mainHero, setMainHero] = useState()\n    const [heroes, setHeroes] = useState([])\n    const [view, setView] = useState('back')\n    const [highlights, setHighlights] = useState()\n\n    const delay = ms => new Promise(res => setTimeout(res, ms))\n\n    const setRandomLoadingMessage = () => {\n        const randomIndex = Math.floor(Math.random() * statusMessages.length)\n        setLoadingMessage(statusMessages[randomIndex])\n    }\n\n    // Updates filters\n    const handleFiltersChange = filters => {\n        setFilters(filters)\n    }\n\n    // Looks up the selected Hero\n    const handleHeroChange = async (heroNumber, originRealm) => {\n        const heroId = originRealm === REALMS.serendale.id ? heroNumber : `${'1000000000000'.slice(0, 13 - heroNumber.length)}${heroNumber}`\n        if (heroId && (!mainHero || mainHero.id !== heroId)) {\n            // Clear currently displayed main and matching heroes\n            setHeroes([])\n            setMainHero()\n\n            // Retrieve the main hero from DFK\n            const _mainHero = await getMainHero(heroId)\n            setMainHero(_mainHero)\n\n            // Set a default for the class to summon based on the selected hero\n            setMutationClass(_mainHero.mutationClass)\n        }\n    }\n\n    // Updates sorting options\n    const handleSortByChange = value => {\n        setSortBy(value)\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async searchCriteria => {\n        setHeroes([])\n        setIsLoading(true)\n        setRandomLoadingMessage()\n\n        let allHeroes = []\n        const pageSize = 50\n        let offset = 0\n        let isLastPage = false\n\n        // Set the highlights\n        const classes = getPossibleSummonClasses(CamelCase(mainHero.mainClass), searchCriteria.summonClass)\n        setHighlights({ mainClass: classes, profession: [searchCriteria.summonProfession] })\n\n        while (!isLastPage) {\n            // Retrieve a page of hero listings from tavern\n            const pageOfListings = await getHeroDataByAuction(searchCriteria.auctionType, searchCriteria.network, classes, searchCriteria.summonProfession, pageSize, offset)\n            const listedHeroes = decodeRecessiveGenesAndNormalize(pageOfListings.heroes)\n\n            // Analyze each of the heroes in auction\n            for (let i = 0; i < listedHeroes.length; i++) {\n                const heroToAnalyze = listedHeroes[i]\n                heroToAnalyze.displayId = heroToAnalyze.id.length === 13 ? Number(heroToAnalyze.id.slice(1)).toString() : heroToAnalyze.id\n                heroToAnalyze.auctionType = searchCriteria.auctionType\n                heroToAnalyze.summonCost = calcuateSummonCost(heroToAnalyze)\n                heroToAnalyze.price = ToPrice(heroToAnalyze.price)\n                const classProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.mainClassGenes, heroToAnalyze.mainClassGenes, searchCriteria.summonClass)\n\n                if (searchCriteria.summonProfession) {\n                    const professionProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.professionGenes, heroToAnalyze.professionGenes, searchCriteria.summonProfession)\n                    heroToAnalyze.targetProbability = classProbability && professionProbability ? classProbability.value * professionProbability.value : 0\n                } else {\n                    heroToAnalyze.targetProbability = classProbability ? classProbability.value : 0\n                }\n            }\n\n            // Remove any heroes who cannot be used to summon the target class\n            const filteredHeroes = listedHeroes.filter(hero => hero.targetProbability > 0)\n\n            console.log(`${allHeroes.length} existing heroes`)\n            console.log(`adding ${filteredHeroes.length} new heroes`)\n\n            // Merge and sort heroes by highest to lowest probability of summoning target class\n            allHeroes = allHeroes.concat(filteredHeroes)\n\n            console.log(`now ${allHeroes.length} total heroes`)\n\n            // Update state to display heroes\n            setHeroes(allHeroes)\n            setRandomLoadingMessage()\n\n            offset += pageSize\n            isLastPage = pageOfListings.length === 0\n\n            await delay(1000)\n\n            // ONLY LOAD 1 PAGE FOR TESTING\n            isLastPage = offset > 200\n        }\n\n        setIsLoading(false)\n        setHasLoaded(true)\n    }\n\n    // Changes which search form is displayed\n    const handleSearchFormToggle = () => {\n        setSearchForm(searchForm === 'simple' ? 'advanced' : 'simple')\n    }\n\n    // Change the current view\n    const handleViewToggled = (checked) => {\n        setView(checked ? 'front' : 'back')\n    }\n\n    const sortedHeroes = sortAndFilterHeroes(heroes, filters, sortBy, mutationClass)\n\n    return (\n        <Container maxWidth='xl'>\n            <SearchFormSimple defaultSummonClass={mutationClass} isHeroLoaded={!!mainHero} onHeroChange={handleHeroChange} onToggle={handleSearchFormToggle} onSubmit={handleSubmit} />\n            <SortFilter onFiltersChange={handleFiltersChange} onSortByChange={handleSortByChange} onViewToggled={handleViewToggled} visible={!!mainHero} />\n            <LoadingMessage heroCount={heroes.length} loading={isLoading} loaded={hasLoaded} message={loadingMessage} />\n            <div className='hero-list'>\n                <MainHero hero={mainHero} view={view} />\n                <SummonsMatchList heroes={sortedHeroes} view={view} highlights={highlights} />\n            </div>\n        </Container>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main className=\"App-main\">\n        <RegressiveSearchPage />\n      </main>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}