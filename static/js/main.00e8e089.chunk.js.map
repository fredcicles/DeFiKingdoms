{"version":3,"sources":["services/auction.service.js","constants/hero-classes.const.js","helpers/format.helpers.js","helpers/genes.helpers.js","constants/hero-genes.const.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroSnapshot/HeroSnapshotStatGenes.js","components/HeroSnapshot/HeroSnapshotBack.js","components/HeroCard/HeroStatSection.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/HeroSnapshotFront.js","components/HeroSnapshot/HeroSnapshot.js","components/HeroSnapshot/index.js","components/SortFilter/SortFilter.js","components/SearchFormSimple/index.js","components/SummonsMatchList/index.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["apiv6_endpoint","getHeroDataByAuction","a","auctionType","mainClasses","profession","take","skip","console","log","options","headers","graphQLClient","GraphQLClient","filter","length","map","name","price","query","gql","request","data","heroes","classMutationPairings","mutation","CamelToPascal","word","toUpperCase","slice","dominantGeneProbabilities","mutationProbabilities","getPotentialDominantGenes","heroGenes","i","value","condenseGenes","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","currentGene","push","getMutations","concat","sort","b","condenseAndSortGenesByHighestProbability","getProbabilityThatHeroesCanSummonTargetGene","hero1Genes","hero2Genes","targetClass","_class","toLowerCase","getPossibleSummonClasses","parentClass","summonedClass","mutationPairing","parentIsMutatable","c","assistingClass","getMutationClass","heroClass","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","className","heroid","title","type","geneName","CLASS_REV","defaultProps","StatGene","boldIfNot","toString","HeroSnapshotStatGenes","statsUnknown1","statGenes","statsUnknown2","element","HeroSnapshotBack","hero","mainClassGenes","id","subClassGenes","professionGenes","HeroStatSection","children","HeroStat","main","minor","nameClasses","HeroSnapshotFront","strength","statBoost1","statBoost2","agility","endurance","wisdom","dexterity","vitality","intelligence","luck","rarityClass","HeroSnapshot","view","Number","grl","generation","Rarity","rarity","level","cp","mainClass","subClass","owner","ownerName","summons","summonsRemaining","maxSummons","SortFilter","onFiltersChange","onSortByChange","onViewToggled","visible","useState","sortBy","setSort","setSummonsRemaining","setMaxSummons","handleFilterChange","target","_summonsRemaining","_maxSummons","Switch","defaultChecked","onChange","event","checked","Select","label","variant","MenuItem","TextField","array","item","auctionTypeOptions","professionOptions","professions","SearchFormSimple","defaultSummonClass","isHeroLoaded","onHeroChange","onSubmit","onToggle","summonClass","setSummonClass","summonProfession","setSummonProfession","setAuctionType","heroId","setHeroId","summonClassOptions","setSummonClassOptions","useEffect","basic","basicClasses","CONSTANTS","advanced","advancedClasses","elite","eliteClasses","exalted","exaltedClasses","ListSubheader","canSubmit","placeholder","onBlur","Button","onClick","disabled","SummonsMatchList","renderTitle","targetProbability","toFixed","statusMessages","MainHero","LoadingMessage","heroCount","loaded","loading","message","textToDisplay","RegressiveSearchPage","isLoading","setIsLoading","hasLoaded","setHasLoaded","loadingMessage","setLoadingMessage","searchForm","setSearchForm","setSortBy","filters","setFilters","mutationClass","setMutationClass","mainHero","setMainHero","setHeroes","setView","delay","ms","Promise","res","setTimeout","setRandomLoadingMessage","randomIndex","Math","floor","random","handleHeroChange","getHeroesChain","handleSubmit","searchCriteria","allHeroes","pageSize","offset","isLastPage","pageOfListings","listedHeroes","decodeRecessiveGenesAndNormalize","heroToAnalyze","classProbability","professionProbability","filteredHeroes","sortedHeroes","aPrice","bPrice","remaining","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00e8e089.chunk.js","sourcesContent":["// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\n// const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\nconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\nconst getAuctionData = async (type = 'sale', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  const table = type === 'sale' ? 'saleAuctions' : 'assistingAuctions'\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    auctions: ${table}(\n      orderBy: startedAt\n      orderDirection: desc\n      first: ${take}\n      skip: ${skip}\n      where:{\n        open: true\n      }\n    )\n    {\n      id\n      startingPrice\n      endingPrice\n      open\n      tokenId{\n        id\n        numberId\n      }\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.auctions.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\n/*\n * auctionType: sale | assisting\n */\nconst getHeroDataByAuction = async (auctionType = 'sale', mainClasses = [], profession = '', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  let filter = `${auctionType}Price_not: null`\n\n  // If specified, add main class to filter\n  if (mainClasses.length) {\n    filter = `${filter}\n    mainClass_in: [${mainClasses.map(name => `\"${name}\"`)}]`\n  }\n\n  // If specified, add profession to filter\n  if (profession) {\n    filter = `${filter}\n    profession: \"${profession}\"`\n  }\n\n  const price = `price: ${auctionType}Price`\n\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    heroes(\n      first: ${take}\n      skip: ${skip}\n      where:{\n        ${filter}\n      }\n    )\n    {\n      id\n      owner{\n        name\n      }\n      firstName\n      lastName\n      rarity\n      gender\n      generation\n      mainClass\n      subClass\n      level\n      profession\n      fishing\n      foraging\n      gardening\n      mining\n  \n      stamina\n  \n      summonsRemaining\n      maxSummons\n      summons\n      \n      active1\n      active2\n      passive1\n      passive2\n      statBoost1\n      statBoost2\n      statsUnknown1\n      statsUnknown2\n      element\n  \n      strength\n      agility\n      endurance\n      wisdom\n      dexterity\n      vitality\n      intelligence\n      luck\n\n      ${price}\n      status\n      hpFullAt\n      mpFullAt\n      statGenesRaw: statGenes\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.heroes.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\nexport { getAuctionData, getHeroDataByAuction }\n","/**\n * @fileoverview Hero Classes and tiers.\n */\n\nexport const classMutationPairings = [\n  { 'classes': ['warrior', 'knight'], mutation: 'paladin' },\n  { 'classes': ['thief', 'archer'], mutation: 'darkKnight' },\n  { 'classes': ['priest', 'wizard'], mutation: 'summoner' },\n  { 'classes': ['monk', 'pirate'], mutation: 'ninja' },\n  { 'classes': ['paladin', 'darkKnight'], mutation: 'dragoon' },\n  { 'classes': ['summoner', 'ninja'], mutation: 'sage' },\n  { 'classes': ['dragoon', 'sage'], mutation: 'dreadKnight' }\n]\n","export const CamelToPascal = word => `${word[0].toUpperCase()}${word.slice(1)}`\n\nexport const ToPrice = price => Number(price) / 1000000000000000000\n","import { getHeroTier } from '@thanpolas/dfk-hero/src/heroes-helpers/summon-utils.ent'\nimport { classMutationPairings } from '../constants/hero-classes.const'\nimport { CamelToPascal } from '../helpers/format.helpers'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\nconst getPotentialDominantGenes = heroGenes => {\n    return heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] }))\n}\n\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1, hero2) => {\n    const mutations = []\n\n    for (let currentGene = 0; currentGene < 4; currentGene++) {\n        // 2. Mutable dominant gene\n        const mutation = getMutationProbability(hero1[currentGene], hero2[currentGene])\n\n        // 3. Adjust dominant gene, if mutation is possible\n        if (mutation) {\n            mutations.push(mutation)\n            hero1[currentGene].value -= mutation.value\n            hero2[currentGene].value -= mutation.value\n        }\n    }\n\n    return condenseGenes(mutations)\n}\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(hero1DominantGene.name, hero2DominantGene.name)\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\nconst lookupMutation = (gene1, gene2) => classMutationPairings.find(pair => gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2))\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const getProbabilityThatHeroesCanSummonTargetGene = (hero1Genes, hero2Genes, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1Genes, hero2Genes)\n    return classProbabilities.find(_class => _class.name.toLowerCase() === targetClass.toLowerCase())\n}\n\nexport const getPossibleSummonClasses = (parentClass, summonedClass) => {\n    const classes = [summonedClass]\n\n    // If the parent and the child are the same class, 2nd parent should be same as 1st parent for highest probability\n    if (parentClass.toLowerCase() === summonedClass.toLowerCase()) return classes\n\n    // If the parentClass could mutate to the summonedClass, add the complimentary parent class\n    const mutationPairing = classMutationPairings.find(pair => pair.mutation.toLowerCase() === summonedClass.toLowerCase())\n\n    if (mutationPairing) {\n        const parentIsMutatable = mutationPairing.classes.find(c => c === parentClass)\n        let assistingClass = mutationPairing.classes.find(c => c !== parentClass)\n\n        if (parentIsMutatable)\n            classes.push(CamelToPascal(assistingClass))        \n    }    \n\n    return classes\n}\n\n// Retrieves the mutation class for the specified base class\nexport const getMutationClass = heroClass => {\n    return classMutationPairings.find(pair => pair.classes.includes(heroClass)).mutation\n}\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes.const'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, title, type }) => {\n    return <div className={`hero-snapshot-genes ${className}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className='value'>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst StatGene = ({ boldIfNot, value }) => {\n    let className = 'value'\n\n    if (boldIfNot && !value.toString().toLowerCase().includes(boldIfNot)) {\n         className += ' notBasic'\n    }\n\n    return (\n        <div className='gene'>\n            <div className={className}>{value}</div>\n        </div>\n    )\n}\n\nconst HeroSnapshotStatGenes = ({ className, genes }) => {\n\n    const statsUnknown1 = genes['statsUnknown1'] ? genes['statsUnknown1'] : genes.statGenes['statsUnknown1']\n    const statsUnknown2 = genes['statsUnknown2'] ? genes['statsUnknown2'] : genes.statGenes['statsUnknown2']\n    const element = genes['element'] ? genes['element'] : genes.statGenes['element']\n\n    return (\n        <>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Active</div>\n                <StatGene value={genes['active1']} boldIfNot='basic' />\n                <StatGene value={genes['active2']} boldIfNot='basic' />\n            </div>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Passive</div>\n                <StatGene value={genes['passive1']} boldIfNot='basic' />\n                <StatGene value={genes['passive2']} boldIfNot='basic' />\n            </div>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Unknown</div>\n                <StatGene value={statsUnknown1} />\n                <StatGene value={statsUnknown2} />\n            </div>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Element</div>\n                <StatGene value={element} />\n            </div>\n        </>\n    )\n}\n\nHeroSnapshotStatGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.object\n}\n\nHeroSnapshotStatGenes.defaultProps = {\n}\n\nexport default HeroSnapshotStatGenes\n","import React from 'react'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroSnapshotStatGenes from './HeroSnapshotStatGenes'\n\nconst HeroSnapshotBack = ({ hero }) => {\n    return (\n        <>\n            <div className='hero-snapshot-genes-section'>\n                <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' />\n                <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n                <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={2} />\n            </div>\n            <div className='hero-snapshot-genes-section'>\n                <HeroSnapshotStatGenes genes={hero} heroid={hero.id} />\n            </div>\n        </>\n    )\n}\n\nexport default HeroSnapshotBack\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroStat from '../HeroCard/HeroStat'\n\nconst HeroSnapshotFront = ({ hero }) => {\n    return (\n        <>\n            <HeroStatSection title='Stats'>\n                <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n                <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n                <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n                <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n                <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n                <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n                <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n                <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n            </HeroStatSection>\n            <HeroStatSection className='profession-stat-section' title='Professions'>\n                <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n                <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n                <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n                <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n            </HeroStatSection>\n        </>\n    )\n}\n\nexport default HeroSnapshotFront","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Rarity } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { CamelToPascal, ToPrice } from '../../helpers/format.helpers'\nimport HeroSnapshotBack from './HeroSnapshotBack'\nimport HeroSnapshotFront from './HeroSnapshotFront'\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\n\nconst HeroSnapshot = ({ hero, title, view }) => {\n    const name = `${hero.name ? hero.name : 'Main Hero'} (#${hero.id}) ${hero.price ? `- J ${ToPrice(hero.price)}` : ''}`\n    const grl = `Gen${hero.generation} | ${Rarity[hero.rarity]} | Level ${hero.level}`\n    const cp = `${CamelToPascal(hero.mainClass)} / ${CamelToPascal(hero.subClass)} | ${CamelToPascal(hero.profession)}`\n\n    return <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n        <div className='hero-snapshot-title'>\n            {title}\n        </div>\n        <div className='hero-snapshot-name'>\n            {name}\n        </div>\n        <div className='hero-snapshot-grc'>\n            {grl}\n        </div>\n        <div className='hero-snapshot-grc'>\n            {cp}\n        </div>\n        <div className='hero-snapshot-owner'>\n            Owned by: {hero.owner ? hero.owner.name : hero.ownerName}\n        </div>\n        <div className='hero-snapshot-summons'>\n            Summons: {hero.summons ? hero.summons : hero.summonsRemaining}/{hero.maxSummons}\n        </div>\n        {view === 'front' && <HeroSnapshotFront hero={hero} />}\n        {view === 'back' && <HeroSnapshotBack hero={hero} />}\n    </div>\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object,\n    view: PropTypes.string\n}\n\nHeroSnapshot.defaultProps = {\n    view: 'front'\n}\n\nexport default HeroSnapshot\n","import HeroSnapshot from './HeroSnapshot'\nexport default HeroSnapshot\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport './SortFilter.css'\n\nconst SortFilter = ({ onFiltersChange, onSortByChange, onViewToggled, visible }) => {\n    const [sortBy, setSort] = useState('probability')\n    const [summonsRemaining, setSummonsRemaining] = useState('')\n    const [maxSummons, setMaxSummons] = useState('')\n\n    const handleFilterChange = ({ target }) => {\n        let _summonsRemaining = summonsRemaining\n        let _maxSummons = maxSummons\n\n        if (target.name === 'summonsRemaining') {\n            _summonsRemaining = target.value\n            setSummonsRemaining(_summonsRemaining)\n        }\n\n        if (target.name === 'maxSummons') {\n            _maxSummons = target.value\n            setMaxSummons(_maxSummons)\n        }\n\n        onFiltersChange({ summonsRemaining: _summonsRemaining, maxSummons: _maxSummons })\n    }\n\n    const handleViewToggled = (event) => {\n        onViewToggled(event.target.checked)\n    }\n\n    const handleSortByChange = ({ target }) => {\n        setSort(target.value)\n        onSortByChange(target.value)\n    }\n\n\n    if (!visible)\n        return null\n\n    return (\n        <div className='sort-filter'>\n            <div className='section'>\n                <Switch defaultChecked onChange={handleViewToggled} />\n                Flip Cards\n            </div>\n            <div className='section'>\n                <div className='sort-label'>\n                    Sort By:\n                </div>\n                <div className='sort-value'>\n                    <Select\n                        label='Sort by'\n                        name='sort-by'\n                        className='sort-by-selecter'\n                        value={sortBy}\n                        variant='standard'\n                        onChange={handleSortByChange}\n                    >\n                        <MenuItem key='probability' value='probability'>Probability</MenuItem>\n                        <MenuItem key='price' value='price'>Price</MenuItem>\n                    </Select>\n                </div>\n            </div>\n            <div className='section'>\n                <div className='filter-label'>\n                    Filters:\n                </div>\n                <div className='filter-selections'>\n                    Summons\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Remaining\n                            <TextField\n                                name='summonsRemaining'\n                                value={summonsRemaining}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxSummons'\n                                value={maxSummons}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nSortFilter.propTypes = {\n    onFiltersChange: PropTypes.func,\n    onSortByChange: PropTypes.func,\n    onViewToggled: PropTypes.func,\n    visible: PropTypes.bool,\n}\n\nSortFilter.defaultProps = {\n    onFiltersChange: () => { },\n    onSortByChange: () => { },\n    onViewToggled: () => { },\n    visible: false,\n}\n\nexport default SortFilter\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { CONSTANTS } from '@thanpolas/dfk-hero'\nimport { PROFESSIONS_AR as professions } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { basicClasses, advancedClasses, eliteClasses, exaltedClasses } from '@thanpolas/dfk-hero/src/constants/hero-classes.const'\nimport { CamelToPascal } from '../../helpers/format.helpers'\nimport Button from '@mui/material/Button'\nimport ListSubheader from '@mui/material/ListSubheader'\nimport MenuItem from '@mui/material/MenuItem'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\nimport './styles.css'\n\nconst auctionTypes = [{ label: 'sale', value: 'sale' }, { label: 'rent', value: 'assisting' }]\n\nconst professionAllOption = { label: 'any profession', value: 'all' }\n\nconst options = (array) => {\n    return array.map(item => {\n        const label = typeof (item) === 'string' ? item : item.label\n        const value = typeof (item) === 'string' ? item : item.value\n        return <MenuItem key={value} value={value}>{label}</MenuItem>\n    })\n}\n\nconst auctionTypeOptions = options(auctionTypes)\n\nconst professionOptions = options([professionAllOption, ...professions])\n\nconst SearchFormSimple = ({ defaultSummonClass, isHeroLoaded, onHeroChange, onSubmit, onToggle }) => {\n    const [summonClass, setSummonClass] = useState('')\n    const [summonProfession, setSummonProfession] = useState('all')\n    const [auctionType, setAuctionType] = useState('assisting')\n    const [heroId, setHeroId] = useState('')\n    const [summonClassOptions, setSummonClassOptions] = useState([])\n\n    useEffect(() => {\n        // Renders the list of options for the Summon Class dropdown\n        const basic = basicClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const advanced = advancedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const elite = eliteClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const exalted = exaltedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const options = [\n            (<ListSubheader key='basic'>Basic Classes</ListSubheader>),\n            ...basic,\n            (<ListSubheader key='advanced'>Advanced Classes</ListSubheader>),\n            ...advanced,\n            (<ListSubheader key='elite'>Elite Classes</ListSubheader>),\n            ...elite,\n            (<ListSubheader key='exalted'>Exalted Classes</ListSubheader>),\n            ...exalted\n        ]\n\n        setSummonClassOptions(options)\n    }, [])\n\n    useEffect(() => {\n        if (defaultSummonClass) {\n            setSummonClass(CamelToPascal(defaultSummonClass))\n        }\n    }, [defaultSummonClass])\n\n    // Saves changes to the selected Auction Type\n    const handleAuctionTypeChange = ({ target }) => {\n        setAuctionType(target.value)\n    }\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = ({ target }) => {\n        setHeroId(target.value)\n    }\n\n\n    // Loads the selected hero\n    const handleHeroIdBlur = ({ target }) => {\n        onHeroChange && onHeroChange(target.value)\n    }\n\n\n    // Saves changes to the select Summon Profession\n    const handleSummonProfessionChange = ({ target }) => {\n        setSummonProfession(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        setSummonClass(target.value)\n    }\n\n\n    // Submits the form to the calling component\n    const handleSubmit = () => {\n        const searchCriteria = { auctionType, heroId, summonClass, summonProfession: summonProfession === 'all' ? '' : summonProfession }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n    const canSubmit = isHeroLoaded && summonClass    \n\n    return (\n        <div className='search-form-simple'>\n            Find me heroes for\n            <Select\n                label='Auction Type'\n                name='auction-type'\n                className='auction-type-selecter'\n                value={auctionType}\n                variant='standard'\n                onChange={handleAuctionTypeChange}\n            >\n                {auctionTypeOptions}\n            </Select>\n            who could match with hero #\n            <div className='hero-id-selecter'>\n                <TextField\n                    placeholder='hero id'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                />\n            </div>\n            to summon a\n            <Select\n                label='Class to be summoned'\n                name='summoned-class'\n                className='summoned-class-selecter'\n                value={summonClass}\n                variant='standard'\n                onChange={handleSummonClassChange}\n            >\n                {summonClassOptions}\n            </Select>\n            for\n            <Select\n                label='Profession to be summoned'\n                name='summoned-profession'\n                className='summoned-profession-selecter'\n                value={summonProfession}\n                variant='standard'\n                onChange={handleSummonProfessionChange}\n            >\n                {professionOptions}\n            </Select>\n            <Button variant='contained' onClick={handleSubmit} disabled={!canSubmit}>\n                <SearchIcon />\n            </Button>\n            {/* <a href=\"#\" className='search-form-toggle' onClick={onToggle}>Advanced Search</a> */}\n        </div>\n    )\n}\n\nSearchFormSimple.propTypes = {\n    defaultSummonClass: PropTypes.string,\n    isHeroLoaded: PropTypes.bool,\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onToggle: PropTypes.func,\n}\n\nSearchFormSimple.defaultProps = {\n    defaultSummonClass: '',\n    isHeroLoaded: false,\n    onToggle: () => { }\n}\n\nexport default SearchFormSimple\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot/HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ heroes, view }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability * 100).toFixed(2)}% probability`\n    return heroes.length ?\n        heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} view={view} />) :\n        null\n}\n\nSummonsMatchList.propTypes = {\n    heroes: PropTypes.array,\n    view: PropTypes.string\n}\n\nexport default SummonsMatchList\n","import React, { useState } from 'react'\nimport { decodeRecessiveGenesAndNormalize } from '@thanpolas/dfk-hero/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroesChain } from '@thanpolas/dfk-hero'\nimport { getHeroDataByAuction } from '../../services/auction.service'\nimport { getMutationClass, getProbabilityThatHeroesCanSummonTargetGene, getPossibleSummonClasses } from '../../helpers/genes.helpers'\nimport HeroSnapshot from '../HeroSnapshot'\nimport SortFilter from '../SortFilter/SortFilter'\nimport SearchFormSimple from '../SearchFormSimple'\nimport SummonsMatchList from '../SummonsMatchList'\nimport './styles.css'\n\nconst statusMessages = [\n    'Now there is an interesting fellow.',\n    'Oh, the Tavern has Perch Porter on draft.',\n    'Chatting with Agent Selina.  She is such a sweetheart!',\n    'Are those wings on her back, or she just harpy to see me?',\n    'Woah, big guy!  Careful with those horns!'\n]\n\nconst MainHero = ({ hero, view }) => {\n    return hero ?\n        (<div className='main-hero'>\n            <HeroSnapshot hero={hero} title='Main Hero' view={view} />\n        </div>) :\n        null\n}\n\nconst LoadingMessage = ({ heroCount, loaded, loading, message }) => {\n    const textToDisplay = loading ? message : loaded && !heroCount ? 'No Heroes Found' : null\n    return <div className='loading-message'>{textToDisplay}</div>\n}\n\nconst RegressiveSearchPage = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [hasLoaded, setHasLoaded] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState('')\n    const [searchForm, setSearchForm] = useState('simple')\n    const [sortBy, setSortBy] = useState('probability')\n    const [filters, setFilters] = useState({})\n    const [mutationClass, setMutationClass] = useState('')\n    const [mainHero, setMainHero] = useState()\n    const [heroes, setHeroes] = useState([])\n    const [view, setView] = useState('front')\n\n    const delay = ms => new Promise(res => setTimeout(res, ms))\n\n    const setRandomLoadingMessage = () => {\n        const randomIndex = Math.floor(Math.random() * statusMessages.length)\n        setLoadingMessage(statusMessages[randomIndex])\n    }\n\n    // Updates filters\n    const handleFiltersChange = filters => {\n        setFilters(filters)\n    }\n\n    // Looks up the selected Hero\n    const handleHeroChange = async heroId => {\n        if (heroId) {\n            setHeroes([])\n            setMainHero()\n            const data = await getHeroesChain([heroId])\n            setMainHero(data[0])\n\n            // Set a default for the class to summon based on the selected hero\n            setMutationClass(getMutationClass(data[0].mainClass))\n        }\n    }\n\n    // Updates sorting options\n    const handleSortByChange = value => {\n        setSortBy(value)\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async searchCriteria => {\n        setHeroes([])\n        setIsLoading(true)\n        setRandomLoadingMessage()\n\n        let allHeroes = []\n        const pageSize = 50\n        let offset = 0\n        let isLastPage = false\n\n        while (!isLastPage) {\n            // Retrieve a page of hero listings from tavern\n            const classes = getPossibleSummonClasses(mainHero.mainClass, searchCriteria.summonClass)\n            const pageOfListings = await getHeroDataByAuction(searchCriteria.auctionType, classes, searchCriteria.summonProfession, pageSize, offset)\n            const listedHeroes = decodeRecessiveGenesAndNormalize(pageOfListings.heroes)\n\n            // Analyze each of the heroes in auction\n            for (let i = 0; i < listedHeroes.length; i++) {\n                const heroToAnalyze = listedHeroes[i]\n                const classProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.mainClassGenes, heroToAnalyze.mainClassGenes, searchCriteria.summonClass)\n\n                if (searchCriteria.summonProfession) {\n                    const professionProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.professionGenes, heroToAnalyze.professionGenes, searchCriteria.summonProfession)\n                    heroToAnalyze.targetProbability = classProbability && professionProbability ? classProbability.value * professionProbability.value : 0\n                } else {\n                    heroToAnalyze.targetProbability = classProbability ? classProbability.value : 0\n                }\n            }\n\n            // Remove any heroes who cannot be used to summon the target class\n            const filteredHeroes = listedHeroes.filter(hero => hero.targetProbability > 0)\n\n            console.log(`${allHeroes.length} existing heroes`)\n            console.log(`adding ${filteredHeroes.length} new heroes`)\n\n            // Merge and sort heroes by highest to lowest probability of summoning target class\n            allHeroes = allHeroes\n                .concat(filteredHeroes)\n                .sort((a, b) => a.targetProbability > b.targetProbability ? -1 : a.targetProbability < b.targetProbability ? 1 : 0)\n\n            console.log(`now ${allHeroes.length} total heroes`)\n\n            // Update state to display heroes\n            setHeroes(allHeroes)\n            setRandomLoadingMessage()\n\n            offset += pageSize\n            isLastPage = pageOfListings.length === 0\n\n            await delay(1000)\n\n            // ONLY LOAD 1 PAGE FOR TESTING\n            isLastPage = offset > 200\n        }\n\n        setIsLoading(false)\n        setHasLoaded(true)\n    }\n\n    // Changes which search form is displayed\n    const handleSearchFormToggle = () => {\n        setSearchForm(searchForm === 'simple' ? 'advanced' : 'simple')\n    }\n\n    // Change the current view\n    const handleViewToggled = (checked) => {\n        setView(checked ? 'front' : 'back')\n    }\n\n    // Heroes are sorted by Probability by default, only sort here if a different sorting is requested\n    let sortedHeroes = sortBy === 'probability' ? heroes :\n        heroes.sort((a, b) => {\n            if (sortBy === 'price') {\n                const aPrice = Number(a.price)\n                const bPrice = Number(b.price)\n                return aPrice > bPrice ? 1 : aPrice < bPrice ? -1 : 0\n            }\n\n            return 0\n        })\n\n    if (filters.summonsRemaining || filters.maxSummons) {\n        sortedHeroes = sortedHeroes.filter(hero => {\n            const remaining = !filters.summonsRemaining || Number(hero.summonsRemaining) >= Number(filters.summonsRemaining)\n            const max = !filters.maxSummons || Number(hero.maxSummons) >= Number(filters.maxSummons)\n            return max && remaining\n        })\n    }\n\n    return (\n        <>\n            <SearchFormSimple defaultSummonClass={mutationClass} isHeroLoaded={!!mainHero} onHeroChange={handleHeroChange} onToggle={handleSearchFormToggle} onSubmit={handleSubmit} />            \n            <SortFilter onFiltersChange={handleFiltersChange} onSortByChange={handleSortByChange} onViewToggled={handleViewToggled} visible={heroes.length > 0} />\n            <LoadingMessage heroCount={heroes.length} loading={isLoading} loaded={hasLoaded} message={loadingMessage} />\n            <div className='hero-list'>\n                <MainHero hero={mainHero} view={view} />\n                <SummonsMatchList heroes={sortedHeroes} view={view} />\n            </div>\n        </>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main className=\"App-main\">\n        <RegressiveSearchPage />\n      </main>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}