{"version":3,"sources":["services/auction.service.js","helpers/genes.helpers.js","components/SummonsMatchSearchForm/index.js","components/SummonsMatchSearchForm/SummonsMatchSearchForm.js","components/HeroCard/HeroStatSection.js","constants/hero-genes.const.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/HeroSnapshot.js","components/HeroSnapshot/index.js","components/SummonsMatchList/index.js","components/SummonsMatchList/SummonsMatchList.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["getAuctionData","a","take","skip","apiv6_endpoint","graphQLClient","GraphQLClient","headers","query_ids","gql","request","data","dominantGeneProbabilities","mutationProbabilities","mutationPairings","mutation","getPotentialDominantGenes","heroGenes","map","name","i","value","condenseGenes","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","currentGene","push","getMutations","concat","sort","b","condenseAndSortGenesByHighestProbability","canHeroesSummonClass","targetClass","mainClassGenes","_class","SummonsMatchSearchForm","onHeroChange","onSubmit","useState","summonClass","setSummonClass","heroId","setHeroId","summonClassOptions","Object","keys","CONSTANTS","CLASS_REV","MenuItem","className","TextField","label","variant","onChange","target","console","log","onBlur","event","Select","Button","onClick","HeroStatSection","children","title","defaultProps","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","heroid","type","geneName","HeroStat","main","minor","nameClasses","rarityClass","HeroSnapshot","hero","rarity","id","generation","Rarity","mainClass","subClass","ownerName","subClassGenes","professionGenes","strength","statBoost1","statBoost2","dexterity","agility","vitality","endurance","intelligence","wisdom","luck","profession","SummonsMatchList","loaded","loading","heroes","renderTitle","targetProbability","toFixed","RegressiveSearchPage","setLoaded","loadingAuctionData","setLoadingAuctionData","mainHero","setMainHero","matchingHeroes","setMatchingHeroes","handleSubmit","searchCriteria","JSON","stringify","auctionsData","heroIds","saleAuctions","auction","tokenId","numberId","getHeroesChain","then","_mainHero","length","heroToAnalyze","filter","slice","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4424b10d.chunk.js","sourcesContent":["// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst getAuctionData = async (take = 50, skip = 0) => {\n  // Then define our endpoint URL\n  //const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\n  const apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  })\n\n  /*\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query_full = gql`\n{\n      saleAuctions(\n        orderBy: startedAt\n        orderDirection: desc\n        first: 10\n        where:{\n          open: true\n        }\n      )\n      {\n        id\n        startedAt\n        endedAt\n        duration\n        startingPrice\n        endingPrice\n        open\n        seller{\n          id\n          name\n        }\n        tokenId{\n          id\n          numberId\n        }\n      }\n    }`\n  */\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query_ids = gql`\n\t{\n        saleAuctions(\n          orderBy: startedAt\n          orderDirection: desc\n          first: ${take}\n          skip: ${skip}\n          where:{\n            open: true\n          }\n        )\n        {\n          id\n          startingPrice\n          endingPrice\n          open\n          tokenId{\n            id\n            numberId\n          }\n        }\n      }`\n\n  let data = await graphQLClient.request(query_ids)\n  return data\n}\n\nexport default getAuctionData\n","import { getHeroTier } from '@thanpolas/dfk-hero/src/heroes-helpers/summon-utils.ent'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\nconst mutationPairings = [\n    { 'classes': ['warrior', 'knight'], mutation: 'paladin' },\n    { 'classes': ['thief', 'archer'], mutation: 'darkKnight' },\n    { 'classes': ['priest', 'wizard'], mutation: 'summoner' },\n    { 'classes': ['monk', 'pirate'], mutation: 'ninja' },\n    { 'classes': ['paladin', 'darkKnight'], mutation: 'dragoon' },\n    { 'classes': ['summoner', 'ninja'], mutation: 'sage' },\n    { 'classes': ['dragoon', 'sage'], mutation: 'dreadKnight' }\n]\n\nconst getPotentialDominantGenes = heroGenes => {\n    return heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] }))\n}\n\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1, hero2) => {\n    const mutations = []\n\n    for (let currentGene = 0; currentGene < 4; currentGene++) {\n        // 2. Mutable dominant gene\n        const mutation = getMutationProbability(hero1[currentGene], hero2[currentGene])\n\n        // 3. Adjust dominant gene, if mutation is possible\n        if (mutation) {\n            mutations.push(mutation)\n            hero1[currentGene].value -= mutation.value\n            hero2[currentGene].value -= mutation.value\n        }\n    }\n\n    return condenseGenes(mutations)\n}\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(hero1DominantGene.name, hero2DominantGene.name)\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\nconst lookupMutation = (gene1, gene2) => mutationPairings.find(pair => gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2))\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const canHeroesSummonClass = (hero1, hero2, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1.mainClassGenes, hero2.mainClassGenes)\n    return classProbabilities.find(_class => _class.name === targetClass)\n}\n","import SummonsMatchSearchForm from './SummonsMatchSearchForm'\nexport default SummonsMatchSearchForm\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { CONSTANTS } from '@thanpolas/dfk-hero'\n//import { CONSTANTS } from '../../services/DfkHero'\nimport Button from '@mui/material/Button'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\n//import strings from './strings'\nimport './styles.css'\n\nconst SummonsMatchSearchForm = ({ onHeroChange, onSubmit }) => {\n    const [summonClass, setSummonClass] = useState('warrior')\n    const [heroId, setHeroId] = useState('95734')\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = ({ target }) => {\n        console.log('Selected Hero Id changed')\n        setHeroId(target.value)\n    }\n\n\n    const handleHeroIdBlur = (event) => {\n        const target = event.target\n        console.log('Selected Hero Id blur')\n        onHeroChange && onHeroChange(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        console.log('Selected Summon Class changed')\n        setSummonClass(target.value)\n    }\n\n\n    // Submits the form to the calling component\n    const handleSubmit = event => {\n        const searchCriteria = { heroId, summonClass }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n\n    // Renders the list of options for the Summon Class dropdown\n    const summonClassOptions = Object\n        .keys(CONSTANTS.CLASS_REV)\n        .sort()\n        .map(name => (<MenuItem key={name} value={name}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n\n    return (\n        <div className='SummonsMatchSearchForm'>\n            Find me heroes who could match with hero\n            <div className='hero-id-selecter'>\n                <TextField\n                    label='Hero ID'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                />\n            </div>\n            to summon a\n            <Select\n                label='Class to be summoned'\n                name='summoned-class'\n                className='summoned-class-selecter'\n                value={summonClass}\n                variant='standard'\n                onChange={handleSummonClassChange}\n            >\n                {summonClassOptions}\n            </Select>\n            <Button variant='contained' onClick={handleSubmit}>\n                <SearchIcon />\n            </Button>\n        </div>\n    )\n}\n\nSummonsMatchSearchForm.propTypes = {\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func\n}\n\nexport default SummonsMatchSearchForm\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes.const'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, title, type }) => {\n    return <div className={`hero-snapshot-genes ${className}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className='value'>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.string | PropTypes.number,\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV, Rarity } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroStat from '../HeroCard/HeroStat'\n\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\n\nconst HeroSnapshot = ({ hero, title }) => {\n    return <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n        <div className='hero-snapshot-title'>{title}</div>\n        <div className='hero-snapshot-name'>{hero.name ? hero.name : 'Main Hero'} (#{hero.id})</div>\n        <div className='hero-snapshot-grc'>Gen{hero.generation} | {Rarity[hero.rarity]} | {CLASS_REV[hero.mainClass]}/{CLASS_REV[hero.subClass]}</div>\n        <div className='hero-snapshot-owner'>Owned by: {hero.ownerName}</div>\n        <div className='hero-snapshot-genes-section'>\n            <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' />\n            <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n            <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={2} />\n        </div>\n        <HeroStatSection title='Stats'>\n            <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n            <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n            <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n            <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n            <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n            <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n            <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n            <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n        </HeroStatSection>\n        <HeroStatSection className='profession-stat-section' title='Professions'>\n            <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n            <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n            <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n            <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n        </HeroStatSection>\n    </div>\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object\n}\n\nexport default HeroSnapshot\n","import HeroSnapshot from './HeroSnapshot'\nexport default HeroSnapshot\n","import SummonsMatchList from './SummonsMatchList'\nexport default SummonsMatchList\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ loaded, loading, heroes }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability.value * 100).toFixed(2)}% probability`\n    return (\n        <>\n            {loading && <div>Heading on over to the tavern.\n                </div>}\n            {loaded && !loading && heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} />)}\n        </>\n    )\n}\n\nSummonsMatchList.propTypes = {\n    loaded: PropTypes.bool,\n    loading: PropTypes.bool,\n    heroes: PropTypes.array\n}\n\nexport default SummonsMatchList\n","import React, { useState } from 'react'\n//import PropTypes from 'prop-types'\nimport getAuctionData from '../../services/auction.service'\nimport { getHeroesChain } from '@thanpolas/dfk-hero'\n//import { getHeroesChain } from '../../services/DfkHero'\nimport { canHeroesSummonClass } from '../../helpers/genes.helpers'\nimport SummonsMatchSearchForm from '../SummonsMatchSearchForm'\nimport SummonsMatchList from '../SummonsMatchList'\nimport HeroSnapshot from '../HeroSnapshot'\nimport './styles.css'\n\n\nconst RegressiveSearchPage = () => {\n    const [loaded, setLoaded] = useState(false)\n    const [loadingAuctionData, setLoadingAuctionData] = useState(false)\n\n    const [mainHero, setMainHero] = useState()\n    const [matchingHeroes, setMatchingHeroes] = useState([])\n\n    // Looks up the selected Hero\n    const handleHeroChange = (heroId) => {\n        console.log(`New Hero Selected: ${heroId}`)\n\n        if (heroId) {\n            setMainHero()\n            getHeroesChain([heroId])\n                .then(data => {\n                    setMainHero(data[0])\n                })\n        }\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async (searchCriteria) => {\n        console.log(JSON.stringify(searchCriteria))\n\n        setMatchingHeroes([])\n        setLoadingAuctionData(true)\n\n        const auctionsData = await getAuctionData()\n        const heroIds = auctionsData.saleAuctions.map(auction => auction.tokenId.numberId)\n\n        getHeroesChain([searchCriteria.heroId, ...heroIds])\n            .then(data => {\n                // 1st hero is the main hero, no need to analyze them\n                const _mainHero = data[0]\n\n                // Analyze each of the heroes in auction\n                for (let i = 1; i < data.length; i++) {\n                    const heroToAnalyze = data[i]\n                    heroToAnalyze.targetProbability = canHeroesSummonClass(_mainHero, heroToAnalyze, searchCriteria.summonClass)\n                }\n\n                // Remove any heroes who cannot be used to summon the target class\n                // Order by highest to lowest probability of summoning target class\n                const heroes = data\n                    .filter(hero => hero.targetProbability)\n                    .sort((a, b) => a.targetProbability.value > b.targetProbability.value ? -1 : a.targetProbability.value < b.targetProbability.value ? 1 : 0)\n\n                // Update state to display heroes\n                setMainHero(_mainHero)\n                setMatchingHeroes(heroes.slice(1))\n                setLoadingAuctionData(false)\n                setLoaded(true)\n            })\n    }\n\n    return (\n        <>\n            <SummonsMatchSearchForm onHeroChange={handleHeroChange} onSubmit={handleSubmit} />\n            <div className='hero-list'>\n                {mainHero && <div className='main-hero'><HeroSnapshot hero={mainHero} title='Main Hero' /></div>}\n                <SummonsMatchList loaded={loaded} loading={loadingAuctionData} heroes={matchingHeroes} />\n            </div>\n        </>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <RegressiveSearchPage />\n      </header>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}