{"version":3,"sources":["services/auction.service.js","constants/hero-classes.const.js","helpers/genes.helpers.js","helpers/format.helpers.js","components/HeroCard/HeroStatSection.js","constants/hero-genes.const.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/index.js","components/SortFilter/SortFilter.js","components/SummonsMatchList/index.js","components/SummonsMatchSearchForm/index.js","components/SummonsMatchSearchForm/SummonsMatchSearchForm.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["apiv6_endpoint","getHeroDataByAuction","a","auctionType","mainClasses","take","skip","console","log","options","headers","graphQLClient","GraphQLClient","filter","length","map","name","price","query","gql","request","data","heroes","classMutationPairings","mutation","dominantGeneProbabilities","mutationProbabilities","getPotentialDominantGenes","heroGenes","i","value","condenseGenes","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","currentGene","push","getMutations","concat","sort","b","condenseAndSortGenesByHighestProbability","getProbabilityThatHeroesCanSummonTargetClass","targetClass","mainClassGenes","_class","toLowerCase","getPossibleSummonClasses","parentClass","summonedClass","word","mutationPairing","parentIsMutatable","c","assistingClass","toUpperCase","slice","HeroStatSection","children","className","title","defaultProps","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","heroid","type","geneName","CLASS_REV","HeroStat","main","minor","nameClasses","rarityClass","HeroSnapshot","hero","rarity","id","Number","generation","Rarity","mainClass","subClass","owner","ownerName","subClassGenes","professionGenes","strength","statBoost1","statBoost2","agility","endurance","wisdom","dexterity","vitality","intelligence","luck","profession","SortFilter","onSortByChange","visible","useState","sortBy","setSort","Select","label","variant","onChange","target","MenuItem","SummonsMatchList","renderTitle","targetProbability","toFixed","SummonsMatchSearchForm","onHeroChange","onSubmit","summonClass","setSummonClass","setAuctionType","heroId","setHeroId","summonClassOptions","setSummonClassOptions","useEffect","basic","basicClasses","CONSTANTS","advanced","advancedClasses","elite","eliteClasses","exalted","exaltedClasses","ListSubheader","auctionTypeOptions","TextField","placeholder","onBlur","Button","onClick","event","statusMessages","MainHero","LoadingMessage","heroCount","loaded","loading","message","textToDisplay","RegressiveSearchPage","isLoading","setIsLoading","hasLoaded","setHasLoaded","loadingMessage","setLoadingMessage","setSortBy","mainHero","setMainHero","setHeroes","delay","ms","Promise","res","setTimeout","setRandomLoadingMessage","randomIndex","Math","floor","random","handleHeroChange","getHeroesChain","handleSubmit","searchCriteria","allHeroes","pageSize","offset","isLastPage","pageOfListings","listedHeroes","decodeRecessiveGenesAndNormalize","heroToAnalyze","filteredHeroes","sortedHeroes","aPrice","bPrice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc0625da.chunk.js","sourcesContent":["// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\n// const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\nconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\nconst getAuctionData = async (type = 'sale', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  const table = type === 'sale' ? 'saleAuctions' : 'assistingAuctions'\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    auctions: ${table}(\n      orderBy: startedAt\n      orderDirection: desc\n      first: ${take}\n      skip: ${skip}\n      where:{\n        open: true\n      }\n    )\n    {\n      id\n      startingPrice\n      endingPrice\n      open\n      tokenId{\n        id\n        numberId\n      }\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.auctions.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\n/*\n * auctionType: sale | assisting\n */\nconst getHeroDataByAuction = async (auctionType = 'sale', mainClasses = [], take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  let filter = `${auctionType}Price_not: null`\n  if (mainClasses.length) {\n    filter = `${filter}\n    mainClass_in: [${mainClasses.map(name => `\"${name}\"`)}]`\n  }\n\n  const price = `price: ${auctionType}Price`\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    heroes(\n      first: ${take}\n      skip: ${skip}\n      where:{\n        ${filter}\n      }\n    )\n    {\n      id\n      owner{\n        name\n      }\n      firstName\n      lastName\n      rarity\n      gender\n      generation\n      mainClass\n      subClass\n      level\n      profession\n      fishing\n      foraging\n      gardening\n      mining\n  \n      stamina\n  \n      summonsRemaining\n      maxSummons\n      summons\n      \n      active1\n      active2\n      passive1\n      passive2\n      statBoost1\n      statBoost2\n      statsUnknown1\n      statsUnknown2\n  \n      strength\n      agility\n      endurance\n      wisdom\n      dexterity\n      vitality\n      intelligence\n      luck\n\n      ${price}\n      status\n      hpFullAt\n      mpFullAt\n      statGenesRaw: statGenes\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.heroes.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\nexport { getAuctionData, getHeroDataByAuction }\n","/**\n * @fileoverview Hero Classes and tiers.\n */\n\nexport const classMutationPairings = [\n  { 'classes': ['warrior', 'knight'], mutation: 'paladin' },\n  { 'classes': ['thief', 'archer'], mutation: 'darkKnight' },\n  { 'classes': ['priest', 'wizard'], mutation: 'summoner' },\n  { 'classes': ['monk', 'pirate'], mutation: 'ninja' },\n  { 'classes': ['paladin', 'darkKnight'], mutation: 'dragoon' },\n  { 'classes': ['summoner', 'ninja'], mutation: 'sage' },\n  { 'classes': ['dragoon', 'sage'], mutation: 'dreadKnight' }\n]\n","import { getHeroTier } from '@thanpolas/dfk-hero/src/heroes-helpers/summon-utils.ent'\nimport { classMutationPairings } from '../constants/hero-classes.const'\nimport { CamelToPascal } from '../helpers/format.helpers'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\nconst getPotentialDominantGenes = heroGenes => {\n    return heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] }))\n}\n\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1, hero2) => {\n    const mutations = []\n\n    for (let currentGene = 0; currentGene < 4; currentGene++) {\n        // 2. Mutable dominant gene\n        const mutation = getMutationProbability(hero1[currentGene], hero2[currentGene])\n\n        // 3. Adjust dominant gene, if mutation is possible\n        if (mutation) {\n            mutations.push(mutation)\n            hero1[currentGene].value -= mutation.value\n            hero2[currentGene].value -= mutation.value\n        }\n    }\n\n    return condenseGenes(mutations)\n}\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(hero1DominantGene.name, hero2DominantGene.name)\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\nconst lookupMutation = (gene1, gene2) => classMutationPairings.find(pair => gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2))\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const getProbabilityThatHeroesCanSummonTargetClass = (hero1, hero2, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1.mainClassGenes, hero2.mainClassGenes)\n    return classProbabilities.find(_class => _class.name === targetClass.toLowerCase())\n}\n\nexport const getPossibleSummonClasses = (parentClass, summonedClass) => {\n    const classes = [summonedClass]\n\n    // If the parent and the child are the same class, 2nd parent should be same as 1st parent for highest probability\n    if (parentClass.toLowerCase() === summonedClass.toLowerCase()) return classes\n\n    // If the parentClass could mutate to the summonedClass, add the complimentary parent class\n    const mutationPairing = classMutationPairings.find(pair => pair.mutation.toLowerCase() === summonedClass.toLowerCase())\n\n    if (mutationPairing) {\n        const parentIsMutatable = mutationPairing.classes.find(c => c === parentClass)\n        let assistingClass = mutationPairing.classes.find(c => c !== parentClass)\n\n        if (parentIsMutatable)\n            classes.push(CamelToPascal(assistingClass))        \n    }    \n\n    return classes\n}","export const CamelToPascal = word => `${word[0].toUpperCase()}${word.slice(1)}`\n\nexport const ToPrice = price => Number(price) / 1000000000000000000\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes.const'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, title, type }) => {\n    return <div className={`hero-snapshot-genes ${className}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className='value'>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Rarity } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { ToPrice } from '../../helpers/format.helpers'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroStat from '../HeroCard/HeroStat'\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\n\nconst HeroSnapshot = ({ hero, title }) => {\n    return <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n        <div className='hero-snapshot-title'>\n            {title}\n        </div>\n        <div className='hero-snapshot-name'>\n            {hero.name ? hero.name : 'Main Hero'} (#{hero.id}) {hero.price ? `- J ${ToPrice(hero.price)}` : ''}\n        </div>\n        <div className='hero-snapshot-grc'>\n            Gen{hero.generation} | {Rarity[hero.rarity]} | {hero.mainClass}/{hero.subClass}\n        </div>\n        <div className='hero-snapshot-owner'>\n            Owned by: {hero.owner ? hero.owner.name : hero.ownerName}\n        </div>\n        <div className='hero-snapshot-genes-section'>\n            <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' />\n            <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n            <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={2} />\n        </div>\n        <HeroStatSection title='Stats'>\n            <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n            <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n            <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n            <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n            <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n            <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n            <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n            <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n        </HeroStatSection>\n        <HeroStatSection className='profession-stat-section' title='Professions'>\n            <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n            <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n            <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n            <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n        </HeroStatSection>\n    </div>\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object\n}\n\nexport default HeroSnapshot\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Select from '@mui/material/Select'\nimport MenuItem from '@mui/material/MenuItem'\nimport './SortFilter.css'\n\nconst SortFilter = ({ onSortByChange, visible }) => {\n    const [sortBy, setSort] = useState('probability')\n\n    const handleSortByChange = ({ target }) => {\n        setSort(target.value)\n        onSortByChange(target.value)\n    }\n\n\n    if (!visible)\n        return null\n\n    return (\n        <div className='sort-filter'>\n            <div className='section'>\n                <div className='sort-label'>\n                    Sort By:\n                </div>\n                <div className='sort-value'>\n                    <Select\n                        label='Sort by'\n                        name='sort-by'\n                        className='sort-by-selecter'\n                        value={sortBy}\n                        variant='standard'\n                        onChange={handleSortByChange}\n                    >\n                        <MenuItem key='probability' value='probability'>Probability</MenuItem>\n                        <MenuItem key='price' value='price'>Price</MenuItem>\n                    </Select>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nSortFilter.propTypes = {\n    onSortByChange: PropTypes.func,\n    visible: PropTypes.bool,\n}\n\nSortFilter.defaultProps = {\n    onSortByChange: () => { },\n    visible: false,\n}\n\nexport default SortFilter\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ heroes }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability.value * 100).toFixed(2)}% probability`\n    return heroes.length ?\n        heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} />) :\n        null\n}\n\nSummonsMatchList.propTypes = {\n    heroes: PropTypes.array\n}\n\nexport default SummonsMatchList\n","import SummonsMatchSearchForm from './SummonsMatchSearchForm'\nexport default SummonsMatchSearchForm\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { CONSTANTS } from '@thanpolas/dfk-hero'\nimport { basicClasses, advancedClasses, eliteClasses, exaltedClasses } from '@thanpolas/dfk-hero/src/constants/hero-classes.const'\nimport Button from '@mui/material/Button'\nimport ListSubheader from '@mui/material/ListSubheader'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\nimport './styles.css'\n\nconst SummonsMatchSearchForm = ({ onHeroChange, onSubmit }) => {\n    const [summonClass, setSummonClass] = useState('')\n    const [auctionType, setAuctionType] = useState('sale')\n    const [heroId, setHeroId] = useState('')\n    const [summonClassOptions, setSummonClassOptions] = useState([])\n\n    useEffect(() => {\n        // Renders the list of options for the Summon Class dropdown\n        const basic = basicClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const advanced = advancedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const elite = eliteClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const exalted = exaltedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const options = [\n            (<ListSubheader key='basic'>Basic Classes</ListSubheader>),\n            ...basic,\n            (<ListSubheader key='advanced'>Advanced Classes</ListSubheader>),\n            ...advanced,\n            (<ListSubheader key='elite'>Elite Classes</ListSubheader>),\n            ...elite,\n            (<ListSubheader key='exalted'>Exalted Classes</ListSubheader>),\n            ...exalted\n        ]\n\n        setSummonClassOptions(options)\n    }, [])\n\n    // Saves changes to the selected Auction Type\n    const handleAuctionTypeChange = ({ target }) => {\n        setAuctionType(target.value)\n    }\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = ({ target }) => {\n        setHeroId(target.value)\n    }\n\n\n    // Loads the selected hero\n    const handleHeroIdBlur = ({ target }) => {\n        onHeroChange && onHeroChange(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        setSummonClass(target.value)\n    }\n\n\n    // Submits the form to the calling component\n    const handleSubmit = event => {\n        const searchCriteria = { auctionType, heroId, summonClass }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n\n    const auctionTypeOptions = [\n        <MenuItem key='sale' value='sale'>sale</MenuItem>,\n        <MenuItem key='rent' value='assisting'>rent</MenuItem>\n    ]\n\n    return (\n        <div className='SummonsMatchSearchForm'>\n            Find me heroes for\n            <Select\n                label='Auction Type'\n                name='auction-type'\n                className='auction-type-selecter'\n                value={auctionType}\n                variant='standard'\n                onChange={handleAuctionTypeChange}\n            >\n                {auctionTypeOptions}\n            </Select>\n            who could match with hero #\n            <div className='hero-id-selecter'>\n                <TextField\n                    placeholder='hero id'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                />\n            </div>\n            to summon a\n            <Select\n                label='Class to be summoned'\n                name='summoned-class'\n                className='summoned-class-selecter'\n                value={summonClass}\n                variant='standard'\n                onChange={handleSummonClassChange}\n            >\n                {summonClassOptions}\n            </Select>\n            <Button variant='contained' onClick={handleSubmit}>\n                <SearchIcon />\n            </Button>\n        </div>\n    )\n}\n\nSummonsMatchSearchForm.propTypes = {\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func\n}\n\nexport default SummonsMatchSearchForm\n","import React, { useState } from 'react'\nimport { decodeRecessiveGenesAndNormalize } from '@thanpolas/dfk-hero/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroesChain } from '@thanpolas/dfk-hero'\nimport { getHeroDataByAuction } from '../../services/auction.service'\nimport { getProbabilityThatHeroesCanSummonTargetClass, getPossibleSummonClasses } from '../../helpers/genes.helpers'\nimport HeroSnapshot from '../HeroSnapshot'\nimport SortFilter from '../SortFilter/SortFilter'\nimport SummonsMatchList from '../SummonsMatchList'\nimport SummonsMatchSearchForm from '../SummonsMatchSearchForm'\nimport './styles.css'\n\nconst statusMessages = [\n    'Now there is an interesting fellow.',\n    'Oh, the Tavern has Perch Porter on draft.',\n    'Chatting with Agent Selina.  She is such a sweetheart!',\n    'Are those wings on her back, or she just harpy to see me?',\n    'Woah, big guy!  Careful with those horns!'\n]\n\nconst MainHero = ({ hero }) => {\n    return hero ?\n        (<div className='main-hero'>\n            <HeroSnapshot hero={hero} title='Main Hero' />\n        </div>) :\n        null\n}\n\nconst LoadingMessage = ({ heroCount, loaded, loading, message }) => {\n    const textToDisplay = loading ? message : loaded && !heroCount ? 'No Heroes Found' : null\n    return <div className='loading-message'>{textToDisplay}</div>\n}\n\nconst RegressiveSearchPage = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [hasLoaded, setHasLoaded] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState('')\n    const [sortBy, setSortBy] = useState('probability')\n    const [mainHero, setMainHero] = useState()\n    const [heroes, setHeroes] = useState([])\n\n    const delay = ms => new Promise(res => setTimeout(res, ms))\n\n    const setRandomLoadingMessage = () => {\n        const randomIndex = Math.floor(Math.random() * statusMessages.length)\n        setLoadingMessage(statusMessages[randomIndex])\n    }\n\n    // Looks up the selected Hero\n    const handleHeroChange = async heroId => {\n        if (heroId) {\n            setMainHero()\n            const data = await getHeroesChain([heroId])\n            setMainHero(data[0])\n        }\n    }\n\n    const handleSortByChange = value => {\n        setSortBy(value)\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async searchCriteria => {\n        setHeroes([])\n        setIsLoading(true)\n        setRandomLoadingMessage()\n\n        let allHeroes = []\n        const pageSize = 50\n        let offset = 0\n        let isLastPage = false\n\n        while (!isLastPage) {\n            // Retrieve a page of hero listings from tavern\n            const classes = getPossibleSummonClasses(mainHero.mainClass, searchCriteria.summonClass)\n            const pageOfListings = await getHeroDataByAuction(searchCriteria.auctionType, classes, pageSize, offset)\n            const listedHeroes = decodeRecessiveGenesAndNormalize(pageOfListings.heroes)\n\n            // Analyze each of the heroes in auction\n            for (let i = 0; i < listedHeroes.length; i++) {\n                const heroToAnalyze = listedHeroes[i]\n                heroToAnalyze.targetProbability = getProbabilityThatHeroesCanSummonTargetClass(mainHero, heroToAnalyze, searchCriteria.summonClass)\n            }\n\n            // Remove any heroes who cannot be used to summon the target class\n            const filteredHeroes = listedHeroes.filter(hero => hero.targetProbability)\n\n            console.log(`${allHeroes.length} existing heroes`)\n            console.log(`adding ${filteredHeroes.length} new heroes`)\n\n            // Merge and sort heroes by highest to lowest probability of summoning target class\n            allHeroes = allHeroes\n                .concat(filteredHeroes)\n                .sort((a, b) => a.targetProbability.value > b.targetProbability.value ? -1 : a.targetProbability.value < b.targetProbability.value ? 1 : 0)\n\n            console.log(`now ${allHeroes.length} total heroes`)\n\n            // Update state to display heroes\n            setHeroes(allHeroes)\n            setRandomLoadingMessage()\n\n            offset += pageSize\n            isLastPage = pageOfListings.length === 0\n\n            await delay(1000)\n\n            // ONLY LOAD 1 PAGE FOR TESTING\n            isLastPage = offset > 200\n        }\n\n        setIsLoading(false)\n        setHasLoaded(true)\n    }\n\n    // Heroes are sorted by Probability by default, only sort here if a different sorting is requested\n    const sortedHeroes = sortBy === 'probability' ? heroes :\n        heroes.sort((a, b) => {\n            if (sortBy === 'price') {\n                const aPrice = Number(a.price)\n                const bPrice = Number(b.price)\n                return aPrice > bPrice ? 1 : aPrice < bPrice ? -1 : 0\n            }\n\n            return 0\n        })\n\n    return (\n        <>\n            <SummonsMatchSearchForm onHeroChange={handleHeroChange} onSubmit={handleSubmit} />\n            <SortFilter onSortByChange={handleSortByChange} visible={heroes.length > 0} />\n            <LoadingMessage heroCount={heroes.length} loading={isLoading} loaded={hasLoaded} message={loadingMessage} />\n            <div className='hero-list'>\n                <MainHero hero={mainHero} />\n                <SummonsMatchList heroes={sortedHeroes} />\n            </div>\n        </>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main className=\"App-main\">\n        <RegressiveSearchPage />\n      </main>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}