{"version":3,"sources":["helpers/format.helpers.js","constants/realms.js","services/auction.service.js","helpers/prices.helper.js","constants/hero-classes.js","helpers/genes.helpers.js","services/hero.service.js","components/RegressiveSearchPage/functions.js","constants/degenking.js","constants/hero-genes.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroSnapshot/HeroSnapshotStatGenes.js","components/HeroSnapshot/HeroSnapshotBack.js","components/HeroCard/HeroStatSection.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/HeroSnapshotFront.js","components/HeroSnapshot/HeroSnapshot.js","components/HeroSnapshot/index.js","components/SortFilter/SortFilter.js","components/SearchFormSimple/SearchFormSimple.js","components/SummonsMatchList/index.js","components/SummonsMatchList/SummonsMatchList.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["PascalCase","word","toUpperCase","slice","CamelCase","toLowerCase","REALMS","id","name","NETWORKS","apiv6_endpoint","getHeroDataByAuction","auctionType","network","mainClasses","profession","walletAddress","take","skip","console","log","options","headers","graphQLClient","GraphQLClient","filter","price","length","map","query","gql","request","data","heroes","SummonsCosts","generation","baseCost","increment","maxCost","calcuateSummonCost","summons","maxSummons","tier","classMutationPairings","mutation","dominantGeneProbabilities","mutationProbabilities","getPotentialDominantGenes","heroGenes","condenseGenes","i","value","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","hero1Genes","hero2Genes","j","push","getMutations","concat","sort","a","b","condenseAndSortGenesByHighestProbability","getProbabilityThatHeroesCanSummonTargetGene","targetClass","_class","getPossibleSummonClasses","parentClass","summonedClass","include","mutationPairing","parentIsMutatable","c","assistingClass","getMutationClass","heroClass","getHeroById","getMainHero","hero","decodeRecessiveGenesAndNormalize","sheerFix","displayId","Number","toString","summonCost","mutationClass","mainClass","fix","mainClassGenes","subClassGenes","CLASS_REV","warrior","knight","thief","archer","priest","wizard","monk","pirate","seer","berserker","paladin","darkKnight","summoner","ninja","shapeshifter","dragoon","sage","dreadKnight","basicClasses","advancedClasses","eliteClasses","exaltedClasses","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","className","heroid","highlighted","title","type","geneName","defaultProps","StatGene","boldIfNot","HeroSnapshotStatGenes","HeroSnapshotBack","highlights","professionGenes","HeroStatSection","children","HeroStat","main","minor","nameClasses","HeroSnapshotFront","strength","statBoost1","statBoost2","agility","endurance","wisdom","dexterity","vitality","intelligence","luck","rarityClass","JewelIcon","src","alt","CrystalIcon","PriceGroup","label","showIcon","icon","HeroSnapshot","view","grl","Rarity","rarity","level","cp","subClass","originRealm","summonsRemaining","owner","SortFilter","onFiltersChange","onSortByChange","onViewToggled","visible","useState","sortBy","setSort","setSummonsRemaining","setMaxSummons","minGen","setMinGen","maxGen","setMaxGen","classMatch","setClassMatch","subclassMatch","setSubclassMatch","professionMatch","setProfessionMatch","includeSummonClass","setIncludeSummonClass","handleFilterChange","target","_summonsRemaining","_maxSummons","_minGen","_maxGen","_classMatch","_subclassMatch","_professionMatch","_includeSummonClass","checked","Grid","container","justifyContent","item","Switch","defaultChecked","onChange","event","Select","variant","MenuItem","TextField","Checkbox","networks","array","auctionTypeOptions","networkOptions","professionOptions","SearchFormSimple","defaultSummonClass","isHeroLoaded","onHeroChange","onSubmit","onToggle","summonClass","setSummonClass","summonProfession","setSummonProfession","setAuctionType","setNetwork","setOriginRealm","heroId","setHeroId","summonClassOptions","setSummonClassOptions","setWalletAddress","useEffect","basic","advanced","elite","exalted","ListSubheader","handleHeroIdBlur","canSubmit","spacing","placeholder","onBlur","onKeyPress","key","Button","onClick","disabled","SummonsMatchList","renderTitle","targetProbability","toFixed","statusMessages","MainHero","LoadingMessage","heroCount","loaded","loading","message","textToDisplay","Alert","severity","RegressiveSearchPage","isLoading","setIsLoading","hasLoaded","setHasLoaded","loadingMessage","setLoadingMessage","searchForm","setSearchForm","setSortBy","filters","setFilters","setMutationClass","mainHero","setMainHero","setHeroes","setView","setHighlights","delay","ms","Promise","res","setTimeout","setRandomLoadingMessage","randomIndex","Math","floor","random","handleHeroChange","heroNumber","_mainHero","handleSubmit","searchCriteria","allHeroes","pageSize","offset","isLastPage","pageOfListings","listedHeroes","heroToAnalyze","rawPrice","classProbability","professionProbability","filteredHeroes","unionBy","sortedHeroes","remainingSummons","aPrice","bPrice","sortAndFilterHeroes","Container","maxWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXAAaA,EAAa,SAAAC,GAAI,gBAAOA,EAAK,GAAGC,eAAf,OAA+BD,EAAKE,MAAM,KAE3DC,EAAY,SAAAH,GAAI,gBAAOA,EAAK,GAAGI,eAAf,OAA+BJ,EAAKE,MAAM,KCF1DG,EACE,CACPC,GAAI,MACJC,KAAM,aAHDF,EAKI,CACTC,GAAI,MACJC,KAAM,eAIDC,EACA,CACLF,GAAI,MACJC,KAAM,WAHDC,EAKC,CACNF,GAAI,MACJC,KAAM,aCZRE,EAAiB,8EAKjBC,EAAoB,iDAAG,yIAAOC,EAAP,+BAAqB,OAAQC,EAA7B,+BAAuCJ,EAAiBF,GAAIO,EAA5D,+BAA0E,GAAIC,EAA9E,+BAA2F,GAAIC,EAA/F,+BAA+G,GAAIC,EAAnH,+BAA0H,GAAIC,EAA9H,+BAAqI,EAChKC,QAAQC,IAAR,mCAAwCF,EAAO,EAA/C,cAAsDA,EAAOD,EAA7D,qBAEMI,EAAU,CAAEC,QAAS,CAAE,eAAgB,qBAGvCC,EAAgB,IAAIC,gBAAcd,EAAgBW,GAEpDI,EAAS,GACTC,EAAQ,GAEQ,WAAhBd,EACFa,EAAM,kBAAcT,EAAd,MAGNS,EAAM,UAAMb,EAAN,wDACoBC,EADpB,KAENa,EAAK,iBAAad,EAAb,UAIHE,EAAYa,SACdF,EAAM,UAAMA,EAAN,gCACWX,EAAYc,KAAI,SAAApB,GAAI,iBAAQR,EAAWQ,GAAnB,QAD/B,MAKJO,IACFU,EAAM,UAAMA,EAAN,8BACSV,EADT,MAMFc,EAAQC,cAlCa,+2BAqCdb,EACDC,EAEJO,EAiDFC,GAzFqB,UAiGVH,EAAcQ,QAAQF,GAjGZ,eAiGvBG,EAjGuB,OAkG3Bb,QAAQC,IAAR,UAAeY,EAAKC,OAAON,OAA3B,6CAlG2B,kBAmGpBK,GAnGoB,4CAAH,qDCXpBE,EAAe,CACjB,CAAEC,WAAY,EAAGC,SAAU,EAAGC,UAAW,EAAGC,QAAS,IACrD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,EAAGC,SAAU,GAAIC,UAAW,EAAGC,QAAS,IACtD,CAAEH,WAAY,GAAIC,SAAU,IAAKC,UAAW,EAAGC,QAAS,MAG/CC,EAAqB,SAAC,GAAyC,IAAvCJ,EAAsC,EAAtCA,WAAYK,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACtD,GAAIN,EAAa,GAAKA,EAAa,GAAI,MAAO,IAE9C,IAAMO,EAAOR,EAAaC,GAG1B,OAAIK,GAAWC,EAAmBC,EAAKJ,QAEhCI,EAAKN,SAAYI,EAAUE,EAAKL,W,iBClB9BM,EAAwB,CACnC,CAAE,QAAW,CAAC,UAAW,UAAWC,SAAU,WAC9C,CAAE,QAAW,CAAC,QAAS,UAAWA,SAAU,cAC5C,CAAE,QAAW,CAAC,SAAU,UAAWA,SAAU,YAC7C,CAAE,QAAW,CAAC,OAAQ,UAAWA,SAAU,SAC3C,CAAE,QAAW,CAAC,OAAQ,aAAcA,SAAU,gBAC9C,CAAE,QAAW,CAAC,UAAW,cAAeA,SAAU,WAClD,CAAE,QAAW,CAAC,WAAY,SAAUA,SAAU,QAC9C,CAAE,QAAW,CAAC,UAAW,QAASA,SAAU,gBCTxCC,EAA4B,CAAC,IAAM,MAAQ,QAAU,SAGrDC,EAAwB,CAC1B,MAAS,IACT,SAAY,IACZ,MAAS,KACT,QAAW,MAITC,EAA4B,SAAAC,GAC9B,OAAOC,EAAcD,EAAUpB,KAAI,SAACpB,EAAM0C,GAAP,MAAc,CAAE1C,OAAM2C,MAAON,EAA0BK,SAMxFD,EAAgB,SAAAG,GAClB,OAAOA,EAAMC,QAAO,SAACC,EAAWC,EAASL,GACrC,IAAMM,EAAQF,EAAUG,MAAK,SAAAC,GAAQ,OAAIA,EAASlD,OAAS+C,EAAQ/C,QAEnE,OAAIgD,GACAA,EAAML,OAASI,EAAQJ,MAChBG,GAED,GAAN,mBAAWA,GAAX,CAAsBC,MAE3B,KA2BDI,EAAyB,SAACC,EAAmBC,GAC/C,IAAMjB,EAAWkB,EAAeF,EAAkBpD,KAAMqD,EAAkBrD,MAG1E,GAAIoC,EAAU,CACV,IAAMmB,EAAsBjB,EAAsBkB,sBAAYJ,EAAkBpD,OAEhF,MAAO,CACHA,KAAMoC,EAASA,SACfO,MAAOS,EAAkBT,MAAQU,EAAkBV,MAAQY,GAKnE,OAAO,MAILD,EAAiB,SAACG,EAAOC,GAAR,OAAkBvB,EAAsBc,MAAK,SAAAU,GAEhE,OADUF,IAAUC,GAASC,EAAKC,QAAQC,SAASJ,IAAUE,EAAKC,QAAQC,SAASH,OAMjFI,EAAa,SAAAlB,GAAK,OAAIA,EAAMmB,SAAQ,SAAAC,GAAI,OAAIA,EAAKrB,MAAQqB,EAAKrB,MAAQ,MAS/DsB,EAAoC,SAACC,EAAgBC,GAG9D,IAAMC,EAAQ,CACVC,MAAO9B,EAA0B2B,GACjCI,MAAO/B,EAA0B4B,IAcrC,OAPAC,EAAMG,UApEW,SAACC,EAAYC,GAG9B,IAFA,IAAMF,EAAY,GAET7B,EAAI,EAAGA,EAAI8B,EAAWrD,OAAQuB,IACnC,IAAK,IAAIgC,EAAI,EAAGA,EAAID,EAAWtD,OAAQuD,IAAK,CAExC,IAAMtC,EAAWe,EAAuBqB,EAAW9B,GAAI+B,EAAWC,IAGlE,GAAItC,EAAU,CACVmC,EAAUI,KAAKvC,GACfoC,EAAW9B,GAAGC,OAASP,EAASO,MAChC8B,EAAWC,GAAG/B,OAASP,EAASO,MAChC,OAKZ,OAAO4B,EAkDWK,CAAaR,EAAMC,MAAOD,EAAME,OAGlDR,EAAWM,EAAMC,OACjBP,EAAWM,EAAME,OAvB4B,SAACF,GAAD,OAC7C3B,EAAc2B,EAAMC,MAAMQ,OAAOT,EAAME,MAAOF,EAAMG,YAC/CO,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpC,MAAQqC,EAAErC,OAAS,EAAIoC,EAAEpC,MAAQqC,EAAErC,MAAQ,EAAI,KAwB9DsC,CAAyCb,IAGvCc,EAA8C,SAACV,EAAYC,EAAYU,GAEhF,OAD2BlB,EAAkCO,EAAYC,GAC/CxB,MAAK,SAAAmC,GAAM,OAAIA,EAAOpF,KAAKH,gBAAkBsF,EAAYtF,kBAG1EwF,EAA2B,SAACC,EAAaC,EAAeC,GACjE,IAAM5B,EAAU,CAAC2B,GAGjB,GAAID,IAAgBC,EAAe,OAAO3B,EAG1C,IAAM6B,EAAkBtD,EAAsBc,MAAK,SAAAU,GAAI,OAAIA,EAAKvB,WAAamD,KAE7E,GAAIE,EAAiB,CACjB,IAAMC,EAAoBD,EAAgB7B,QAAQX,MAAK,SAAA0C,GAAC,OAAIA,IAAML,KAC9DM,EAAiBH,EAAgB7B,QAAQX,MAAK,SAAA0C,GAAC,OAAIA,IAAML,KAEzDI,GACA9B,EAAQe,KAAKiB,GAGrB,OAAOhC,GAIEiC,EAAmB,SAAAC,GAC5B,OAAO3D,EAAsBc,MAAK,SAAAU,GAAI,OAAIA,EAAKC,QAAQC,SAASiC,MAAY1D,UC1InE2D,EAAW,iDAAG,WAAOhG,GAAP,2FAGH,8EAGdgB,EAAgB,IAAIC,gBAHN,8EAGoC,CACpDF,QAAS,CACL,eAAgB,sBAMlBO,EAAQC,cAdS,85BAqBjBvB,GArBiB,SA8ENgB,EAAcQ,QAAQF,GA9EhB,cA8EnBG,EA9EmB,yBA+EhBA,GA/EgB,2CAAH,sDCGXwE,EAAW,iDAAG,WAAMjG,GAAN,mGACJgG,EAAYhG,GADR,WACjByB,EADiB,QAGbC,OAAON,OAHM,yCAGS,MAHT,cAKjB8E,EAAOC,2CAAiC1E,EAAKC,QAAQ,GAC3D0E,EAASF,GACTA,EAAKG,UAA+B,KAAnBH,EAAKlG,GAAGoB,OAAgBkF,OAAOJ,EAAKlG,GAAGJ,MAAM,IAAI2G,WAAaL,EAAKlG,GACpFkG,EAAKM,WAAaxE,EAAmBkE,GACrCA,EAAKO,cAAgBX,EAAiBjG,EAAUqG,EAAKQ,YAT9B,kBAWhBR,GAXgB,4CAAH,sDAoDXE,EAAW,SAACF,GACrB,IAAMS,EAAM,SAAC9D,GACT,IAAK,IAAIF,EAAI,EAAGA,EAAIE,EAAMzB,OAAQuB,IACb,UAAbE,EAAMF,KAAgBE,EAAMF,GAAK,SAI7CgE,EAAIT,EAAKU,gBACTD,EAAIT,EAAKW,gB,2BC9DCC,EAAY,CACtBC,QAAS,UACTC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,UAAW,YACXC,QAAS,UACTC,WAAY,aACZC,SAAU,WACVC,MAAO,QACPC,aAAc,eACdC,QAAS,UACTC,KAAM,OACNC,YAAa,eAGJC,EAAe,CACxB,UACA,SACA,QACA,SACA,SACA,SACA,OACA,SACA,OACA,aAGSC,EAAkB,CAAC,UAAW,aAAc,WAAY,QAAS,gBAEjEC,EAAe,CAAC,UAAW,QAE3BC,EAAiB,CAAC,eC1ClBC,EAAc,CAAC,IAAK,KAAM,KAAM,MAEhCC,EACA,EADAA,GAGI,E,QCAXC,GAAc,CAChBC,OAAQ,SACRC,SAAU,WACVC,UAAW,YACXC,QAAS,WAGPC,GAAoB,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,UAAWhG,EAA8C,EAA9CA,MAAOiG,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACvE,OAAO,uBAAKJ,UAAS,6BAAwBA,EAAS,WAAOA,GAAc,IAApE,UACH,sBAAKA,UAAU,QAAf,SAAwBG,IACvBnG,EAAMxB,KAAI,SAAC4C,EAAMtB,GAEd,IAAIuG,EAAWD,IAASX,EAAqBxB,EAAU7C,GAAQgF,IAASX,GAAyBC,GAAYtE,GAAQA,EAIrH,OAFKiF,IAAUA,EAAWjF,GAGtB,uBAAyC4E,UAAU,OAAnD,UACI,uBAAKA,UAAU,QAAf,UAAwBR,EAAY1F,GAApC,OACA,sBAAKkG,UAAS,eAAUE,GAAeA,EAAYjF,SAASG,GAAQ,eAAiB,IAArF,SAA4FiF,MAFhG,UAAaJ,EAAb,YAAuBT,EAAY1F,YAkBnDiG,GAAkBO,aAAe,CAC7BF,KAAM,GAGKL,UCzCTQ,GAAW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAWzG,EAAY,EAAZA,MACvBiG,EAAY,QAMhB,OAJIQ,IAAczG,EAAM2D,WAAWzG,cAAcgE,SAASuF,KACrDR,GAAa,gBAId,sBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAWA,EAAhB,SAA4BjG,OAKlC0G,GAAwB,SAAC,GAA0B,IAAxBT,EAAuB,EAAvBA,UAAWhG,EAAY,EAAZA,MAKxC,OACI,uCACI,uBAAKgG,UAAS,6BAAwBA,EAAS,WAAOA,GAAc,IAApE,UACI,sBAAKA,UAAU,QAAf,oBACA,eAAC,GAAD,CAAUjG,MAAOC,EAAK,QAAawG,UAAU,UAC7C,eAAC,GAAD,CAAUzG,MAAOC,EAAK,QAAawG,UAAU,aAEjD,uBAAKR,UAAS,6BAAwBA,EAAS,WAAOA,GAAc,IAApE,UACI,sBAAKA,UAAU,QAAf,qBACA,eAAC,GAAD,CAAUjG,MAAOC,EAAK,SAAcwG,UAAU,UAC9C,eAAC,GAAD,CAAUzG,MAAOC,EAAK,SAAcwG,UAAU,iBAoB9DC,GAAsBH,aAAe,GAGtBG,UCjDTC,GAAmB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,WAAYtD,EAAW,EAAXA,KACpC,OACI,uCACI,uBAAK2C,UAAU,8BAAf,UACI,eAAC,GAAD,CAAmBhG,MAAOqD,EAAKU,eAAgBkC,OAAQ5C,EAAKlG,GAAIgJ,MAAM,QAAQD,YAAaS,EAAW9C,YACtG,eAAC,GAAD,CAAmB7D,MAAOqD,EAAKW,cAAeiC,OAAQ5C,EAAKlG,GAAIgJ,MAAM,aACrE,eAAC,GAAD,CAAmBnG,MAAOqD,EAAKuD,gBAAiBX,OAAQ5C,EAAKlG,GAAIgJ,MAAM,aAAaC,KAAMX,GAAwBS,YAAaS,EAAWhJ,gBAE9I,sBAAKqI,UAAU,mCAAf,SACI,eAAC,GAAD,CAAuBhG,MAAOqD,UAU9CqD,GAAiBJ,aAAe,CAC5BK,WAAY,IAGDD,UC1BTG,GAAkB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUd,EAAuB,EAAvBA,UAAWG,EAAY,EAAZA,MAC5C,OACI,uBAAKH,UAAS,4BAAuBA,GAArC,UACI,sBAAKA,UAAU,QAAf,SAAwBG,IACxB,sBAAKH,UAAU,aAAf,SACKc,QAWjBD,GAAgBP,aAAe,CAC3BN,UAAW,qBAGAa,UCJAE,GAjBE,SAAC,GAAkC,IAAhC3J,EAA+B,EAA/BA,KAAM2C,EAAyB,EAAzBA,MAAOiH,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC7BC,EAAW,cAAUF,GAAQC,EAAQ,cAAgBD,EAAO,QAAUC,EAAQ,SAAW,IAE/F,OACI,uBAAKjB,UAAU,YAAf,UACI,sBAAKA,UAAWkB,EAAhB,SACK9J,IAEL,sBAAK4I,UAAU,QAAf,SACKjG,QCgBFoH,GAvBW,SAAC,GAAc,IAAZ9D,EAAW,EAAXA,KACzB,OACI,uCACI,gBAAC,GAAD,CAAiB8C,MAAM,QAAvB,UACI,eAAC,GAAD,CAAU/I,KAAK,MAAM2C,MAAOsD,EAAK+D,SAAUJ,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aACxF,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKkE,QAASP,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aACvF,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKmE,UAAWR,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aACzF,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKoE,OAAQT,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aACtF,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKqE,UAAWV,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aACzF,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKsE,SAAUX,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aACxF,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKuE,aAAcZ,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,aAC5F,eAAC,GAAD,CAAUlK,KAAK,MAAM2C,MAAOsD,EAAKwE,KAAMb,KAA0B,QAApB3D,EAAKgE,WAAsBJ,MAA2B,QAApB5D,EAAKiE,gBAExF,gBAAC,GAAD,CAAiBtB,UAAU,0BAA0BG,MAAM,cAA3D,UACI,eAAC,GAAD,CAAU/I,KAAK,SAAS2C,MAAOsD,EAAKsC,OAAQqB,KAA0B,WAApB3D,EAAK1F,aACvD,eAAC,GAAD,CAAUP,KAAK,UAAU2C,MAAOsD,EAAKyC,QAASkB,KAA0B,YAApB3D,EAAK1F,aACzD,eAAC,GAAD,CAAUP,KAAK,YAAY2C,MAAOsD,EAAKwC,UAAWmB,KAA0B,cAApB3D,EAAK1F,aAC7D,eAAC,GAAD,CAAUP,KAAK,WAAW2C,MAAOsD,EAAKuC,SAAUoB,KAA0B,aAApB3D,EAAK1F,oBCZrEmK,I,OAAc,CAAC,SAAU,WAAY,OAAQ,YAAa,WAC1DC,GAAY,kBAAO,sBAAKC,IAAI,eAAehC,UAAU,aAAaiC,IAAI,WACtEC,GAAc,kBAAO,sBAAKF,IAAI,kBAAkBhC,UAAU,aAAaiC,IAAI,WAE3EE,GAAa,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAU5K,EAAqB,EAArBA,QAASsC,EAAY,EAAZA,MACtCuI,EAAO7K,IAAYJ,EAAiBF,GAAK,eAAC,GAAD,IAAgB,eAAC,GAAD,IAC/D,OACI,uBAAK6I,UAAU,cAAf,UACI,uBAAKA,UAAU,cAAf,UACKjG,EAAOsI,GAAYC,KAExB,sBAAKtC,UAAU,cAAf,SACKoC,QAMXG,GAAe,SAAC,GAAuC,IAArC5B,EAAoC,EAApCA,WAAYtD,EAAwB,EAAxBA,KAAM8C,EAAkB,EAAlBA,MAAOqC,EAAW,EAAXA,KACvCC,EAAG,cAAUpF,EAAKtE,WAAf,cAA+B2J,SAAOrF,EAAKsF,QAA3C,oBAA8DtF,EAAKuF,OACtEC,EAAE,UAAMjM,EAAWyG,EAAKQ,WAAtB,cAAsCjH,EAAWyG,EAAKyF,UAAtD,cAAqElM,EAAWyG,EAAK1F,aACvF2K,EAAOjF,EAAK0F,cAAgB7L,EAAiBC,GAAK,eAAC,GAAD,IAAgB,eAAC,GAAD,IAExE,OACI,uBAAK6I,UAAS,wBAAmB8B,GAAYzE,EAAKsF,SAAlD,UACI,sBAAK3C,UAAU,sBAAf,SACKG,IAEL,uBAAKH,UAAU,qBAAf,kBACUsC,EADV,KACkBjF,EAAKG,aAEvB,sBAAKwC,UAAU,oBAAf,SACKyC,IAEL,sBAAKzC,UAAU,oBAAf,SACK6C,IAEK,UAATL,GAAoB,eAAC,GAAD,CAAmBnF,KAAMA,IACpC,SAATmF,GAAmB,eAAC,GAAD,CAAkBnF,KAAMA,EAAMsD,WAAYA,IAC9D,uBAAKX,UAAU,wBAAf,UACK3C,EAAK/E,OAAU,eAAC,GAAD,CAAY8J,MAAO,iDAA2B,SAArB/E,EAAK7F,YAAyB,WAAa,UAAW,wBAA5D,WAA4EuC,MAAOsD,EAAK/E,MAAO+J,UAAQ,EAAC5K,QAAS4F,EAAK5F,UACzJ,eAAC,GAAD,CAAY2K,MAAO,gDAAQ,wBAAR,UAAuBrI,MAAOsD,EAAKM,WAAY0E,UAAQ,EAAC5K,QAAS4F,EAAK5F,UACnE,cAArB4F,EAAK7F,aAA+B,eAAC,GAAD,CAAY4K,MAAO,+CAAO,wBAAP,UAAsBrI,MAAO0D,OAAOJ,EAAK/E,OAASmF,OAAOJ,EAAKM,YAAa0E,UAAQ,EAAC5K,QAAS4F,EAAK5F,UAC1J,eAAC,GAAD,CAAY2K,MAA2B,IAApB/E,EAAKtE,WAAmB,+CAAO,wBAAP,aAA0B,iDAAS,wBAAT,eAA6BgB,MAAK,UAAyB,KAApBsD,EAAKhE,WAAoBgE,EAAKjE,QAAUiE,EAAK2F,iBAAlD,YAA0F,KAApB3F,EAAKhE,WAAoB,SAAMgE,EAAKhE,iBAErN,uBAAK2G,UAAU,sBAAf,uBACe3C,EAAK4F,MAAQ5F,EAAK4F,MAAM7L,KAAO,qBAY1DmL,GAAajC,aAAe,CACxBkC,KAAM,SAGKD,UCtEAA,M,4DCSTW,I,OAAa,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,gBAAiBC,EAA6C,EAA7CA,eAAgBC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAClE,EAA0BC,mBAAS,eAAnC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgDF,mBAAS,IAAzD,mBAAOP,EAAP,KAAyBU,EAAzB,KACA,EAAoCH,mBAAS,IAA7C,mBAAOlK,EAAP,KAAmBsK,EAAnB,KACA,EAA4BJ,mBAAS,KAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA4BN,mBAAS,MAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAoCR,oBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAA8CZ,oBAAS,GAAvD,mBAAOa,EAAP,KAAwBC,EAAxB,KACA,EAAoDd,oBAAS,GAA7D,mBAAOe,EAAP,KAA2BC,EAA3B,KAEMC,EAAqB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBC,EAAoB1B,EACpB2B,EAActL,EACduL,EAAUhB,EACViB,EAAUf,EACVgB,EAAcd,EACde,EAAiBb,EACjBc,EAAmBZ,EACnBa,EAAsBX,EAE1B,OAAQG,EAAOrN,MACX,IAAK,mBACDsN,EAAoBD,EAAO1K,MAC3B2J,EAAoBe,EAAO1K,OAC3B,MACJ,IAAK,aACD4K,EAAcF,EAAO1K,MACrB4J,EAAcc,EAAO1K,OACrB,MACJ,IAAK,SACD6K,EAAUH,EAAO1K,MACjB8J,EAAUY,EAAO1K,OACjB,MACJ,IAAK,SACD8K,EAAUJ,EAAO1K,MACjBgK,EAAUU,EAAO1K,OACjB,MACJ,IAAK,aACD+K,EAAcL,EAAOS,QACrBjB,EAAca,GACd/M,QAAQC,IAAR,uBAA4B8M,IAC5B,MACJ,IAAK,gBACDC,EAAiBN,EAAOS,QACxBf,EAAiBY,GACjB,MACJ,IAAK,kBACDC,EAAmBP,EAAOS,QAC1Bb,EAAmBW,GACnB,MACJ,IAAK,qBACDC,EAAsBR,EAAOS,QAC7BX,EAAsBU,GACtB,MACJ,QACIlN,QAAQC,IAAI,kCAGpBD,QAAQC,IAAR,UAAeyM,EAAOrN,KAAtB,mBAAqCqN,EAAO1K,QAE5CoJ,EAAgB,CACZH,iBAAkB0B,EAClBrL,WAAYsL,EACZf,OAAQgB,EACRd,OAAQe,EACRb,WAAYc,EACZZ,cAAea,EACfX,gBAAiBY,EACjBV,mBAAoBW,KAc5B,OAAK3B,EAID,gBAAC6B,GAAA,EAAD,CAAMC,WAAS,EAACpF,UAAU,cAAcqF,eAAe,SAAvD,UACI,gBAACF,GAAA,EAAD,CAAMG,MAAI,EAACtF,UAAU,UAArB,UACI,eAACuF,GAAA,EAAD,CAAQC,gBAAgB,EAAOC,SAhBjB,SAACC,GACvBrC,EAAcqC,EAAMjB,OAAOS,YAcvB,gBAIA,gBAACC,GAAA,EAAD,CAAMG,MAAI,EAACtF,UAAU,UAArB,UACI,sBAAKA,UAAU,aAAf,sBAGA,sBAAKA,UAAU,aAAf,SACI,gBAAC2F,GAAA,EAAD,CACIvD,MAAM,UACNhL,KAAK,UACL4I,UAAU,mBACVjG,MAAOyJ,EACPoC,QAAQ,WACRH,SA1BO,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OAC1BhB,EAAQgB,EAAO1K,OACfqJ,EAAeqB,EAAO1K,QAkBV,UAQI,eAAC8L,GAAA,EAAD,CAA4B9L,MAAM,cAAlC,wBAAc,eACd,eAAC8L,GAAA,EAAD,CAAsB9L,MAAM,QAA5B,kBAAc,iBAI1B,gBAACoL,GAAA,EAAD,CAAMG,MAAI,EAACtF,UAAU,UAArB,UACI,sBAAKA,UAAU,eAAf,sBAGA,uBAAKA,UAAU,oBAAf,oBAEI,uBAAKA,UAAU,mBAAf,UACI,uBAAKA,UAAU,kBAAf,sBAEI,eAAC8F,GAAA,EAAD,CACI1O,KAAK,mBACL2C,MAAOiJ,EACP4C,QAAQ,WACRH,SAAUjB,EACVpE,KAAK,cAGb,uBAAKJ,UAAU,kBAAf,gBAEI,eAAC8F,GAAA,EAAD,CACI1O,KAAK,aACL2C,MAAOV,EACPuM,QAAQ,WACRH,SAAUjB,EACVpE,KAAK,oBAKrB,uBAAKJ,UAAU,oBAAf,uBAEI,uBAAKA,UAAU,mBAAf,UACI,uBAAKA,UAAU,kBAAf,gBAEI,eAAC8F,GAAA,EAAD,CACI1O,KAAK,SACL2C,MAAO6J,EACPgC,QAAQ,WACRH,SAAUjB,EACVpE,KAAK,cAGb,uBAAKJ,UAAU,kBAAf,gBAEI,eAAC8F,GAAA,EAAD,CACI1O,KAAK,SACL2C,MAAO+J,EACP8B,QAAQ,WACRH,SAAUjB,EACVpE,KAAK,oBAKrB,uBAAKJ,UAAU,aAAf,UACI,sBAAKA,UAAU,UAAf,6BACA,uBAAKA,UAAU,UAAf,UACI,uBAAKA,UAAU,SAAf,UACI,eAAC+F,GAAA,EAAD,CACI3O,KAAK,aACL2C,MAAOiK,EACPyB,SAAUjB,EACVxE,UAAU,kBAEd,sBAAKA,UAAU,QAAf,sBAEJ,uBAAKA,UAAU,SAAf,UACI,eAAC+F,GAAA,EAAD,CACI3O,KAAK,gBACL2C,MAAOmK,EACPuB,SAAUjB,EACVxE,UAAU,kBAEd,sBAAKA,UAAU,QAAf,yBAEJ,uBAAKA,UAAU,SAAf,UACI,eAAC+F,GAAA,EAAD,CACI3O,KAAK,kBACL2C,MAAOqK,EACPqB,SAAUjB,EACVxE,UAAU,kBAEd,sBAAKA,UAAU,QAAf,iCAIZ,uBAAKA,UAAU,uBAAf,UACI,wDACA,eAAC+F,GAAA,EAAD,CACI3O,KAAK,qBACL2C,MAAOuK,EACPmB,SAAUjB,aArHnB,OAoIftB,GAAW5C,aAAe,CACtB6C,gBAAiB,aACjBC,eAAgB,aAChBC,cAAe,aACfC,SAAS,GAGEJ,U,yCCzNTnB,I,OAAY,kBAAO,sBAAKC,IAAI,eAAehC,UAAU,aAAaiC,IAAI,YACtEC,GAAc,kBAAO,sBAAKF,IAAI,kBAAkBhC,UAAU,aAAaiC,IAAI,WAI3E+D,GAAW,CAAC,CAAE5D,MAAO,YAAarI,MAAO1C,EAAiBF,IAAM,CAAEiL,MAAO,cAAerI,MAAO1C,EAAkBF,KAIjHc,GAAU,SAACgO,GACb,OAAOA,EAAMzN,KAAI,SAAA8M,GACb,IAAMlD,EAA0B,kBAAVkD,EAAqBA,EAAOA,EAAKlD,MACjDrI,EAA0B,kBAAVuL,EAAqBA,EAAOA,EAAKvL,MACvD,OAAO,eAAC8L,GAAA,EAAD,CAAsB9L,MAAOA,EAA7B,SAAqCqI,GAAtBrI,OAIxBmM,GAAqBjO,GAdN,CAAC,CAAEmK,MAAO,OAAQrI,MAAO,QAAU,CAAEqI,MAAO,OAAQrI,MAAO,aAAe,CAAEqI,MAAO,SAAUrI,MAAO,YAgBnHoM,GAAiBlO,GAAQ+N,IAEzBI,GAAoBnO,GAAQ,CAdN,CAAEmK,MAAO,iBAAkBrI,MAAO,QAc7B,mBXOH,CAAC,SAAU,YAAa,WAAY,cWL5DsM,GAAmB,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,mBAAoBC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,SACxE,GADiG,EAAfC,SAC5CnD,mBAAS,KAA/C,mBAAOoD,EAAP,KAAoBC,EAApB,KACA,EAAgDrD,mBAAS,OAAzD,mBAAOsD,EAAP,KAAyBC,EAAzB,KACA,EAAsCvD,mBAAS,aAA/C,mBAAO/L,EAAP,KAAoBuP,EAApB,KACA,EAA8BxD,mBAASlM,EAAiBF,IAAxD,mBAAOM,EAAP,KAAgBuP,EAAhB,KACA,EAAsCzD,mBAASrM,EAAiBC,IAAhE,mBAAO4L,EAAP,KAAoBkE,EAApB,KACA,EAA4B1D,mBAAS,IAArC,mBAAO2D,EAAP,KAAeC,EAAf,KACA,EAAoD5D,mBAAS,IAA7D,mBAAO6D,EAAP,KAA2BC,EAA3B,KACA,EAA0C9D,mBAAS,IAAnD,mBAAO3L,EAAP,KAAsB0P,EAAtB,KAEAC,qBAAU,WAEN,IAAMC,EAAQpI,EACTlD,OACA1D,KAAI,SAAApB,GAAI,OAAK,eAACyO,GAAA,EAAD,CAAqB9L,MAAO3C,EAA5B,SAAmC6G,EAAU7G,IAA9BA,MAE3BqQ,EAAWpI,EACZnD,OACA1D,KAAI,SAAApB,GAAI,OAAK,eAACyO,GAAA,EAAD,CAAqB9L,MAAO3C,EAA5B,SAAmC6G,EAAU7G,IAA9BA,MAE3BsQ,EAAQpI,EACTpD,OACA1D,KAAI,SAAApB,GAAI,OAAK,eAACyO,GAAA,EAAD,CAAqB9L,MAAO3C,EAA5B,SAAmC6G,EAAU7G,IAA9BA,MAE3BuQ,EAAUpI,EACXrD,OACA1D,KAAI,SAAApB,GAAI,OAAK,eAACyO,GAAA,EAAD,CAAqB9L,MAAO3C,EAA5B,SAAmC6G,EAAU7G,IAA9BA,MAE3Ba,EAAO,CACR,eAAC2P,GAAA,EAAD,2BAAmB,UADX,mBAENJ,GAFM,CAGR,eAACI,GAAA,EAAD,8BAAmB,aAHX,YAINH,GAJM,CAKR,eAACG,GAAA,EAAD,2BAAmB,UALX,YAMNF,GANM,CAOR,eAACE,GAAA,EAAD,6BAAmB,YAPX,YAQND,IAGPN,EAAsBpP,KACvB,IAEHsP,qBAAU,WACFjB,GACAM,EAAeN,KAEpB,CAACA,IAGJ,IAYMuB,EAAmB,SAAC,GAAgB,IAAdpD,EAAa,EAAbA,OACxB+B,GAAgBA,EAAa/B,EAAO1K,MAAOgJ,IAsDzC+E,EAAYvB,GAAgBI,EAElC,OACI,gBAACxB,GAAA,EAAD,CAAMC,WAAS,EAACpF,UAAU,qBAAqBqF,eAAe,SAAS0C,QAAS,EAAhF,UACI,gBAAC5C,GAAA,EAAD,CAAMG,MAAI,EAAV,+BAEI,eAACK,GAAA,EAAD,CACIvD,MAAM,eACNhL,KAAK,eACL4I,UAAU,wBACVjG,MAAOvC,EACPoO,QAAQ,WACRH,SA/EgB,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OAC/BsC,EAAetC,EAAO1K,QAwEd,SAQKmM,QAGQ,WAAhB1O,GACG,eAAC2N,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,eAACQ,GAAA,EAAD,CACI9F,UAAU,0BACVgI,YAAY,iBACZ5Q,KAAK,iBACL2C,MAAOnC,EACPgO,QAAQ,WACRH,SA3Cc,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OACjC6C,EAAiB7C,EAAO1K,YA+CH,WAAhBvC,GACG,gBAAC2N,GAAA,EAAD,CAAMG,MAAI,EAAV,mBAEI,eAACK,GAAA,EAAD,CACIvO,KAAK,UACL4I,UAAU,mBACVjG,MAAOtC,EACPmO,QAAQ,WACRH,SAhFQ,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OAC3BuC,EAAWvC,EAAO1K,QA0EN,SAOKoM,KATT,aAcJ,gBAAChB,GAAA,EAAD,CAAMG,MAAI,EAACtF,UAAU,iBAArB,oCAEI,gBAAC2F,GAAA,EAAD,CACI3F,UAAU,wBACV5I,KAAK,eACL2C,MAAOgJ,EACP6C,QAAQ,WACRH,SAxFgB,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OAC/BwC,EAAexC,EAAO1K,OACtBmN,GAAUV,GAAgBA,EAAaU,EAAQzC,EAAO1K,QAiF9C,UAOI,eAAC8L,GAAA,EAAD,CAAU9L,MAAO7C,EAAiBC,GAAlC,SACI,eAAC,GAAD,MAEJ,eAAC0O,GAAA,EAAD,CAAU9L,MAAO7C,EAAmBC,GAApC,SACI,eAAC,GAAD,SAbZ,IAiBI,eAAC2O,GAAA,EAAD,CACI9F,UAAU,mBACVgI,YAAY,UACZ5Q,KAAK,UACL2C,MAAOmN,EACPtB,QAAQ,WACRH,SAjIW,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OAC1B0C,EAAU1C,EAAO1K,QAiILkO,OAAQJ,EACRK,WAxHU,SAACxC,GACL,UAAdA,EAAMyC,KACNN,EAAiBnC,SAyHjB,gBAACP,GAAA,EAAD,CAAMG,MAAI,EAAV,wBAEI,eAACK,GAAA,EAAD,CACIvD,MAAM,uBACNhL,KAAK,iBACL4I,UAAU,0BACVjG,MAAO4M,EACPf,QAAQ,WACRH,SAxGgB,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OAC/BmC,EAAenC,EAAO1K,QAiGd,SAQKqN,OAGT,gBAACjC,GAAA,EAAD,CAAMG,MAAI,EAAV,gBAEI,eAACK,GAAA,EAAD,CACIvD,MAAM,4BACNhL,KAAK,sBACL4I,UAAU,+BACVjG,MAAO8M,EACPjB,QAAQ,WACRH,SA3HqB,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OACpCqC,EAAoBrC,EAAO1K,QAoHnB,SAQKqM,QAGT,eAACjB,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,eAAC8C,GAAA,EAAD,CAAQxC,QAAQ,YAAYyC,QAjHnB,WAUjB5B,GAAYA,EATW,CACnBjP,cACA0P,SACAzP,UACAsL,cACA4D,cACAE,iBAAuC,QAArBA,EAA6B,GAAKA,EACpDjP,mBAyGuD0Q,UAAWR,EAA9D,SACI,eAAC,KAAD,YAgBpBzB,GAAiB/F,aAAe,CAC5BgG,mBAAoB,GACpBC,cAAc,EACdG,SAAU,cAGCL,UCrRAkC,GCIU,SAAC,GAAkC,IAAhC5H,EAA+B,EAA/BA,WAAY9H,EAAmB,EAAnBA,OAAQ2J,EAAW,EAAXA,KACtCgG,EAAc,SAACnL,GAAD,iBAAuC,IAAzBA,EAAKoL,mBAAyBC,QAAQ,GAApD,kBACpB,OAAO7P,EAAON,OACVM,EAAOL,KAAI,SAAA6E,GAAI,OAAI,eAAC,GAAD,CAA4BA,KAAMA,EAAM8C,MAAOqI,EAAYnL,GAAOmF,KAAMA,EAAM7B,WAAYA,GAAvEtD,EAAKlG,OAC3C,MCUFwR,I,OAAiB,CACnB,sCACA,4CACA,yDACA,4DACA,8CAGEC,GAAW,SAAC,GAAoB,IAAlBvL,EAAiB,EAAjBA,KAAMmF,EAAW,EAAXA,KACtB,OAAOnF,EACF,sBAAK2C,UAAU,YAAf,SACG,eAAC,GAAD,CAAc3C,KAAMA,EAAM8C,MAAM,YAAYqC,KAAMA,MAEtD,MAGFqG,GAAiB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC5CC,EAAgBF,EAAUC,EAAUF,IAAWD,EAAY,kBAAoB,KACrF,OAAOI,EACH,eAACC,EAAA,EAAD,CAAOvD,QAAQ,WAAWwD,SAAS,UAAUpJ,UAAU,kBAAvD,SACKkJ,IAEL,MAqJOG,GAlJc,WACzB,MAAkC9F,oBAAS,GAA3C,mBAAO+F,EAAP,KAAkBC,EAAlB,KACA,EAAkChG,oBAAS,GAA3C,mBAAOiG,EAAP,KAAkBC,EAAlB,KACA,EAA4ClG,mBAAS,IAArD,mBAAOmG,EAAP,KAAuBC,EAAvB,KACA,EAAoCpG,mBAAS,UAA7C,mBAAOqG,EAAP,KAAmBC,EAAnB,KACA,EAA4BtG,mBAAS,eAArC,mBAAOC,EAAP,KAAesG,EAAf,KACA,EAA8BvG,mBAAS,IAAvC,mBAAOwG,EAAP,KAAgBC,EAAhB,KACA,EAA0CzG,mBAAS,IAAnD,mBAAO3F,EAAP,KAAsBqM,EAAtB,KACA,EAAgC1G,qBAAhC,mBAAO2G,EAAP,KAAiBC,EAAjB,KACA,EAA4B5G,mBAAS,IAArC,mBAAO1K,EAAP,KAAeuR,EAAf,KACA,EAAwB7G,mBAAS,QAAjC,mBAAOf,GAAP,KAAa6H,GAAb,KACA,GAAoC9G,qBAApC,qBAAO5C,GAAP,MAAmB2J,GAAnB,MAEMC,GAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAEjDI,GAA0B,WAC5B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWrC,GAAepQ,QAC9DoR,EAAkBhB,GAAekC,KAS/BI,GAAgB,iDAAG,WAAOC,EAAYnI,GAAnB,wFACfmE,EAASnE,IAAgB7L,EAAiBC,GAAK+T,EAAtC,UAAsD,gBAAgBnU,MAAM,EAAG,GAAKmU,EAAW3S,SAA/F,OAAyG2S,KACxGhB,GAAYA,EAAS/S,KAAO+P,EAFvB,wBAIjBkD,EAAU,IACVD,IACAF,EAAiB,IACjBN,EAAkB,IAPD,SAUOvM,EAAY8J,GAVnB,QAUXiE,EAVW,SAabhB,EAAYgB,GAGZlB,EAAiBkB,EAAUvN,iBAE3B+L,EAAkB,mBAClBJ,GAAa,IAnBA,4CAAH,wDA8BhB6B,GAAY,iDAAG,WAAMC,GAAN,uGACjBjB,EAAU,IACVb,GAAa,GACbqB,KAEIU,EAAY,GACVC,EAAW,GACbC,EAAS,EACTC,GAAa,EAGXzQ,EAAUyB,EAAyBzF,EAAUkT,EAASrM,WAAYwN,EAAe1E,aACvF2D,GAAc,CAAEzM,UAAW7C,EAASrD,WAAY,CAAC0T,EAAexE,oBAZ/C,UAcT4E,EAdS,kCAgBgBlU,EAAqB8T,EAAe7T,YAAa6T,EAAe5T,QAASuD,EAASqQ,EAAexE,iBAAkBwE,EAAezT,cAAe2T,EAAUC,GAhB3K,QAoBb,IAJME,EAhBO,OAiBPC,EAAerO,2CAAiCoO,EAAe7S,QAG5DiB,EAAI,EAAGA,EAAI6R,EAAapT,OAAQuB,IAC/B8R,EAAgBD,EAAa7R,GACnCyD,EAASqO,GACTA,EAAcpO,UAAwC,KAA5BoO,EAAczU,GAAGoB,OAAgBkF,OAAOmO,EAAczU,GAAGJ,MAAM,IAAI2G,WAAakO,EAAczU,GACxHyU,EAAcpU,YAAc6T,EAAe7T,YAC3CoU,EAAcjO,WAAaxE,EAAmByS,GAC9CA,EAActT,OtBzHPuT,EsByHuBD,EAActT,OtBrHzCmF,OAAOoO,GACC,KAHd,KsBwHSC,EAAmBxP,EAA4C4N,EAASnM,eAAgB6N,EAAc7N,eAAgBsN,EAAe1E,aAEvI0E,EAAexE,kBACTkF,EAAwBzP,EAA4C4N,EAAStJ,gBAAiBgL,EAAchL,gBAAiByK,EAAexE,kBAClJ+E,EAAcnD,kBAAoBqD,GAAoBC,EAAwBD,EAAiB/R,MAAQgS,EAAsBhS,MAAQ,GAErI6R,EAAcnD,kBAAoBqD,EAAmBA,EAAiB/R,MAAQ,EAjCzE,OAsCPiS,EAAiBL,EAAatT,QAAO,SAAAgF,GAAI,OAAIA,EAAKoL,kBAAoB,KAE5E1Q,QAAQC,IAAR,UAAesT,EAAU/S,OAAzB,qBACAR,QAAQC,IAAR,iBAAsBgU,EAAezT,OAArC,gBAGA+S,EAAYW,IAAQX,EAAWU,EAAgB,MAE/CjU,QAAQC,IAAR,cAAmBsT,EAAU/S,OAA7B,kBAGA6R,EAAUkB,GACVV,KAEAY,GAAUD,EACVE,EAA8C,IAAjCC,EAAe7S,OAAON,OArDtB,UAuDPgS,GAAM,KAvDC,+BA6DjBhB,GAAa,GACbE,GAAa,GA9DI,kCtB/FF,IAAAoC,IsB+FE,OAAH,sDA2EZK,Gf3JyB,SAACrT,EAAQkR,EAASvG,EAAQ5F,GACzD,IAAIsO,EAAerT,EAGnB,IAAKA,EAAON,OAAQ,OAAO2T,EAE3B,IAAMvF,EAAc/P,EAAWgH,GA6B/B,OA1BAsO,EAAeA,EAAa7T,QAAO,SAAAgF,GAC/B,IAAM8O,GAAoBpC,EAAQ/G,kBAAoBvF,OAAOJ,EAAK2F,mBAAqBvF,OAAOsM,EAAQ/G,kBAChG3J,GAAc0Q,EAAQ1Q,YAAcoE,OAAOJ,EAAKhE,aAAeoE,OAAOsM,EAAQ1Q,YAC9EuK,GAAUmG,EAAQnG,QAA6B,KAAnBmG,EAAQnG,QAAiBnG,OAAOJ,EAAKtE,aAAe0E,OAAOsM,EAAQnG,QAC/FE,GAAUiG,EAAQjG,QAA6B,KAAnBiG,EAAQjG,QAAiBrG,OAAOJ,EAAKtE,aAAe0E,OAAOsM,EAAQjG,QAC/FjG,EAAYkM,EAAQzF,oBAAsBjH,EAAKQ,YAAc8I,EAC7D3C,GAAc+F,EAAQ/F,YAAc3G,EAAKU,eAAe,KAAOV,EAAKU,eAAe,GACnFmG,GAAiB6F,EAAQ7F,eAAiB7G,EAAKW,cAAc,KAAOX,EAAKW,cAAc,GACvFoG,GAAmB2F,EAAQ3F,iBAAmB/G,EAAKuD,gBAAgB,KAAOvD,EAAKuD,gBAAgB,GAErG,OAAOvH,GAAc8S,GAAoBvI,GAAUE,GAAUjG,GAAamG,GAAcE,GAAiBE,KAInF,gBAAXZ,EACX0I,EAAahQ,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEsM,kBAAoBrM,EAAEqM,mBAAqB,EAAItM,EAAEsM,kBAAoBrM,EAAEqM,kBAAoB,EAAI,KAC7HyD,EAAahQ,MAAK,SAACC,EAAGC,GAClB,GAAe,UAAXoH,EAAoB,CACpB,IAAM4I,EAASjQ,EAAE7D,OAA2B,SAAlB6D,EAAE3E,YAAyB,EAAI2E,EAAEwB,YACrD0O,EAASjQ,EAAE9D,OAA2B,SAAlB8D,EAAE5E,YAAyB,EAAI4E,EAAEuB,YAC3D,OAAOyO,EAASC,EAAS,EAAID,EAASC,GAAU,EAAI,EAGxD,OAAO,Ke2HMC,CAAoBzT,EAAQkR,EAASvG,EAAQ5F,GAElE,OACI,gBAAC2O,EAAA,EAAD,CAAWC,SAAS,KAApB,UACI,eAAC,GAAD,CAAkBlG,mBAAoB1I,EAAe2I,eAAgB2D,EAAU1D,aAAcyE,GAAkBvE,SAbxF,WAC3BmD,EAA6B,WAAfD,EAA0B,WAAa,WAYgGnD,SAAU2E,KAC3J,eAAC,GAAD,CAAYjI,gBAnHQ,SAAA4G,GACxBC,EAAWD,IAkH2C3G,eArF/B,SAAArJ,GACvB+P,EAAU/P,IAoFgFsJ,cATpE,SAAC6B,GACvBmF,GAAQnF,EAAU,QAAU,SAQgG5B,UAAW4G,IACnI,eAAC,GAAD,CAAgBpB,UAAWjQ,EAAON,OAAQyQ,QAASM,EAAWP,OAAQS,EAAWP,QAASS,IAC1F,uBAAK1J,UAAU,YAAf,UACI,eAAC,GAAD,CAAU3C,KAAM6M,EAAU1H,KAAMA,KAChC,eAAC,GAAD,CAAkB3J,OAAQqT,GAAc1J,KAAMA,GAAM7B,WAAYA,YCvLjE0I,M,OCeAoD,OAZf,WACE,OACE,uBAAKzM,UAAU,MAAf,UACE,yBAAQA,UAAU,eAElB,uBAAMA,UAAU,WAAhB,SACE,eAAC,GAAD,UCEO0M,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.37fd4153.chunk.js","sourcesContent":["export const PascalCase = word => `${word[0].toUpperCase()}${word.slice(1)}`\n\nexport const CamelCase = word => `${word[0].toLowerCase()}${word.slice(1)}`\n\n\nexport const ToPrice = rawPrice => {\n    if(!rawPrice){\n      return null\n    }\n    const nPrice = Number(rawPrice)\n    const price = nPrice / 1000000000000000000\n    return price\n}\n","export const REALMS = {\n    serendale: {\n        id: 'SER',\n        name: 'Serendale'\n    }, \n    crystalvale: {\n        id: 'CRY',\n        name: 'Crystalvale'\n    }\n}\n\nexport const NETWORKS = {\n    harmony: {\n        id: 'hmy',\n        name: 'Harmony'\n    },\n    dfkchain: {\n        id: 'dfk',\n        name: 'DFK Chain'\n    }\n}\n","// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\nimport { PascalCase } from '../helpers/format.helpers'\nimport { NETWORKS } from '../constants/realms'\n\n// const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\nconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n/*\n * auctionType: sale | assisting\n */\nconst getHeroDataByAuction = async (auctionType = 'sale', network = NETWORKS.harmony.id, mainClasses = [], profession = '', walletAddress = '', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  let filter = ''\n  let price = ''\n  \n  if (auctionType === 'wallet') {\n    filter = `owner: \"${walletAddress}\"`\n  }\n  else {\n    filter = `${auctionType}Price_not: null\n                  network: \"${network}\"`\n    price = `price: ${auctionType}Price`\n  }\n\n  // If specified, add main class to filter\n  if (mainClasses.length) {\n    filter = `${filter}\n    mainClass_in: [${mainClasses.map(name => `\"${PascalCase(name)}\"`)}]`\n  }\n\n  // If specified, add profession to filter\n  if (profession) {\n    filter = `${filter}\n    profession: \"${profession}\"`\n  }\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    heroes(\n      first: ${take}\n      skip: ${skip}\n      where:{\n        ${filter}\n      }\n    )\n    {\n      id\n      owner{\n        name\n      }\n      originRealm\n      network\n      firstName\n      lastName\n      rarity\n      gender\n      generation\n      mainClass\n      subClass\n      level\n      profession\n      fishing\n      foraging\n      gardening\n      mining\n\n      stamina\n\n      summonsRemaining\n      maxSummons\n      summons\n\n      active1\n      active2\n      passive1\n      passive2\n      statBoost1\n      statBoost2\n      statsUnknown1\n      statsUnknown2\n      element\n\n      strength\n      agility\n      endurance\n      wisdom\n      dexterity\n      vitality\n      intelligence\n      luck\n\n      ${price}\n      status\n      hpFullAt\n      mpFullAt\n      statGenesRaw: statGenes\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.heroes.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\nexport { getHeroDataByAuction }\n","const SummonsCosts = [\n    { generation: 0, baseCost: 6, increment: 2, maxCost: 30 },\n    { generation: 1, baseCost: 16, increment: 2, maxCost: 34 },\n    { generation: 2, baseCost: 26, increment: 2, maxCost: 42 },\n    { generation: 3, baseCost: 36, increment: 2, maxCost: 50 },\n    { generation: 4, baseCost: 46, increment: 2, maxCost: 58 },\n    { generation: 5, baseCost: 56, increment: 2, maxCost: 66 },\n    { generation: 6, baseCost: 66, increment: 2, maxCost: 74 },\n    { generation: 7, baseCost: 76, increment: 2, maxCost: 82 },\n    { generation: 8, baseCost: 86, increment: 2, maxCost: 90 },\n    { generation: 9, baseCost: 96, increment: 2, maxCost: 98 },\n    { generation: 10, baseCost: 106, increment: 2, maxCost: 106 }\n]\n\nexport const calcuateSummonCost = ({ generation, summons, maxSummons }) => {\n    if (generation < 0 || generation > 10) return '?'\n    \n    const tier = SummonsCosts[generation]\n\n    // Gen0s have price cap\n    if (summons >= maxSummons) return tier.maxCost\n\n    return tier.baseCost + (summons * tier.increment)\n}","/**\n * @fileoverview Hero Classes and tiers.\n */\n\nexport const classMutationPairings = [\n  { 'classes': ['warrior', 'knight'], mutation: 'paladin' },\n  { 'classes': ['thief', 'archer'], mutation: 'darkKnight' },\n  { 'classes': ['priest', 'wizard'], mutation: 'summoner' },\n  { 'classes': ['monk', 'pirate'], mutation: 'ninja' },\n  { 'classes': ['seer', 'berserker'], mutation: 'shapeshifter' },\n  { 'classes': ['paladin', 'darkKnight'], mutation: 'dragoon' },\n  { 'classes': ['summoner', 'ninja'], mutation: 'sage' },\n  { 'classes': ['dragoon', 'sage'], mutation: 'dreadKnight' }\n]\n","import { getHeroTier } from '@thanpolas/degenking/src/heroes-helpers/summon-utils.ent'\nimport { classMutationPairings } from '../constants/hero-classes'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\n\nconst getPotentialDominantGenes = heroGenes => {\n    return condenseGenes(heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] })))\n}\n\n\n// If the same gene appears in multiple gene slots, combine those in to a single gene/value pair.\n// value equals the sum of the multiple slots\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1Genes, hero2Genes) => {\n    const mutations = []\n\n    for (let i = 0; i < hero1Genes.length; i++) {\n        for (let j = 0; j < hero2Genes.length; j++) {\n            // 2. Mutable dominant gene\n            const mutation = getMutationProbability(hero1Genes[i], hero2Genes[j])\n\n            // 3. Adjust dominant gene, if mutation is possible\n            if (mutation) {\n                mutations.push(mutation)\n                hero1Genes[i].value -= mutation.value\n                hero2Genes[j].value -= mutation.value\n                break\n            }\n        }\n    }\n\n    return mutations\n}\n\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(hero1DominantGene.name, hero2DominantGene.name)\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\n\nconst lookupMutation = (gene1, gene2) => classMutationPairings.find(pair => {\n    const m = gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2)\n    return m\n})\n\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const getProbabilityThatHeroesCanSummonTargetGene = (hero1Genes, hero2Genes, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1Genes, hero2Genes)\n    return classProbabilities.find(_class => _class.name.toLowerCase() === targetClass.toLowerCase())\n}\n\nexport const getPossibleSummonClasses = (parentClass, summonedClass, include) => {\n    const classes = [summonedClass]\n\n    // If the parent and the child are the same class, 2nd parent should be same as 1st parent for highest probability\n    if (parentClass === summonedClass) return classes\n\n    // If the parentClass could mutate to the summonedClass, add the complimentary parent class\n    const mutationPairing = classMutationPairings.find(pair => pair.mutation === summonedClass)\n\n    if (mutationPairing) {\n        const parentIsMutatable = mutationPairing.classes.find(c => c === parentClass)\n        let assistingClass = mutationPairing.classes.find(c => c !== parentClass)\n\n        if (parentIsMutatable)\n            classes.push(assistingClass)\n    }\n\n    return classes\n}\n\n// Retrieves the mutation class for the specified base class\nexport const getMutationClass = heroClass => {\n    return classMutationPairings.find(pair => pair.classes.includes(heroClass)).mutation\n}\n","// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\nexport const getHeroById = async (id) => {\n    // Then define our endpoint URL\n    //const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\n\tconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n    // Create a new GQL Client\n    const graphQLClient = new GraphQLClient(apiv6_endpoint, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n\n    // Define our query, this will return data for the first 1000 heroes\n    // 1000 is the max query size for GQL\n    const query = gql`\n\t{\n\t\theroes( \n\t\t\torderBy: numberId\n\t\t\torderDirection: asc\n\t\t\twhere: \n\t\t\t{\n\t\t\t\tid: ${id}\n\t\t   \t}\n\t\t)\n\t\t{\n\t\t\tid\n\t\t\towner{\n\t\t\t  name\n\t\t\t}\n\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\toriginRealm\n\t\t\tnetwork\n\t\t\trarity\n\t\t\tgender\n\t\t\tgeneration\n\t\t\tmainClass\n\t\t\tsubClass\n\t\t\tlevel\n\t\t\tprofession\n\t\t\tfishing\n\t\t\tforaging\n\t\t\tgardening\n\t\t\tmining\n\t\t\n\t\t\tstamina\n\t\t\n\t\t\tsummonsRemaining\n\t\t\tmaxSummons\n\t\t\tsummons\n\t\t\t\n\t\t\tactive1\n\t\t\tactive2\n\t\t\tpassive1\n\t\t\tpassive2\n\t\t\tstatBoost1\n\t\t\tstatBoost2\n\t\t\tstatsUnknown1\n\t\t\tstatsUnknown2\n\t\t\telement\n\t\t\n\t\t\tstrength\n\t\t\tagility\n\t\t\tendurance\n\t\t\twisdom\n\t\t\tdexterity\n\t\t\tvitality\n\t\t\tintelligence\n\t\t\tluck\n\t  \n\t\t\tstatus\n\t\t\thpFullAt\n\t\t\tmpFullAt\n\t\t\tstatGenesRaw: statGenes\n\t\t}\n\t}`\n\n    let data = await graphQLClient.request(query)\n    return data\n}\n","import { decodeRecessiveGenesAndNormalize } from '@thanpolas/degenking/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroById } from '../../services/hero.service'\nimport { calcuateSummonCost } from '../../helpers/prices.helper'\nimport { getMutationClass } from '../../helpers/genes.helpers'\nimport { CamelCase, PascalCase } from '../../helpers/format.helpers'\n\nexport const getMainHero = async id => {\n    const data = await getHeroById(id)\n\n    if (!data.heroes.length) return null\n\n    const hero = decodeRecessiveGenesAndNormalize(data.heroes)[0]\n    sheerFix(hero)\n    hero.displayId = hero.id.length === 13 ? Number(hero.id.slice(1)).toString() : hero.id\n    hero.summonCost = calcuateSummonCost(hero)\n    hero.mutationClass = getMutationClass(CamelCase(hero.mainClass))\n\n    return hero\n}\n\nexport const sortAndFilterHeroes = (heroes, filters, sortBy, mutationClass) => {\n    let sortedHeroes = heroes\n\n    // Skip filtering and sorting if there are no records\n    if (!heroes.length) return sortedHeroes\n\n    const summonClass = PascalCase(mutationClass)\n\n    // Filter based on filter criteria\n    sortedHeroes = sortedHeroes.filter(hero => {\n        const remainingSummons = !filters.summonsRemaining || Number(hero.summonsRemaining) >= Number(filters.summonsRemaining)\n        const maxSummons = !filters.maxSummons || Number(hero.maxSummons) >= Number(filters.maxSummons)\n        const minGen = !filters.minGen || filters.minGen === '' || Number(hero.generation) >= Number(filters.minGen)\n        const maxGen = !filters.maxGen || filters.maxGen === '' || Number(hero.generation) <= Number(filters.maxGen)\n        const mainClass = filters.includeSummonClass || hero.mainClass !== summonClass\n        const classMatch = !filters.classMatch || hero.mainClassGenes[0] === hero.mainClassGenes[1]\n        const subclassMatch = !filters.subclassMatch || hero.subClassGenes[0] === hero.subClassGenes[1]\n        const professionMatch = !filters.professionMatch || hero.professionGenes[0] === hero.professionGenes[1]\n\n        return maxSummons && remainingSummons && minGen && maxGen && mainClass && classMatch && subclassMatch && professionMatch\n    })\n\n    // Heroes are sorted by Probability by default, only sort here if a different sorting is requested\n    sortedHeroes = sortBy === 'probability' ?\n        sortedHeroes.sort((a, b) => a.targetProbability > b.targetProbability ? -1 : a.targetProbability < b.targetProbability ? 1 : 0) :\n        sortedHeroes.sort((a, b) => {\n            if (sortBy === 'price') {\n                const aPrice = a.price + (a.auctionType === 'sale' ? 0 : a.summonCost)\n                const bPrice = b.price + (b.auctionType === 'sale' ? 0 : b.summonCost)\n                return aPrice > bPrice ? 1 : aPrice < bPrice ? -1 : 0\n            }\n\n            return 0\n        })\n\n    return sortedHeroes\n}\n\nexport const sheerFix = (hero) => {\n    const fix = (genes) => {\n        for (let i = 0; i < genes.length; i++) {\n            if (genes[i] === 'sheer') genes[i] = 'seer'\n        }\n    }\n\n    fix(hero.mainClassGenes)\n    fix(hero.subClassGenes)\n}","/**\n * @fileoverview Hero Classes and tiers.\n */\n\n export const CLASS_REV = {\n    warrior: 'Warrior',\n    knight: 'Knight',\n    thief: 'Thief',\n    archer: 'Archer',\n    priest: 'Priest',\n    wizard: 'Wizard',\n    monk: 'Monk',\n    pirate: 'Pirate',\n    seer: 'Seer',\n    berserker: 'Berserker',\n    paladin: 'Paladin',\n    darkKnight: 'DarkKnight',\n    summoner: 'Summoner',\n    ninja: 'Ninja',\n    shapeshifter: 'Shapeshifter',\n    dragoon: 'Dragoon',\n    sage: 'Sage',\n    dreadKnight: 'DreadKnight',\n}\n\nexport const basicClasses = [\n    'warrior',\n    'knight',\n    'thief',\n    'archer',\n    'priest',\n    'wizard',\n    'monk',\n    'pirate',\n    'seer',\n    'berserker'\n  ]\n\nexport const advancedClasses = ['paladin', 'darkKnight', 'summoner', 'ninja', 'shapeshifter']\n\nexport const eliteClasses = ['dragoon', 'sage']\n\nexport const exaltedClasses = ['dreadKnight']\n\nexport const PROFESSIONS_AR = ['mining', 'gardening', 'foraging', 'fishing']\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '../../constants/degenking'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, highlighted, title, type }) => {\n    return <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className={`value${highlighted && highlighted.includes(gene) ? ' highlighted' : ''}`}>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    highlighted: PropTypes.array,\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst StatGene = ({ boldIfNot, value }) => {\n    let className = 'value'\n\n    if (boldIfNot && !value.toString().toLowerCase().includes(boldIfNot)) {\n         className += ' highlighted'\n    }\n\n    return (\n        <div className='gene'>\n            <div className={className}>{value}</div>\n        </div>\n    )\n}\n\nconst HeroSnapshotStatGenes = ({ className, genes }) => {\n    // const statsUnknown1 = genes['statsUnknown1'] ? genes['statsUnknown1'] : genes.statGenes['statsUnknown1']\n    // const statsUnknown2 = genes['statsUnknown2'] ? genes['statsUnknown2'] : genes.statGenes['statsUnknown2']\n    // const element = genes['element'] ? genes['element'] : genes.statGenes['element']\n\n    return (\n        <>\n            <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Active</div>\n                <StatGene value={genes['active1']} boldIfNot='basic' />\n                <StatGene value={genes['active2']} boldIfNot='basic' />\n            </div>\n            <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Passive</div>\n                <StatGene value={genes['passive1']} boldIfNot='basic' />\n                <StatGene value={genes['passive2']} boldIfNot='basic' />\n            </div>\n            {/* <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Unknown</div>\n                <StatGene value={statsUnknown1} />\n                <StatGene value={statsUnknown2} />\n            </div>\n            <div className={`hero-snapshot-genes${className ? ` ${className}` : ''}`}>\n                <div className='title'>Element</div>\n                <StatGene value={element} />\n            </div> */}\n        </>\n    )\n}\n\nHeroSnapshotStatGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.object\n}\n\nHeroSnapshotStatGenes.defaultProps = {\n}\n\nexport default HeroSnapshotStatGenes\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroSnapshotStatGenes from './HeroSnapshotStatGenes'\nimport { GENE_TYPES } from '../../constants/hero-genes'\n\nconst HeroSnapshotBack = ({ highlights, hero }) => {\n    return (\n        <>\n            <div className='hero-snapshot-genes-section'>\n                <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' highlighted={highlights.mainClass} />\n                <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n                <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={GENE_TYPES.Professions} highlighted={highlights.profession} />\n            </div>\n            <div className='hero-snapshot-stat-genes-section'>\n                <HeroSnapshotStatGenes genes={hero} />\n            </div>\n        </>\n    )\n}\n\nHeroSnapshotBack.propTypes = {\n    highlights: PropTypes.object\n}\n\nHeroSnapshotBack.defaultProps = {\n    highlights: {}\n}\n\nexport default HeroSnapshotBack\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroStat from '../HeroCard/HeroStat'\n\nconst HeroSnapshotFront = ({ hero }) => {\n    return (\n        <>\n            <HeroStatSection title='Stats'>\n                <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n                <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n                <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n                <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n                <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n                <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n                <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n                <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n            </HeroStatSection>\n            <HeroStatSection className='profession-stat-section' title='Professions'>\n                <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n                <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n                <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n                <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n            </HeroStatSection>\n        </>\n    )\n}\n\nexport default HeroSnapshotFront","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Rarity } from '@thanpolas/degenking/src/constants/constants.const'\nimport { NETWORKS, REALMS } from '../../constants/realms'\nimport { PascalCase } from '../../helpers/format.helpers'\nimport HeroSnapshotBack from './HeroSnapshotBack'\nimport HeroSnapshotFront from './HeroSnapshotFront'\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\nconst JewelIcon = () => (<img src='/jewel50.png' className='jewel-icon' alt='Jewel' />)\nconst CrystalIcon = () => (<img src='/crystal100.png' className='jewel-icon' alt='Jewel' />)\n\nconst PriceGroup = ({ label, showIcon, network, value }) => {\n    const icon = network === NETWORKS.harmony.id ? <JewelIcon /> : <CrystalIcon />\n    return (\n        <div className='price-group'>\n            <div className='price-value'>\n                {value}{showIcon && icon}\n            </div>\n            <div className='price-label'>\n                {label}\n            </div>\n        </div>\n    )\n}\n\nconst HeroSnapshot = ({ highlights, hero, title, view }) => {\n    const grl = `Gen ${hero.generation} | ${Rarity[hero.rarity]} | Level ${hero.level}`\n    const cp = `${PascalCase(hero.mainClass)} / ${PascalCase(hero.subClass)} | ${PascalCase(hero.profession)}`\n    const icon = hero.originRealm === REALMS.serendale.id ? <JewelIcon /> : <CrystalIcon />\n\n    return (\n        <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n            <div className='hero-snapshot-title'>\n                {title}\n            </div>\n            <div className='hero-snapshot-name'>\n                Hero {icon} #{hero.displayId}\n            </div>\n            <div className='hero-snapshot-grc'>\n                {grl}\n            </div>\n            <div className='hero-snapshot-grc'>\n                {cp}\n            </div>\n            {view === 'front' && <HeroSnapshotFront hero={hero} />}\n            {view === 'back' && <HeroSnapshotBack hero={hero} highlights={highlights} />}\n            <div className='hero-snapshot-pricing'>\n                {hero.price && (<PriceGroup label={<>{`${hero.auctionType === 'sale' ? 'Purchase' : 'Rental'}`}<br />Price</>} value={hero.price} showIcon network={hero.network} />)}\n                <PriceGroup label={<>Summon<br />Cost</>} value={hero.summonCost} showIcon network={hero.network} />\n                {hero.auctionType === 'assisting' && <PriceGroup label={<>Total<br />Cost</>} value={Number(hero.price) + Number(hero.summonCost)} showIcon network={hero.network} />}\n                <PriceGroup label={hero.generation === 0 ? <>Total<br />Summons</> : <>Summons<br />Remaining</>} value={`${hero.maxSummons === 11 ? hero.summons : hero.summonsRemaining}/${hero.maxSummons === 11 ? '∞' : hero.maxSummons}`} />\n            </div>\n            <div className='hero-snapshot-owner'>\n                Owned by: {hero.owner ? hero.owner.name : 'UNAVAILABLE'}\n            </div>\n        </div>\n    )\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object,\n    highlights: PropTypes.object,\n    view: PropTypes.string\n}\n\nHeroSnapshot.defaultProps = {\n    view: 'front'\n}\n\nexport default HeroSnapshot\n","import HeroSnapshot from './HeroSnapshot'\nexport default HeroSnapshot\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Checkbox from '@mui/material/Checkbox'\nimport Grid from '@mui/material/Grid'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport './SortFilter.css'\n\nconst SortFilter = ({ onFiltersChange, onSortByChange, onViewToggled, visible }) => {\n    const [sortBy, setSort] = useState('probability')\n    const [summonsRemaining, setSummonsRemaining] = useState('')\n    const [maxSummons, setMaxSummons] = useState('')\n    const [minGen, setMinGen] = useState('0')\n    const [maxGen, setMaxGen] = useState('14')\n    const [classMatch, setClassMatch] = useState(false)\n    const [subclassMatch, setSubclassMatch] = useState(false)\n    const [professionMatch, setProfessionMatch] = useState(false)\n    const [includeSummonClass, setIncludeSummonClass] = useState(false)\n\n    const handleFilterChange = ({ target }) => {\n        let _summonsRemaining = summonsRemaining\n        let _maxSummons = maxSummons\n        let _minGen = minGen\n        let _maxGen = maxGen\n        let _classMatch = classMatch\n        let _subclassMatch = subclassMatch\n        let _professionMatch = professionMatch\n        let _includeSummonClass = includeSummonClass\n\n        switch (target.name) {\n            case 'summonsRemaining':\n                _summonsRemaining = target.value\n                setSummonsRemaining(target.value)\n                break;\n            case 'maxSummons':\n                _maxSummons = target.value\n                setMaxSummons(target.value)\n                break;\n            case 'minGen':\n                _minGen = target.value\n                setMinGen(target.value)\n                break;\n            case 'maxGen':\n                _maxGen = target.value\n                setMaxGen(target.value)\n                break;\n            case 'classMatch':\n                _classMatch = target.checked\n                setClassMatch(_classMatch)\n                console.log(`class set to ${_classMatch}`)\n                break;\n            case 'subclassMatch':\n                _subclassMatch = target.checked\n                setSubclassMatch(_subclassMatch)\n                break;\n            case 'professionMatch':\n                _professionMatch = target.checked\n                setProfessionMatch(_professionMatch)\n                break;\n            case 'includeSummonClass':\n                _includeSummonClass = target.checked\n                setIncludeSummonClass(_includeSummonClass)\n                break;\n            default:\n                console.log('unknown search filter selected')\n        }\n\n        console.log(`${target.name} set to ${target.value}`)\n\n        onFiltersChange({\n            summonsRemaining: _summonsRemaining,\n            maxSummons: _maxSummons,\n            minGen: _minGen,\n            maxGen: _maxGen,\n            classMatch: _classMatch,\n            subclassMatch: _subclassMatch,\n            professionMatch: _professionMatch,\n            includeSummonClass: _includeSummonClass\n        })\n    }\n\n    const handleViewToggled = (event) => {\n        onViewToggled(event.target.checked)\n    }\n\n    const handleSortByChange = ({ target }) => {\n        setSort(target.value)\n        onSortByChange(target.value)\n    }\n\n\n    if (!visible)\n        return null\n\n    return (\n        <Grid container className='sort-filter' justifyContent='center'>\n            <Grid item className='section'>\n                <Switch defaultChecked={false} onChange={handleViewToggled} />\n                Flip Cards\n            </Grid>\n            <Grid item className='section'>\n                <div className='sort-label'>\n                    Sort By:\n                </div>\n                <div className='sort-value'>\n                    <Select\n                        label='Sort by'\n                        name='sort-by'\n                        className='sort-by-selecter'\n                        value={sortBy}\n                        variant='standard'\n                        onChange={handleSortByChange}\n                    >\n                        <MenuItem key='probability' value='probability'>Probability</MenuItem>\n                        <MenuItem key='price' value='price'>Price</MenuItem>\n                    </Select>\n                </div>\n            </Grid>\n            <Grid item className='section'>\n                <div className='filter-label'>\n                    Filters:\n                </div>\n                <div className='filter-selections'>\n                    Summons\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Remaining\n                            <TextField\n                                name='summonsRemaining'\n                                value={summonsRemaining}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxSummons'\n                                value={maxSummons}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='filter-selections'>\n                    Generation\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Min\n                            <TextField\n                                name='minGen'\n                                value={minGen}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxGen'\n                                value={maxGen}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='gene-match'>\n                    <div className='heading'>D/R1 Gene Match</div>\n                    <div className='options'>\n                        <div className='option'>\n                            <Checkbox\n                                name='classMatch'\n                                value={classMatch}\n                                onChange={handleFilterChange}\n                                className='gene-checkbox'\n                            />\n                            <div className='label'>Class</div>\n                        </div>\n                        <div className='option'>\n                            <Checkbox\n                                name='subclassMatch'\n                                value={subclassMatch}\n                                onChange={handleFilterChange}\n                                className='gene-checkbox'\n                            />\n                            <div className='label'>Subclass</div>\n                        </div>\n                        <div className='option'>\n                            <Checkbox\n                                name='professionMatch'\n                                value={professionMatch}\n                                onChange={handleFilterChange}\n                                className='gene-checkbox'\n                            />\n                            <div className='label'>Profession</div>\n                        </div>\n                    </div>\n                </div>\n                <div className='include-summon-class'>\n                    <div>Include Summon Class</div>\n                    <Checkbox\n                        name='includeSummonClass'\n                        value={includeSummonClass}\n                        onChange={handleFilterChange}\n                    />\n                </div>\n            </Grid>\n        </Grid>\n    )\n}\n\nSortFilter.propTypes = {\n    onFiltersChange: PropTypes.func,\n    onSortByChange: PropTypes.func,\n    onViewToggled: PropTypes.func,\n    visible: PropTypes.bool,\n}\n\nSortFilter.defaultProps = {\n    onFiltersChange: () => { },\n    onSortByChange: () => { },\n    onViewToggled: () => { },\n    visible: false,\n}\n\nexport default SortFilter\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CLASS_REV, basicClasses, advancedClasses, eliteClasses, exaltedClasses, PROFESSIONS_AR as professions } from '../../constants/degenking'\nimport { NETWORKS, REALMS } from '../../constants/realms'\n\nimport Button from '@mui/material/Button'\nimport Grid from '@mui/material/Grid'\nimport ListSubheader from '@mui/material/ListSubheader'\nimport MenuItem from '@mui/material/MenuItem'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\n\nimport './styles.css'\n\nconst JewelIcon = () => (<img src='/jewel50.png' className='jewel-icon' alt='Jewel' />)\nconst CrystalIcon = () => (<img src='/crystal100.png' className='jewel-icon' alt='Jewel' />)\n\nconst auctionTypes = [{ label: 'sale', value: 'sale' }, { label: 'rent', value: 'assisting' }, { label: 'wallet', value: 'wallet' }]\n\nconst networks = [{ label: 'Serendale', value: NETWORKS.harmony.id }, { label: 'Crystalvale', value: NETWORKS.dfkchain.id }]\n\nconst professionAllOption = { label: 'any profession', value: 'all' }\n\nconst options = (array) => {\n    return array.map(item => {\n        const label = typeof (item) === 'string' ? item : item.label\n        const value = typeof (item) === 'string' ? item : item.value\n        return <MenuItem key={value} value={value}>{label}</MenuItem>\n    })\n}\n\nconst auctionTypeOptions = options(auctionTypes)\n\nconst networkOptions = options(networks)\n\nconst professionOptions = options([professionAllOption, ...professions])\n\nconst SearchFormSimple = ({ defaultSummonClass, isHeroLoaded, onHeroChange, onSubmit, onToggle }) => {\n    const [summonClass, setSummonClass] = useState('')\n    const [summonProfession, setSummonProfession] = useState('all')\n    const [auctionType, setAuctionType] = useState('assisting')\n    const [network, setNetwork] = useState(NETWORKS.harmony.id)\n    const [originRealm, setOriginRealm] = useState(REALMS.serendale.id)\n    const [heroId, setHeroId] = useState('')\n    const [summonClassOptions, setSummonClassOptions] = useState([])\n    const [walletAddress, setWalletAddress] = useState('')\n\n    useEffect(() => {\n        // Renders the list of options for the Summon Class dropdown\n        const basic = basicClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const advanced = advancedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const elite = eliteClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const exalted = exaltedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CLASS_REV[name]}</MenuItem>))\n\n        const options = [\n            (<ListSubheader key='basic'>Basic Classes</ListSubheader>),\n            ...basic,\n            (<ListSubheader key='advanced'>Advanced Classes</ListSubheader>),\n            ...advanced,\n            (<ListSubheader key='elite'>Elite Classes</ListSubheader>),\n            ...elite,\n            (<ListSubheader key='exalted'>Exalted Classes</ListSubheader>),\n            ...exalted\n        ]\n\n        setSummonClassOptions(options)\n    }, [])\n\n    useEffect(() => {\n        if (defaultSummonClass) {\n            setSummonClass(defaultSummonClass)\n        }\n    }, [defaultSummonClass])\n\n    // Saves changes to the selected Auction Type\n    const handleAuctionTypeChange = ({ target }) => {\n        setAuctionType(target.value)\n    }\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = ({ target }) => {\n        setHeroId(target.value)\n    }\n\n\n    // Loads the selected hero\n    const handleHeroIdBlur = ({ target }) => {\n        onHeroChange && onHeroChange(target.value, originRealm)\n    }\n\n\n    const handleHeroIdEnter = (event) => {\n        if (event.key === 'Enter') {\n            handleHeroIdBlur(event)\n        }\n    }\n\n\n    // Saves changes to the selected Network\n    const handleNetworkChange = ({ target }) => {\n        setNetwork(target.value)\n    }\n\n\n    // Saves changes to the selected Origin Realm\n    const handleOriginRealmChange = ({ target }) => {\n        setOriginRealm(target.value)\n        heroId && onHeroChange && onHeroChange(heroId, target.value)\n    }\n\n\n    // Saves changes to the select Summon Profession\n    const handleSummonProfessionChange = ({ target }) => {\n        setSummonProfession(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        setSummonClass(target.value)\n    }\n\n    // Saves changes to the select Wallet Address\n    const handleWalletAddressChange = ({ target }) => {\n        setWalletAddress(target.value)\n    }\n\n    // Submits the form to the calling component\n    const handleSubmit = () => {\n        const searchCriteria = {\n            auctionType,\n            heroId,\n            network,\n            originRealm,\n            summonClass,\n            summonProfession: summonProfession === 'all' ? '' : summonProfession,\n            walletAddress\n        }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n    const canSubmit = isHeroLoaded && summonClass\n\n    return (\n        <Grid container className='search-form-simple' justifyContent='center' spacing={0}>\n            <Grid item>\n                Find me heroes for\n                <Select\n                    label='Auction Type'\n                    name='auction-type'\n                    className='auction-type-selecter'\n                    value={auctionType}\n                    variant='standard'\n                    onChange={handleAuctionTypeChange}\n                >\n                    {auctionTypeOptions}\n                </Select>\n            </Grid>\n            {auctionType === 'wallet' && (\n                <Grid item>\n                    <TextField\n                        className='wallet-address-selector'\n                        placeholder='wallet address'\n                        name='wallet-address'\n                        value={walletAddress}\n                        variant='standard'\n                        onChange={handleWalletAddressChange}\n                    />\n                </Grid>\n            )}\n\n            {auctionType !== 'wallet' && (\n                <Grid item>\n                    in the\n                    <Select\n                        name='network'\n                        className='network-selecter'\n                        value={network}\n                        variant='standard'\n                        onChange={handleNetworkChange}\n                    >\n                        {networkOptions}\n                    </Select>\n                    tavern,\n                </Grid>\n            )}\n            <Grid item className='hero-container'>\n                who can match with hero\n                <Select\n                    className='origin-realm-selecter'\n                    name='origin-realm'\n                    value={originRealm}\n                    variant='standard'\n                    onChange={handleOriginRealmChange}\n                >\n                    <MenuItem value={REALMS.serendale.id}>\n                        <JewelIcon />\n                    </MenuItem>\n                    <MenuItem value={REALMS.crystalvale.id}>\n                        <CrystalIcon />\n                    </MenuItem>\n                </Select>\n                #\n                <TextField\n                    className='hero-id-selecter'\n                    placeholder='hero id'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                    onKeyPress={handleHeroIdEnter}\n                />\n            </Grid>\n            <Grid item>\n                to summon a\n                <Select\n                    label='Class to be summoned'\n                    name='summoned-class'\n                    className='summoned-class-selecter'\n                    value={summonClass}\n                    variant='standard'\n                    onChange={handleSummonClassChange}\n                >\n                    {summonClassOptions}\n                </Select>\n            </Grid>\n            <Grid item>\n                for\n                <Select\n                    label='Profession to be summoned'\n                    name='summoned-profession'\n                    className='summoned-profession-selecter'\n                    value={summonProfession}\n                    variant='standard'\n                    onChange={handleSummonProfessionChange}\n                >\n                    {professionOptions}\n                </Select>\n            </Grid>\n            <Grid item>\n                <Button variant='contained' onClick={handleSubmit} disabled={!canSubmit}>\n                    <SearchIcon />\n                </Button>\n                {/* <a href=\"#\" className='search-form-toggle' onClick={onToggle}>Advanced Search</a> */}\n            </Grid>\n        </Grid>\n    )\n}\n\nSearchFormSimple.propTypes = {\n    defaultSummonClass: PropTypes.string,\n    isHeroLoaded: PropTypes.bool,\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onToggle: PropTypes.func,\n}\n\nSearchFormSimple.defaultProps = {\n    defaultSummonClass: '',\n    isHeroLoaded: false,\n    onToggle: () => { }\n}\n\nexport default SearchFormSimple\n","import SummonsMatchList from './SummonsMatchList'\nexport default SummonsMatchList\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot/HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ highlights, heroes, view }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability * 100).toFixed(2)}% probability`\n    return heroes.length ?\n        heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} view={view} highlights={highlights} />) :\n        null\n}\n\nSummonsMatchList.propTypes = {\n    highlights: PropTypes.object,\n    heroes: PropTypes.array,\n    view: PropTypes.string\n}\n\nexport default SummonsMatchList\n","import React, { useState } from 'react'\nimport unionBy from 'lodash/unionBy'\nimport { decodeRecessiveGenesAndNormalize } from '@thanpolas/degenking/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroDataByAuction } from '../../services/auction.service'\nimport { calcuateSummonCost } from '../../helpers/prices.helper'\nimport { getProbabilityThatHeroesCanSummonTargetGene, getPossibleSummonClasses } from '../../helpers/genes.helpers'\nimport { CamelCase, ToPrice } from '../../helpers/format.helpers'\nimport { getMainHero, sheerFix, sortAndFilterHeroes } from './functions'\nimport { REALMS } from '../../constants/realms'\n\nimport Alert from '@mui/material/Alert'\nimport Container from '@mui/material/Container'\nimport HeroSnapshot from '../HeroSnapshot'\nimport SortFilter from '../SortFilter/SortFilter'\nimport SearchFormSimple from '../SearchFormSimple/SearchFormSimple'\nimport SummonsMatchList from '../SummonsMatchList'\n\nimport './styles.css'\n\nconst statusMessages = [\n    'Now there is an interesting fellow.',\n    'Oh, the Tavern has Perch Porter on draft.',\n    'Chatting with Agent Selina.  She is such a sweetheart!',\n    'Are those wings on her back, or she just harpy to see me?',\n    'Woah, big guy!  Careful with those horns!'\n]\n\nconst MainHero = ({ hero, view }) => {\n    return hero ?\n        (<div className='main-hero'>\n            <HeroSnapshot hero={hero} title='Main Hero' view={view} />\n        </div>) :\n        null\n}\n\nconst LoadingMessage = ({ heroCount, loaded, loading, message }) => {\n    const textToDisplay = loading ? message : loaded && !heroCount ? 'No Heroes Found' : null\n    return textToDisplay ? (\n        <Alert variant='outlined' severity='success' className='loading-message'>\n            {textToDisplay}\n        </Alert>\n    ) : null\n}\n\nconst RegressiveSearchPage = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [hasLoaded, setHasLoaded] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState('')\n    const [searchForm, setSearchForm] = useState('simple')\n    const [sortBy, setSortBy] = useState('probability')\n    const [filters, setFilters] = useState({})\n    const [mutationClass, setMutationClass] = useState('')\n    const [mainHero, setMainHero] = useState()\n    const [heroes, setHeroes] = useState([])\n    const [view, setView] = useState('back')\n    const [highlights, setHighlights] = useState()\n\n    const delay = ms => new Promise(res => setTimeout(res, ms))\n\n    const setRandomLoadingMessage = () => {\n        const randomIndex = Math.floor(Math.random() * statusMessages.length)\n        setLoadingMessage(statusMessages[randomIndex])\n    }\n\n    // Updates filters\n    const handleFiltersChange = filters => {\n        setFilters(filters)\n    }\n\n    // Looks up the selected Hero\n    const handleHeroChange = async (heroNumber, originRealm) => {\n        const heroId = originRealm === REALMS.serendale.id ? heroNumber : `${'1000000000000'.slice(0, 13 - heroNumber.length)}${heroNumber}`\n        if (heroId && (!mainHero || mainHero.id !== heroId)) {\n            // Clear currently displayed main and matching heroes\n            setHeroes([])\n            setMainHero()\n            setMutationClass('')\n            setLoadingMessage('')\n\n            // Retrieve the main hero from DFK\n            const _mainHero = await getMainHero(heroId)\n\n            if (_mainHero) {\n                setMainHero(_mainHero)\n\n                // Set a default for the class to summon based on the selected hero\n                setMutationClass(_mainHero.mutationClass)\n            } else {\n                setLoadingMessage('Hero not found.')\n                setIsLoading(true)\n            }\n        }\n    }\n\n    // Updates sorting options\n    const handleSortByChange = value => {\n        setSortBy(value)\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async searchCriteria => {\n        setHeroes([])\n        setIsLoading(true)\n        setRandomLoadingMessage()\n\n        let allHeroes = []\n        const pageSize = 50\n        let offset = 0\n        let isLastPage = false\n\n        // Set the highlights\n        const classes = getPossibleSummonClasses(CamelCase(mainHero.mainClass), searchCriteria.summonClass)\n        setHighlights({ mainClass: classes, profession: [searchCriteria.summonProfession] })\n\n        while (!isLastPage) {\n            // Retrieve a page of hero listings from tavern\n            const pageOfListings = await getHeroDataByAuction(searchCriteria.auctionType, searchCriteria.network, classes, searchCriteria.summonProfession, searchCriteria.walletAddress, pageSize, offset)\n            const listedHeroes = decodeRecessiveGenesAndNormalize(pageOfListings.heroes)\n\n            // Analyze each of the heroes in auction\n            for (let i = 0; i < listedHeroes.length; i++) {\n                const heroToAnalyze = listedHeroes[i]\n                sheerFix(heroToAnalyze)\n                heroToAnalyze.displayId = heroToAnalyze.id.length === 13 ? Number(heroToAnalyze.id.slice(1)).toString() : heroToAnalyze.id\n                heroToAnalyze.auctionType = searchCriteria.auctionType\n                heroToAnalyze.summonCost = calcuateSummonCost(heroToAnalyze)\n                heroToAnalyze.price = ToPrice(heroToAnalyze.price)\n                const classProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.mainClassGenes, heroToAnalyze.mainClassGenes, searchCriteria.summonClass)\n\n                if (searchCriteria.summonProfession) {\n                    const professionProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.professionGenes, heroToAnalyze.professionGenes, searchCriteria.summonProfession)\n                    heroToAnalyze.targetProbability = classProbability && professionProbability ? classProbability.value * professionProbability.value : 0\n                } else {\n                    heroToAnalyze.targetProbability = classProbability ? classProbability.value : 0\n                }\n            }\n\n            // Remove any heroes who cannot be used to summon the target class\n            const filteredHeroes = listedHeroes.filter(hero => hero.targetProbability > 0)\n\n            console.log(`${allHeroes.length} existing heroes`)\n            console.log(`adding ${filteredHeroes.length} new heroes`)\n\n            // Merge and sort heroes by highest to lowest probability of summoning target class\n            allHeroes = unionBy(allHeroes, filteredHeroes, 'id')\n\n            console.log(`now ${allHeroes.length} total heroes`)\n\n            // Update state to display heroes\n            setHeroes(allHeroes)\n            setRandomLoadingMessage()\n\n            offset += pageSize\n            isLastPage = pageOfListings.heroes.length === 0\n\n            await delay(1000)\n\n            // ONLY LOAD 1 PAGE FOR TESTING\n            // isLastPage = offset > 200\n        }\n\n        setIsLoading(false)\n        setHasLoaded(true)\n    }\n\n    // Changes which search form is displayed\n    const handleSearchFormToggle = () => {\n        setSearchForm(searchForm === 'simple' ? 'advanced' : 'simple')\n    }\n\n    // Change the current view\n    const handleViewToggled = (checked) => {\n        setView(checked ? 'front' : 'back')\n    }\n\n    const sortedHeroes = sortAndFilterHeroes(heroes, filters, sortBy, mutationClass)\n\n    return (\n        <Container maxWidth='xl'>\n            <SearchFormSimple defaultSummonClass={mutationClass} isHeroLoaded={!!mainHero} onHeroChange={handleHeroChange} onToggle={handleSearchFormToggle} onSubmit={handleSubmit} />\n            <SortFilter onFiltersChange={handleFiltersChange} onSortByChange={handleSortByChange} onViewToggled={handleViewToggled} visible={!!mainHero} />\n            <LoadingMessage heroCount={heroes.length} loading={isLoading} loaded={hasLoaded} message={loadingMessage} />\n            <div className='hero-list'>\n                <MainHero hero={mainHero} view={view} />\n                <SummonsMatchList heroes={sortedHeroes} view={view} highlights={highlights} />\n            </div>\n        </Container>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main className=\"App-main\">\n        <RegressiveSearchPage />\n      </main>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}