{"version":3,"sources":["services/auction.service.js","helpers/genes.helpers.js","components/SummonsMatchSearchForm/index.js","components/SummonsMatchSearchForm/SummonsMatchSearchForm.js","components/HeroCard/HeroStatSection.js","constants/hero-genes.const.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/index.js","components/SummonsMatchList/index.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["getAuctionData","a","type","take","skip","apiv6_endpoint","options","headers","graphQLClient","GraphQLClient","table","query_ids","gql","request","data","dominantGeneProbabilities","mutationProbabilities","mutationPairings","mutation","getPotentialDominantGenes","heroGenes","map","name","i","value","condenseGenes","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","currentGene","push","getMutations","concat","sort","b","condenseAndSortGenesByHighestProbability","getProbabilityThatHeroesCanSummonTargetClass","targetClass","mainClassGenes","_class","SummonsMatchSearchForm","onHeroChange","onSubmit","useState","summonClass","setSummonClass","auctionType","setAuctionType","heroId","setHeroId","summonClassOptions","setSummonClassOptions","useEffect","basic","basicClasses","MenuItem","CONSTANTS","CLASS_REV","advanced","advancedClasses","elite","eliteClasses","exalted","exaltedClasses","ListSubheader","auctionTypeOptions","className","Select","label","variant","onChange","target","TextField","onBlur","Button","onClick","event","HeroStatSection","children","title","defaultProps","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","heroid","geneName","HeroStat","main","minor","nameClasses","rarityClass","HeroSnapshot","hero","rarity","id","generation","Rarity","mainClass","subClass","ownerName","subClassGenes","professionGenes","strength","statBoost1","statBoost2","dexterity","agility","vitality","endurance","intelligence","wisdom","luck","profession","SummonsMatchList","heroes","renderTitle","targetProbability","toFixed","statusMessages","RegressiveSearchPage","loaded","setLoaded","loadingAuctionData","setLoadingAuctionData","loadingMessage","setLoadingMessage","mainHero","setMainHero","matchingHeroes","setMatchingHeroes","handleHeroChange","getHeroesChain","handleSubmit","searchCriteria","auctionsData","heroIds","auctions","auction","tokenId","numberId","nextStatusUpdate","iterationsBetweenStatusUpdates","messageIndex","length","heroToAnalyze","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bfea24c.chunk.js","sourcesContent":["// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst getAuctionData = async (type = 'sale', take = 50, skip = 0) => {\n  // Then define our endpoint URL\n  //const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\n  const apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  const table = type === 'sale' ? 'saleAuctions' : 'assistingAuctions'\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query_ids = gql`\n\t{\n    auctions: ${table}(\n      orderBy: startedAt\n      orderDirection: desc\n      first: ${take}\n      skip: ${skip}\n      where:{\n        open: true\n      }\n    )\n    {\n      id\n      startingPrice\n      endingPrice\n      open\n      tokenId{\n        id\n        numberId\n      }\n    }\n  }`\n\n  let data = await graphQLClient.request(query_ids)\n  return data\n}\n\nexport default getAuctionData\n","import { getHeroTier } from '@thanpolas/dfk-hero/src/heroes-helpers/summon-utils.ent'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\nconst mutationPairings = [\n    { 'classes': ['warrior', 'knight'], mutation: 'paladin' },\n    { 'classes': ['thief', 'archer'], mutation: 'darkKnight' },\n    { 'classes': ['priest', 'wizard'], mutation: 'summoner' },\n    { 'classes': ['monk', 'pirate'], mutation: 'ninja' },\n    { 'classes': ['paladin', 'darkKnight'], mutation: 'dragoon' },\n    { 'classes': ['summoner', 'ninja'], mutation: 'sage' },\n    { 'classes': ['dragoon', 'sage'], mutation: 'dreadKnight' }\n]\n\nconst getPotentialDominantGenes = heroGenes => {\n    return heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] }))\n}\n\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1, hero2) => {\n    const mutations = []\n\n    for (let currentGene = 0; currentGene < 4; currentGene++) {\n        // 2. Mutable dominant gene\n        const mutation = getMutationProbability(hero1[currentGene], hero2[currentGene])\n\n        // 3. Adjust dominant gene, if mutation is possible\n        if (mutation) {\n            mutations.push(mutation)\n            hero1[currentGene].value -= mutation.value\n            hero2[currentGene].value -= mutation.value\n        }\n    }\n\n    return condenseGenes(mutations)\n}\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(hero1DominantGene.name, hero2DominantGene.name)\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\nconst lookupMutation = (gene1, gene2) => mutationPairings.find(pair => gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2))\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const getProbabilityThatHeroesCanSummonTargetClass = (hero1, hero2, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1.mainClassGenes, hero2.mainClassGenes)\n    return classProbabilities.find(_class => _class.name === targetClass)\n}\n","import SummonsMatchSearchForm from './SummonsMatchSearchForm'\nexport default SummonsMatchSearchForm\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { CONSTANTS } from '@thanpolas/dfk-hero'\nimport { basicClasses, advancedClasses, eliteClasses, exaltedClasses } from '@thanpolas/dfk-hero/src/constants/hero-classes.const'\nimport Button from '@mui/material/Button'\nimport ListSubheader from '@mui/material/ListSubheader'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\nimport './styles.css'\n\nconst SummonsMatchSearchForm = ({ onHeroChange, onSubmit }) => {\n    const [summonClass, setSummonClass] = useState('')\n    const [auctionType, setAuctionType] = useState('sale')\n    const [heroId, setHeroId] = useState('')\n    const [summonClassOptions, setSummonClassOptions] = useState([])\n\n    useEffect(() => {\n        // Renders the list of options for the Summon Class dropdown\n        const basic = basicClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const advanced = advancedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const elite = eliteClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const exalted = exaltedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={name}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const options = [\n            (<ListSubheader key='basic'>Basic Classes</ListSubheader>),\n            ...basic,\n            (<ListSubheader key='advanced'>Advanced Classes</ListSubheader>),\n            ...advanced,\n            (<ListSubheader key='elite'>Elite Classes</ListSubheader>),\n            ...elite,\n            (<ListSubheader key='exalted'>Exalted Classes</ListSubheader>),\n            ...exalted\n        ]\n\n        setSummonClassOptions(options)\n    }, [])\n\n    // Saves changes to the selected Auction Type\n    const handleAuctionTypeChange = ({ target }) => {\n        setAuctionType(target.value)\n    }\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = ({ target }) => {\n        setHeroId(target.value)\n    }\n\n\n    // Loads the selected hero\n    const handleHeroIdBlur = ({ target }) => {\n        onHeroChange && onHeroChange(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        setSummonClass(target.value)\n    }\n\n\n    // Submits the form to the calling component\n    const handleSubmit = event => {\n        const searchCriteria = { auctionType, heroId, summonClass }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n\n    const auctionTypeOptions = [\n        <MenuItem key='sale' value='sale'>sale</MenuItem>,\n        <MenuItem key='rent' value='rent'>rent</MenuItem>\n    ]\n\n    return (\n        <div className='SummonsMatchSearchForm'>\n            Find me heroes for\n            <Select\n                label='Auction Type'\n                name='auction-type'\n                className='auction-type-selecter'\n                value={auctionType}\n                variant='standard'\n                onChange={handleAuctionTypeChange}\n            >\n                {auctionTypeOptions}\n            </Select>\n            who could match with hero\n            <div className='hero-id-selecter'>\n                <TextField\n                    label='Hero ID'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                />\n            </div>\n            to summon a\n            <Select\n                label='Class to be summoned'\n                name='summoned-class'\n                className='summoned-class-selecter'\n                value={summonClass}\n                variant='standard'\n                onChange={handleSummonClassChange}\n            >\n                {summonClassOptions}\n            </Select>\n            <Button variant='contained' onClick={handleSubmit}>\n                <SearchIcon />\n            </Button>\n        </div>\n    )\n}\n\nSummonsMatchSearchForm.propTypes = {\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func\n}\n\nexport default SummonsMatchSearchForm\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes.const'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, title, type }) => {\n    return <div className={`hero-snapshot-genes ${className}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className='value'>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV, Rarity } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroStat from '../HeroCard/HeroStat'\n\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\n\nconst HeroSnapshot = ({ hero, title }) => {\n    return <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n        <div className='hero-snapshot-title'>{title}</div>\n        <div className='hero-snapshot-name'>{hero.name ? hero.name : 'Main Hero'} (#{hero.id})</div>\n        <div className='hero-snapshot-grc'>Gen{hero.generation} | {Rarity[hero.rarity]} | {CLASS_REV[hero.mainClass]}/{CLASS_REV[hero.subClass]}</div>\n        <div className='hero-snapshot-owner'>Owned by: {hero.ownerName}</div>\n        <div className='hero-snapshot-genes-section'>\n            <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' />\n            <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n            <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={2} />\n        </div>\n        <HeroStatSection title='Stats'>\n            <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n            <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n            <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n            <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n            <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n            <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n            <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n            <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n        </HeroStatSection>\n        <HeroStatSection className='profession-stat-section' title='Professions'>\n            <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n            <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n            <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n            <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n        </HeroStatSection>\n    </div>\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object\n}\n\nexport default HeroSnapshot\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ heroes }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability.value * 100).toFixed(2)}% probability`\n    return (\n        <>\n            {heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} />)}\n        </>\n    )\n}\n\nSummonsMatchList.propTypes = {\n    heroes: PropTypes.array\n}\n\nexport default SummonsMatchList\n","import React, { useState } from 'react'\nimport getAuctionData from '../../services/auction.service'\nimport { getHeroesChain } from '@thanpolas/dfk-hero'\nimport { getProbabilityThatHeroesCanSummonTargetClass } from '../../helpers/genes.helpers'\nimport SummonsMatchSearchForm from '../SummonsMatchSearchForm'\nimport SummonsMatchList from '../SummonsMatchList'\nimport HeroSnapshot from '../HeroSnapshot'\nimport './styles.css'\n\nconst statusMessages = [\n    'Heading on over to the tavern.',\n    'Oh, they have Perch Porter on draft.',\n    'Chatting with Agent Selina.  She is such a sweetheart!',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm'\n]\n\nconst RegressiveSearchPage = () => {\n    const [loaded, setLoaded] = useState(false)\n    const [loadingAuctionData, setLoadingAuctionData] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState('')\n    const [take] = useState(50)\n\n    const [mainHero, setMainHero] = useState()\n    const [matchingHeroes, setMatchingHeroes] = useState([])\n\n    // Looks up the selected Hero\n    const handleHeroChange = async heroId => {\n        if (heroId) {\n            setMainHero()\n            const data = await getHeroesChain([heroId])\n            setMainHero(data[0])\n        }\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async searchCriteria => {\n        setMatchingHeroes([])\n        setLoadingAuctionData(true)\n        setLoadingMessage(statusMessages[0])\n\n        const auctionsData = await getAuctionData(searchCriteria.auctionType, take)\n        const heroIds = auctionsData.auctions.map(auction => auction.tokenId.numberId)\n\n        const iterationsBetweenStatusUpdates = 10\n        let nextStatusUpdate = iterationsBetweenStatusUpdates\n        let messageIndex = 0\n\n        const data = await getHeroesChain(heroIds)\n\n        // Analyze each of the heroes in auction\n        for (let i = 1; i < data.length; i++) {\n            const heroToAnalyze = data[i]\n            heroToAnalyze.targetProbability = getProbabilityThatHeroesCanSummonTargetClass(mainHero, heroToAnalyze, searchCriteria.summonClass)\n\n            if (i > nextStatusUpdate) {\n                setLoadingMessage(statusMessages[messageIndex++])\n                nextStatusUpdate += iterationsBetweenStatusUpdates\n                if (messageIndex >= statusMessages.length) { messageIndex = 0 }\n            }\n        }\n\n        // Remove any heroes who cannot be used to summon the target class\n        const heroes = data.filter(hero => hero.targetProbability)\n\n        // Update state to display heroes\n        setMatchingHeroes(heroes)\n        setLoadingAuctionData(false)\n        setLoaded(true)\n    }\n\n    // Order by highest to lowest probability of summoning target class\n    const heroes = matchingHeroes.sort((a, b) => a.targetProbability.value > b.targetProbability.value ? -1 : a.targetProbability.value < b.targetProbability.value ? 1 : 0)\n\n    return (\n        <>\n            <SummonsMatchSearchForm onHeroChange={handleHeroChange} onSubmit={handleSubmit} />\n            <div className='hero-list'>\n                {mainHero && <div className='main-hero'><HeroSnapshot hero={mainHero} title='Main Hero' /></div>}\n                {loaded && !loadingAuctionData &&\n                    <SummonsMatchList loaded={loaded} heroes={heroes} />\n                }\n                {loaded && !loadingAuctionData && !heroes.length && 'No Heroes Found'}\n                {loadingAuctionData && <div>{loadingMessage}</div>}\n\n            </div>\n        </>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <RegressiveSearchPage />\n      </header>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}