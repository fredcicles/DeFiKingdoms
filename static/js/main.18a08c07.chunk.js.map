{"version":3,"sources":["helpers/prices.helper.js","services/hero.service.js","services/auction.service.js","constants/hero-classes.const.js","helpers/format.helpers.js","helpers/genes.helpers.js","constants/hero-genes.const.js","components/HeroSnapshot/HeroSnapshotGenes.js","components/HeroSnapshot/HeroSnapshotStatGenes.js","components/HeroSnapshot/HeroSnapshotBack.js","components/HeroCard/HeroStatSection.js","components/HeroCard/HeroStat.js","components/HeroSnapshot/HeroSnapshotFront.js","components/HeroSnapshot/HeroSnapshot.js","components/HeroSnapshot/index.js","components/SortFilter/SortFilter.js","components/SearchFormSimple/index.js","components/SummonsMatchList/index.js","components/RegressiveSearchPage/RegressiveSearchPage.js","components/RegressiveSearchPage/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["SummonsCosts","generation","baseCost","increment","maxCost","CalcuateSummonCost","summonsRemaining","maxSummons","gen","Number","tier","getHeroById","id","a","graphQLClient","GraphQLClient","headers","query","gql","request","data","apiv6_endpoint","getHeroDataByAuction","auctionType","mainClasses","profession","take","skip","console","log","options","filter","length","map","name","price","heroes","classMutationPairings","mutation","PascalCase","word","toUpperCase","slice","dominantGeneProbabilities","mutationProbabilities","getPotentialDominantGenes","heroGenes","i","value","condenseGenes","genes","reduce","aggregate","current","match","find","existing","getMutationProbability","hero1DominantGene","hero2DominantGene","lookupMutation","mutationProbability","getHeroTier","gene1","gene2","pair","classes","includes","halveGenes","forEach","gene","calculateSummoningGeneProbability","hero1GeneNames","hero2GeneNames","ranks","hero1","hero2","mutations","currentGene","push","getMutations","concat","sort","b","condenseAndSortGenesByHighestProbability","getProbabilityThatHeroesCanSummonTargetGene","hero1Genes","hero2Genes","targetClass","_class","toLowerCase","getPossibleSummonClasses","parentClass","summonedClass","mutationPairing","parentIsMutatable","c","assistingClass","getMutationClass","heroClass","GENE_TITLES","GENE_TYPES","PROFESSIONS","mining","foraging","gardening","fishing","HeroSnapshotGenes","className","heroid","title","type","geneName","CLASS_REV","defaultProps","StatGene","boldIfNot","toString","HeroSnapshotStatGenes","statsUnknown1","statGenes","statsUnknown2","element","HeroSnapshotBack","hero","mainClassGenes","subClassGenes","professionGenes","HeroStatSection","children","HeroStat","main","minor","nameClasses","HeroSnapshotFront","strength","statBoost1","statBoost2","agility","endurance","wisdom","dexterity","vitality","intelligence","luck","rarityClass","JewelIcon","src","alt","PriceGroup","label","showJewel","HeroSnapshot","view","grl","Rarity","rarity","level","cp","mainClass","subClass","summonCost","owner","SortFilter","onFiltersChange","onSortByChange","onViewToggled","visible","useState","sortBy","setSort","setSummonsRemaining","setMaxSummons","minGen","setMinGen","maxGen","setMaxGen","handleFilterChange","target","_summonsRemaining","_maxSummons","_minGen","_maxGen","Switch","defaultChecked","onChange","event","checked","Select","variant","MenuItem","TextField","array","item","auctionTypeOptions","professionOptions","professions","SearchFormSimple","defaultSummonClass","isHeroLoaded","onHeroChange","onSubmit","onToggle","summonClass","setSummonClass","summonProfession","setSummonProfession","setAuctionType","heroId","setHeroId","summonClassOptions","setSummonClassOptions","useEffect","basic","basicClasses","CONSTANTS","advanced","advancedClasses","elite","eliteClasses","exalted","exaltedClasses","ListSubheader","canSubmit","placeholder","onBlur","Button","onClick","disabled","SummonsMatchList","renderTitle","targetProbability","toFixed","statusMessages","MainHero","LoadingMessage","heroCount","loaded","loading","message","textToDisplay","RegressiveSearchPage","isLoading","setIsLoading","hasLoaded","setHasLoaded","loadingMessage","setLoadingMessage","searchForm","setSearchForm","setSortBy","filters","setFilters","mutationClass","setMutationClass","mainHero","setMainHero","setHeroes","setView","delay","ms","Promise","res","setTimeout","setRandomLoadingMessage","randomIndex","Math","floor","random","handleHeroChange","decodeRecessiveGenesAndNormalize","handleSubmit","searchCriteria","allHeroes","pageSize","offset","isLastPage","pageOfListings","listedHeroes","heroToAnalyze","classProbability","professionProbability","filteredHeroes","sortedHeroes","remainingSummons","aPrice","bPrice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18a08c07.chunk.js","sourcesContent":["const SummonsCosts = [\n    { generation: 0, baseCost: 6, increment: 2, maxCost: 30 },\n    { generation: 1, baseCost: 16, increment: 2, maxCost: 34 },\n    { generation: 2, baseCost: 26, increment: 2, maxCost: 42 },\n    { generation: 3, baseCost: 36, increment: 2, maxCost: 50 },\n    { generation: 4, baseCost: 46, increment: 2, maxCost: 58 },\n    { generation: 5, baseCost: 56, increment: 2, maxCost: 66 },\n    { generation: 6, baseCost: 66, increment: 2, maxCost: 74 },\n    { generation: 7, baseCost: 76, increment: 2, maxCost: 82 },\n    { generation: 8, baseCost: 86, increment: 2, maxCost: 90 },\n    { generation: 9, baseCost: 96, increment: 2, maxCost: 98 },\n    { generation: 10, baseCost: 106, increment: 2, maxCost: 106 }\n]\n\nexport const CalcuateSummonCost = ({ generation, summonsRemaining, maxSummons }) => {\n    const gen = Number(generation)\n    if (gen < 0 || gen > 10) return '?'\n    \n    const tier = SummonsCosts[gen]\n    const cost = tier.baseCost + (maxSummons - summonsRemaining + 1) * tier.increment\n    return cost\n}","// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\nexport const getHeroById = async (id) => {\n    // Then define our endpoint URL\n    //const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\n\tconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\n    // Create a new GQL Client\n    const graphQLClient = new GraphQLClient(apiv6_endpoint, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n\n    // Define our query, this will return data for the first 1000 heroes\n    // 1000 is the max query size for GQL\n    const query = gql`\n\t{\n\t\theroes( \n\t\t\torderBy: numberId\n\t\t\torderDirection: asc\n\t\t\twhere: \n\t\t\t{\n\t\t\t\tid: ${id}\n\t\t   \t}\n\t\t)\n\t\t{\n\t\t\tid\n\t\t\towner{\n\t\t\t  name\n\t\t\t}\n\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\trarity\n\t\t\tgender\n\t\t\tgeneration\n\t\t\tmainClass\n\t\t\tsubClass\n\t\t\tlevel\n\t\t\tprofession\n\t\t\tfishing\n\t\t\tforaging\n\t\t\tgardening\n\t\t\tmining\n\t\t\n\t\t\tstamina\n\t\t\n\t\t\tsummonsRemaining\n\t\t\tmaxSummons\n\t\t\tsummons\n\t\t\t\n\t\t\tactive1\n\t\t\tactive2\n\t\t\tpassive1\n\t\t\tpassive2\n\t\t\tstatBoost1\n\t\t\tstatBoost2\n\t\t\tstatsUnknown1\n\t\t\tstatsUnknown2\n\t\t\telement\n\t\t\n\t\t\tstrength\n\t\t\tagility\n\t\t\tendurance\n\t\t\twisdom\n\t\t\tdexterity\n\t\t\tvitality\n\t\t\tintelligence\n\t\t\tluck\n\t  \n\t\t\tstatus\n\t\t\thpFullAt\n\t\t\tmpFullAt\n\t\t\tstatGenesRaw: statGenes\n\t\t}\n\t}`\n\n    let data = await graphQLClient.request(query)\n    return data\n}\n","// First we need to require our GraphQL Package\nimport { GraphQLClient, gql } from 'graphql-request'\n\n// const apiv5_endpoint = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\nconst apiv6_endpoint = 'https://defi-kingdoms-community-api-gateway-co06z8vi.uc.gateway.dev/graphql'\n\nconst getAuctionData = async (type = 'sale', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  const table = type === 'sale' ? 'saleAuctions' : 'assistingAuctions'\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    auctions: ${table}(\n      orderBy: startedAt\n      orderDirection: desc\n      first: ${take}\n      skip: ${skip}\n      where:{\n        open: true\n      }\n    )\n    {\n      id\n      startingPrice\n      endingPrice\n      open\n      tokenId{\n        id\n        numberId\n      }\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.auctions.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\n/*\n * auctionType: sale | assisting\n */\nconst getHeroDataByAuction = async (auctionType = 'sale', mainClasses = [], profession = '', take = 50, skip = 0) => {\n  console.log(`Retrieving hero listings ${skip + 1} - ${skip + take} from the Tavern`)\n\n  const options = { headers: { 'Content-Type': 'application/json' } }\n\n  // Create a new GQL Client\n  const graphQLClient = new GraphQLClient(apiv6_endpoint, options)\n\n  let filter = `${auctionType}Price_not: null`\n\n  // If specified, add main class to filter\n  if (mainClasses.length) {\n    filter = `${filter}\n    mainClass_in: [${mainClasses.map(name => `\"${name}\"`)}]`\n  }\n\n  // If specified, add profession to filter\n  if (profession) {\n    filter = `${filter}\n    profession: \"${profession}\"`\n  }\n\n  const price = `price: ${auctionType}Price`\n\n\n  // Define our query, this will return data for the first 1000 open auctions\n  // 1000 is the max query size for GQL\n  const query = gql`\n\t{\n    heroes(\n      first: ${take}\n      skip: ${skip}\n      where:{\n        ${filter}\n      }\n    )\n    {\n      id\n      owner{\n        name\n      }\n      firstName\n      lastName\n      rarity\n      gender\n      generation\n      mainClass\n      subClass\n      level\n      profession\n      fishing\n      foraging\n      gardening\n      mining\n  \n      stamina\n  \n      summonsRemaining\n      maxSummons\n      summons\n      \n      active1\n      active2\n      passive1\n      passive2\n      statBoost1\n      statBoost2\n      statsUnknown1\n      statsUnknown2\n      element\n  \n      strength\n      agility\n      endurance\n      wisdom\n      dexterity\n      vitality\n      intelligence\n      luck\n\n      ${price}\n      status\n      hpFullAt\n      mpFullAt\n      statGenesRaw: statGenes\n    }\n  }`\n\n  let data = await graphQLClient.request(query)\n  console.log(`${data.heroes.length} hero listings retrieved from the Tavern`)\n  return data\n}\n\nexport { getAuctionData, getHeroDataByAuction }\n","/**\n * @fileoverview Hero Classes and tiers.\n */\n\nexport const classMutationPairings = [\n  { 'classes': ['Warrior', 'Knight'], mutation: 'Paladin' },\n  { 'classes': ['Thief', 'Archer'], mutation: 'DarkKnight' },\n  { 'classes': ['Priest', 'Wizard'], mutation: 'Summoner' },\n  { 'classes': ['Monk', 'Pirate'], mutation: 'Ninja' },\n  { 'classes': ['Paladin', 'DarkKnight'], mutation: 'Dragoon' },\n  { 'classes': ['Summoner', 'Ninja'], mutation: 'Sage' },\n  { 'classes': ['Dragoon', 'Sage'], mutation: 'DreadKnight' }\n]\n","export const PascalCase = word => `${word[0].toUpperCase()}${word.slice(1)}`\n\nexport const CamelCase = word => `${word[0].toLowerCase()}${word.slice(1)}`\n\nexport const ToPrice = price => Number(price) / 1000000000000000000\n","import { getHeroTier } from '@thanpolas/dfk-hero/src/heroes-helpers/summon-utils.ent'\nimport { classMutationPairings } from '../constants/hero-classes.const'\nimport { PascalCase } from './format.helpers'\n\nconst dominantGeneProbabilities = [0.75, 0.1875, 0.046875, 0.015625]\n\nconst mutationProbabilities = {\n    'basic': 0.25,\n    'advanced': 0.25,\n    'elite': 0.125,\n    'exalted': 0.125\n}\n\nconst getPotentialDominantGenes = heroGenes => {\n    return heroGenes.map((name, i) => ({ name, value: dominantGeneProbabilities[i] }))\n}\n\nconst condenseGenes = genes => {\n    return genes.reduce((aggregate, current, i) => {\n        const match = aggregate.find(existing => existing.name === current.name)\n\n        if (match) {\n            match.value += current.value\n            return aggregate\n        } else {\n            return [...aggregate, current]\n        }\n    }, [])\n}\n\n//  - Note: this will update hero1 and hero2 if mutations exist\nconst getMutations = (hero1, hero2) => {\n    const mutations = []\n\n    for (let currentGene = 0; currentGene < 4; currentGene++) {\n        // 2. Mutable dominant gene\n        const mutation = getMutationProbability(hero1[currentGene], hero2[currentGene])\n\n        // 3. Adjust dominant gene, if mutation is possible\n        if (mutation) {\n            mutations.push(mutation)\n            hero1[currentGene].value -= mutation.value\n            hero2[currentGene].value -= mutation.value\n        }\n    }\n\n    return condenseGenes(mutations)\n}\n\nconst getMutationProbability = (hero1DominantGene, hero2DominantGene) => {\n    const mutation = lookupMutation(PascalCase(hero1DominantGene.name), PascalCase(hero2DominantGene.name))\n\n    // If a mutation could occur, then calculate probability\n    if (mutation) {\n        const mutationProbability = mutationProbabilities[getHeroTier(hero1DominantGene.name)]\n\n        return {\n            name: mutation.mutation,\n            value: hero1DominantGene.value * hero2DominantGene.value * mutationProbability\n        }\n    }\n\n    // If no mutation can occur\n    return null\n}\n\nconst lookupMutation = (gene1, gene2) => classMutationPairings.find(pair => {\n    const m = gene1 !== gene2 && pair.classes.includes(gene1) && pair.classes.includes(gene2)\n    return m\n})\n\n// Divide the probability value for each gene in half\nconst halveGenes = genes => genes.forEach(gene => gene.value = gene.value / 2)\n\nconst condenseAndSortGenesByHighestProbability = (ranks) =>\n    condenseGenes(ranks.hero1.concat(ranks.hero2, ranks.mutations))\n        .sort((a, b) => a.value > b.value ? -1 : a.value < b.value ? 1 : 0)\n\n\n\n\nexport const calculateSummoningGeneProbability = (hero1GeneNames, hero2GeneNames) => {\n\n    // 1. Probabilities for the potential dominant genes\n    const ranks = {\n        hero1: getPotentialDominantGenes(hero1GeneNames),\n        hero2: getPotentialDominantGenes(hero2GeneNames)\n    }\n\n    // 4. Repeat for D, R1, R2, R3\n    // 2. Probabilities for potential mutations\n    // 3. Adjust parent genes, if mutation is possible\n    //  - Note: this will update hero1 and hero2 if mutations is possible\n    ranks.mutations = getMutations(ranks.hero1, ranks.hero2)\n\n    // 5. Halve all of the parent genes\n    halveGenes(ranks.hero1)\n    halveGenes(ranks.hero2)\n\n    // 6. Combine all the genes\n    return condenseAndSortGenesByHighestProbability(ranks)\n}\n\nexport const getProbabilityThatHeroesCanSummonTargetGene = (hero1Genes, hero2Genes, targetClass) => {\n    const classProbabilities = calculateSummoningGeneProbability(hero1Genes, hero2Genes)\n    return classProbabilities.find(_class => _class.name.toLowerCase() === targetClass.toLowerCase())\n}\n\nexport const getPossibleSummonClasses = (parentClass, summonedClass) => {\n    const classes = [summonedClass]\n\n    // If the parent and the child are the same class, 2nd parent should be same as 1st parent for highest probability\n    if (parentClass === summonedClass) return classes\n\n    // If the parentClass could mutate to the summonedClass, add the complimentary parent class\n    const mutationPairing = classMutationPairings.find(pair => pair.mutation === summonedClass)\n\n    if (mutationPairing) {\n        const parentIsMutatable = mutationPairing.classes.find(c => c === parentClass)\n        let assistingClass = mutationPairing.classes.find(c => c !== parentClass)\n\n        if (parentIsMutatable)\n            classes.push(assistingClass)\n    }\n\n    return classes\n}\n\n// Retrieves the mutation class for the specified base class\nexport const getMutationClass = heroClass => {\n    return classMutationPairings.find(pair => pair.classes.includes(heroClass)).mutation\n}\n","export const GENE_TITLES = ['D', 'R1', 'R2', 'R3']\n\nexport const GENE_TYPES = {\n    Classes: 0,\n    SubClasses: 1,\n    Professions: 2\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CLASS_REV } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { GENE_TITLES, GENE_TYPES } from '../../constants/hero-genes.const'\n\nconst PROFESSIONS = {\n    mining: 'Mining',\n    foraging: 'Foraging',\n    gardening: 'Gardening',\n    fishing: 'Fishing'\n}\n\nconst HeroSnapshotGenes = ({ className, genes, heroid, title, type }) => {\n    return <div className={`hero-snapshot-genes ${className}`}>\n        <div className='title'>{title}</div>\n        {genes.map((gene, i) => {\n            // Get the nice name for the gene\n            let geneName = type === GENE_TYPES.Classes ? CLASS_REV[gene] : type === GENE_TYPES.Professions ? PROFESSIONS[gene] : gene\n            // Back-up, in case gene is not in the appropriate array\n            if (!geneName) geneName = gene\n\n            return (\n                <div key={`${heroid}-${GENE_TITLES[i]}`} className='gene'>\n                    <div className='label'>{GENE_TITLES[i]}:</div>\n                    <div className='value'>{geneName}</div>\n                </div>\n            )\n        })}\n    </div>\n}\n\nHeroSnapshotGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.array,\n    heroid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    title: PropTypes.string,\n    type: PropTypes.number\n}\n\nHeroSnapshotGenes.defaultProps = {\n    type: 0\n}\n\nexport default HeroSnapshotGenes\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst StatGene = ({ boldIfNot, value }) => {\n    let className = 'value'\n\n    if (boldIfNot && !value.toString().toLowerCase().includes(boldIfNot)) {\n         className += ' notBasic'\n    }\n\n    return (\n        <div className='gene'>\n            <div className={className}>{value}</div>\n        </div>\n    )\n}\n\nconst HeroSnapshotStatGenes = ({ className, genes }) => {\n\n    const statsUnknown1 = genes['statsUnknown1'] ? genes['statsUnknown1'] : genes.statGenes['statsUnknown1']\n    const statsUnknown2 = genes['statsUnknown2'] ? genes['statsUnknown2'] : genes.statGenes['statsUnknown2']\n    const element = genes['element'] ? genes['element'] : genes.statGenes['element']\n\n    return (\n        <>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Active</div>\n                <StatGene value={genes['active1']} boldIfNot='basic' />\n                <StatGene value={genes['active2']} boldIfNot='basic' />\n            </div>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Passive</div>\n                <StatGene value={genes['passive1']} boldIfNot='basic' />\n                <StatGene value={genes['passive2']} boldIfNot='basic' />\n            </div>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Unknown</div>\n                <StatGene value={statsUnknown1} />\n                <StatGene value={statsUnknown2} />\n            </div>\n            <div className={`hero-snapshot-genes ${className}`}>\n                <div className='title'>Element</div>\n                <StatGene value={element} />\n            </div>\n        </>\n    )\n}\n\nHeroSnapshotStatGenes.propTypes = {\n    className: PropTypes.string,\n    genes: PropTypes.object\n}\n\nHeroSnapshotStatGenes.defaultProps = {\n}\n\nexport default HeroSnapshotStatGenes\n","import React from 'react'\nimport HeroSnapshotGenes from './HeroSnapshotGenes'\nimport HeroSnapshotStatGenes from './HeroSnapshotStatGenes'\n\nconst HeroSnapshotBack = ({ hero }) => {\n    return (\n        <>\n            <div className='hero-snapshot-genes-section'>\n                <HeroSnapshotGenes genes={hero.mainClassGenes} heroid={hero.id} title='Class' />\n                <HeroSnapshotGenes genes={hero.subClassGenes} heroid={hero.id} title='SubClass' />\n                <HeroSnapshotGenes genes={hero.professionGenes} heroid={hero.id} title='Profession' type={2} />\n            </div>\n            <div className='hero-snapshot-genes-section'>\n                <HeroSnapshotStatGenes genes={hero} heroid={hero.id} />\n            </div>\n        </>\n    )\n}\n\nexport default HeroSnapshotBack\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst HeroStatSection = ({ children, className, title }) => {\n    return (\n        <div className={`hero-stat-section ${className}`}>\n            <div className='title'>{title}</div>\n            <div className='stat-group'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nHeroStatSection.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string\n}\n\nHeroStatSection.defaultProps = {\n    className: 'hero-stat-section'\n}\n\nexport default HeroStatSection\n","import React from 'react'\n\nconst HeroStat = ({ name, value, main, minor }) => {\n    const nameClasses = `name${main && minor ? ' main-minor' : main ? ' main' : minor ? ' minor' : ''}`\n\n    return (\n        <div className='hero-stat'>\n            <div className={nameClasses}>\n                {name}\n            </div>\n            <div className='value'>\n                {value}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default HeroStat","import React from 'react'\nimport HeroStatSection from '../HeroCard/HeroStatSection'\nimport HeroStat from '../HeroCard/HeroStat'\n\nconst HeroSnapshotFront = ({ hero }) => {\n    return (\n        <>\n            <HeroStatSection title='Stats'>\n                <HeroStat name='STR' value={hero.strength} main={hero.statBoost1 === 'STR'} minor={hero.statBoost2 === 'STR'} />\n                <HeroStat name='AGI' value={hero.agility} main={hero.statBoost1 === 'AGI'} minor={hero.statBoost2 === 'AGI'} />\n                <HeroStat name='END' value={hero.endurance} main={hero.statBoost1 === 'END'} minor={hero.statBoost2 === 'END'} />\n                <HeroStat name='WIS' value={hero.wisdom} main={hero.statBoost1 === 'WIS'} minor={hero.statBoost2 === 'WIS'} />\n                <HeroStat name='DEX' value={hero.dexterity} main={hero.statBoost1 === 'DEX'} minor={hero.statBoost2 === 'DEX'} />\n                <HeroStat name='VIT' value={hero.vitality} main={hero.statBoost1 === 'VIT'} minor={hero.statBoost2 === 'VIT'} />\n                <HeroStat name='INT' value={hero.intelligence} main={hero.statBoost1 === 'INT'} minor={hero.statBoost2 === 'INT'} />\n                <HeroStat name='LCK' value={hero.luck} main={hero.statBoost1 === 'LCK'} minor={hero.statBoost2 === 'LCK'} />\n            </HeroStatSection>\n            <HeroStatSection className='profession-stat-section' title='Professions'>\n                <HeroStat name='Mining' value={hero.mining} main={hero.profession === 'mining'} />\n                <HeroStat name='Fishing' value={hero.fishing} main={hero.profession === 'fishing'} />\n                <HeroStat name='Gardening' value={hero.gardening} main={hero.profession === 'gardening'} />\n                <HeroStat name='Foraging' value={hero.foraging} main={hero.profession === 'foraging'} />\n            </HeroStatSection>\n        </>\n    )\n}\n\nexport default HeroSnapshotFront","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Rarity } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { PascalCase } from '../../helpers/format.helpers'\nimport HeroSnapshotBack from './HeroSnapshotBack'\nimport HeroSnapshotFront from './HeroSnapshotFront'\nimport './styles.css'\n\nconst rarityClass = ['common', 'uncommon', 'rare', 'legendary', 'mythic']\nconst JewelIcon = () => (<img src='/jewel50.png' className='jewel-icon' alt='Jewel' />)\n\nconst PriceGroup = ({ label, showJewel, value }) => (\n    <div className='price-group'>\n        <div className='price-value'>\n            {value}{showJewel && <JewelIcon />}\n        </div>\n        <div className='price-label'>\n            {label}\n        </div>\n    </div>\n)\n\nconst HeroSnapshot = ({ hero, title, view }) => {\n    const grl = `Gen ${hero.generation} | ${Rarity[hero.rarity]} | Level ${hero.level}`\n    const cp = `${PascalCase(hero.mainClass)} / ${PascalCase(hero.subClass)} | ${PascalCase(hero.profession)}`\n\n    return (\n        <div className={`hero-snapshot ${rarityClass[hero.rarity]}`}>\n            <div className='hero-snapshot-title'>\n                {title}\n            </div>\n            <div className='hero-snapshot-name'>\n                Hero #{hero.id}\n            </div>\n            <div className='hero-snapshot-grc'>\n                {grl}\n            </div>\n            <div className='hero-snapshot-grc'>\n                {cp}\n            </div>\n            {view === 'front' && <HeroSnapshotFront hero={hero} />}\n            {view === 'back' && <HeroSnapshotBack hero={hero} />}\n            <div className='hero-snapshot-pricing'>\n                {hero.price && (<PriceGroup label={<>{`${hero.auctionType === 'sale' ? 'Purchase' : 'Rental'}`}<br />Price</>} value={hero.price} showJewel />)}\n                <PriceGroup label={<>Summon<br />Cost</>} value={hero.summonCost} showJewel />\n                {hero.auctionType === 'assisting' && <PriceGroup label={<>Total<br />Cost</>} value={hero.price + hero.summonCost} showJewel />}\n                <PriceGroup label={<>Summons<br/>Remaining</>} value={`${hero.summonsRemaining}/${hero.maxSummons}`} />\n            </div>\n            <div className='hero-snapshot-owner'>\n                Owned by: {hero.owner ? hero.owner.name : 'UNAVAILABLE'}\n            </div>\n        </div>\n    )\n}\n\nHeroSnapshot.propTypes = {\n    hero: PropTypes.object,\n    view: PropTypes.string\n}\n\nHeroSnapshot.defaultProps = {\n    view: 'front'\n}\n\nexport default HeroSnapshot\n","import HeroSnapshot from './HeroSnapshot'\nexport default HeroSnapshot\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select from '@mui/material/Select'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport './SortFilter.css'\n\nconst SortFilter = ({ onFiltersChange, onSortByChange, onViewToggled, visible }) => {\n    const [sortBy, setSort] = useState('probability')\n    const [summonsRemaining, setSummonsRemaining] = useState('')\n    const [maxSummons, setMaxSummons] = useState('')\n    const [minGen, setMinGen] = useState('0')\n    const [maxGen, setMaxGen] = useState('14')\n\n    const handleFilterChange = ({ target }) => {\n        let _summonsRemaining = summonsRemaining\n        let _maxSummons = maxSummons\n        let _minGen = minGen\n        let _maxGen = maxGen\n\n        if (target.name === 'summonsRemaining') {\n            _summonsRemaining = target.value\n            setSummonsRemaining(target.value)\n        }\n\n        if (target.name === 'maxSummons') {\n            _maxSummons = target.value\n            setMaxSummons(target.value)\n        }\n\n        if (target.name === 'minGen') {\n            _minGen = target.value\n            setMinGen(target.value)\n        }\n\n        if (target.name === 'maxGen') {\n            _maxGen = target.value\n            setMaxGen(target.value)\n        }\n\n        onFiltersChange({ summonsRemaining: _summonsRemaining, maxSummons: _maxSummons, minGen: _minGen, maxGen: _maxGen })\n    }\n\n    const handleViewToggled = (event) => {\n        onViewToggled(event.target.checked)\n    }\n\n    const handleSortByChange = ({ target }) => {\n        setSort(target.value)\n        onSortByChange(target.value)\n    }\n\n\n    if (!visible)\n        return null\n\n    return (\n        <div className='sort-filter'>\n            <div className='section'>\n                <Switch defaultChecked onChange={handleViewToggled} />\n                Flip Cards\n            </div>\n            <div className='section'>\n                <div className='sort-label'>\n                    Sort By:\n                </div>\n                <div className='sort-value'>\n                    <Select\n                        label='Sort by'\n                        name='sort-by'\n                        className='sort-by-selecter'\n                        value={sortBy}\n                        variant='standard'\n                        onChange={handleSortByChange}\n                    >\n                        <MenuItem key='probability' value='probability'>Probability</MenuItem>\n                        <MenuItem key='price' value='price'>Price</MenuItem>\n                    </Select>\n                </div>\n            </div>\n            <div className='section'>\n                <div className='filter-label'>\n                    Filters:\n                </div>\n                <div className='filter-selections'>\n                    Summons\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Remaining\n                            <TextField\n                                name='summonsRemaining'\n                                value={summonsRemaining}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxSummons'\n                                value={maxSummons}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='filter-selections'>\n                    Generation\n                    <div className='filter-selecters'>\n                        <div className='filter-selecter'>\n                            Min\n                            <TextField\n                                name='minGen'\n                                value={minGen}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                        <div className='filter-selecter'>\n                            Max\n                            <TextField\n                                name='maxGen'\n                                value={maxGen}\n                                variant='standard'\n                                onChange={handleFilterChange}\n                                type='number'\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nSortFilter.propTypes = {\n    onFiltersChange: PropTypes.func,\n    onSortByChange: PropTypes.func,\n    onViewToggled: PropTypes.func,\n    visible: PropTypes.bool,\n}\n\nSortFilter.defaultProps = {\n    onFiltersChange: () => { },\n    onSortByChange: () => { },\n    onViewToggled: () => { },\n    visible: false,\n}\n\nexport default SortFilter\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { CONSTANTS } from '@thanpolas/dfk-hero'\nimport { PROFESSIONS_AR as professions } from '@thanpolas/dfk-hero/src/constants/constants.const'\nimport { basicClasses, advancedClasses, eliteClasses, exaltedClasses } from '@thanpolas/dfk-hero/src/constants/hero-classes.const'\nimport Button from '@mui/material/Button'\nimport ListSubheader from '@mui/material/ListSubheader'\nimport MenuItem from '@mui/material/MenuItem'\nimport SearchIcon from '@mui/icons-material/PersonSearch'\nimport Select from '@mui/material/Select'\nimport TextField from '@mui/material/TextField'\nimport './styles.css'\n\nconst auctionTypes = [{ label: 'sale', value: 'sale' }, { label: 'rent', value: 'assisting' }]\n\nconst professionAllOption = { label: 'any profession', value: 'all' }\n\nconst options = (array) => {\n    return array.map(item => {\n        const label = typeof (item) === 'string' ? item : item.label\n        const value = typeof (item) === 'string' ? item : item.value\n        return <MenuItem key={value} value={value}>{label}</MenuItem>\n    })\n}\n\nconst auctionTypeOptions = options(auctionTypes)\n\nconst professionOptions = options([professionAllOption, ...professions])\n\nconst SearchFormSimple = ({ defaultSummonClass, isHeroLoaded, onHeroChange, onSubmit, onToggle }) => {\n    const [summonClass, setSummonClass] = useState('')\n    const [summonProfession, setSummonProfession] = useState('all')\n    const [auctionType, setAuctionType] = useState('assisting')\n    const [heroId, setHeroId] = useState('')\n    const [summonClassOptions, setSummonClassOptions] = useState([])\n\n    useEffect(() => {\n        // Renders the list of options for the Summon Class dropdown\n        const basic = basicClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const advanced = advancedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const elite = eliteClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const exalted = exaltedClasses\n            .sort()\n            .map(name => (<MenuItem key={name} value={CONSTANTS.CLASS_REV[name]}>{CONSTANTS.CLASS_REV[name]}</MenuItem>))\n\n        const options = [\n            (<ListSubheader key='basic'>Basic Classes</ListSubheader>),\n            ...basic,\n            (<ListSubheader key='advanced'>Advanced Classes</ListSubheader>),\n            ...advanced,\n            (<ListSubheader key='elite'>Elite Classes</ListSubheader>),\n            ...elite,\n            (<ListSubheader key='exalted'>Exalted Classes</ListSubheader>),\n            ...exalted\n        ]\n\n        setSummonClassOptions(options)\n    }, [])\n\n    useEffect(() => {\n        if (defaultSummonClass) {\n            setSummonClass(defaultSummonClass)\n        }\n    }, [defaultSummonClass])\n\n    // Saves changes to the selected Auction Type\n    const handleAuctionTypeChange = ({ target }) => {\n        setAuctionType(target.value)\n    }\n\n\n    // Saves changes to the selected Hero\n    const handleHeroIdChange = ({ target }) => {\n        setHeroId(target.value)\n    }\n\n\n    // Loads the selected hero\n    const handleHeroIdBlur = ({ target }) => {\n        onHeroChange && onHeroChange(target.value)\n    }\n\n\n    // Saves changes to the select Summon Profession\n    const handleSummonProfessionChange = ({ target }) => {\n        setSummonProfession(target.value)\n    }\n\n\n    // Saves changes to the select Summon Class\n    const handleSummonClassChange = ({ target }) => {\n        setSummonClass(target.value)\n    }\n\n\n    // Submits the form to the calling component\n    const handleSubmit = () => {\n        const searchCriteria = { auctionType, heroId, summonClass, summonProfession: summonProfession === 'all' ? '' : summonProfession }\n        onSubmit && onSubmit(searchCriteria)\n    }\n\n    const canSubmit = isHeroLoaded && summonClass    \n\n    return (\n        <div className='search-form-simple'>\n            Find me heroes for\n            <Select\n                label='Auction Type'\n                name='auction-type'\n                className='auction-type-selecter'\n                value={auctionType}\n                variant='standard'\n                onChange={handleAuctionTypeChange}\n            >\n                {auctionTypeOptions}\n            </Select>\n            who could match with hero #\n            <div className='hero-id-selecter'>\n                <TextField\n                    placeholder='hero id'\n                    name='hero-id'\n                    value={heroId}\n                    variant='standard'\n                    onChange={handleHeroIdChange}\n                    onBlur={handleHeroIdBlur}\n                />\n            </div>\n            to summon a\n            <Select\n                label='Class to be summoned'\n                name='summoned-class'\n                className='summoned-class-selecter'\n                value={summonClass}\n                variant='standard'\n                onChange={handleSummonClassChange}\n            >\n                {summonClassOptions}\n            </Select>\n            for\n            <Select\n                label='Profession to be summoned'\n                name='summoned-profession'\n                className='summoned-profession-selecter'\n                value={summonProfession}\n                variant='standard'\n                onChange={handleSummonProfessionChange}\n            >\n                {professionOptions}\n            </Select>\n            <Button variant='contained' onClick={handleSubmit} disabled={!canSubmit}>\n                <SearchIcon />\n            </Button>\n            {/* <a href=\"#\" className='search-form-toggle' onClick={onToggle}>Advanced Search</a> */}\n        </div>\n    )\n}\n\nSearchFormSimple.propTypes = {\n    defaultSummonClass: PropTypes.string,\n    isHeroLoaded: PropTypes.bool,\n    onHeroChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onToggle: PropTypes.func,\n}\n\nSearchFormSimple.defaultProps = {\n    defaultSummonClass: '',\n    isHeroLoaded: false,\n    onToggle: () => { }\n}\n\nexport default SearchFormSimple\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport HeroSnapshot from '../HeroSnapshot/HeroSnapshot'\n\n// Displays a list of Heroes who are compatible with the Summons Match\nconst SummonsMatchList = ({ heroes, view }) => {\n    const renderTitle = (hero) => `${(hero.targetProbability * 100).toFixed(2)}% probability`\n    return heroes.length ?\n        heroes.map(hero => <HeroSnapshot key={hero.id} hero={hero} title={renderTitle(hero)} view={view} />) :\n        null\n}\n\nSummonsMatchList.propTypes = {\n    heroes: PropTypes.array,\n    view: PropTypes.string\n}\n\nexport default SummonsMatchList\n","import React, { useState } from 'react'\nimport { CalcuateSummonCost } from '../../helpers/prices.helper'\nimport { decodeRecessiveGenesAndNormalize } from '@thanpolas/dfk-hero/src/heroes-helpers/recessive-genes.ent'\nimport { getHeroById } from '../../services/hero.service'\nimport { getHeroDataByAuction } from '../../services/auction.service'\nimport { getMutationClass, getProbabilityThatHeroesCanSummonTargetGene, getPossibleSummonClasses } from '../../helpers/genes.helpers'\nimport { ToPrice } from '../../helpers/format.helpers'\nimport HeroSnapshot from '../HeroSnapshot'\nimport SortFilter from '../SortFilter/SortFilter'\nimport SearchFormSimple from '../SearchFormSimple'\nimport SummonsMatchList from '../SummonsMatchList'\nimport './styles.css'\n\nconst statusMessages = [\n    'Now there is an interesting fellow.',\n    'Oh, the Tavern has Perch Porter on draft.',\n    'Chatting with Agent Selina.  She is such a sweetheart!',\n    'Are those wings on her back, or she just harpy to see me?',\n    'Woah, big guy!  Careful with those horns!'\n]\n\nconst MainHero = ({ hero, view }) => {\n    return hero ?\n        (<div className='main-hero'>\n            <HeroSnapshot hero={hero} title='Main Hero' view={view} />\n        </div>) :\n        null\n}\n\nconst LoadingMessage = ({ heroCount, loaded, loading, message }) => {\n    const textToDisplay = loading ? message : loaded && !heroCount ? 'No Heroes Found' : null\n    return <div className='loading-message'>{textToDisplay}</div>\n}\n\nconst RegressiveSearchPage = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [hasLoaded, setHasLoaded] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState('')\n    const [searchForm, setSearchForm] = useState('simple')\n    const [sortBy, setSortBy] = useState('probability')\n    const [filters, setFilters] = useState({})\n    const [mutationClass, setMutationClass] = useState('')\n    const [mainHero, setMainHero] = useState()\n    const [heroes, setHeroes] = useState([])\n    const [view, setView] = useState('front')\n\n    const delay = ms => new Promise(res => setTimeout(res, ms))\n\n    const setRandomLoadingMessage = () => {\n        const randomIndex = Math.floor(Math.random() * statusMessages.length)\n        setLoadingMessage(statusMessages[randomIndex])\n    }\n\n    // Updates filters\n    const handleFiltersChange = filters => {\n        setFilters(filters)\n    }\n\n    // Looks up the selected Hero\n    const handleHeroChange = async heroId => {\n        if (heroId) {\n            setHeroes([])\n            setMainHero()\n            let data = await getHeroById(heroId)\n            data = decodeRecessiveGenesAndNormalize(data.heroes)\n            data[0].summonCost = CalcuateSummonCost(data[0])\n            setMainHero(data[0])\n\n            // Set a default for the class to summon based on the selected hero\n            setMutationClass(getMutationClass(data[0].mainClass))\n        }\n    }\n\n    // Updates sorting options\n    const handleSortByChange = value => {\n        setSortBy(value)\n    }\n\n    // Creates a new search for the specified search criteria\n    const handleSubmit = async searchCriteria => {\n        setHeroes([])\n        setIsLoading(true)\n        setRandomLoadingMessage()\n\n        let allHeroes = []\n        const pageSize = 50\n        let offset = 0\n        let isLastPage = false\n\n        while (!isLastPage) {\n            // Retrieve a page of hero listings from tavern\n            const classes = getPossibleSummonClasses(mainHero.mainClass, searchCriteria.summonClass)\n            const pageOfListings = await getHeroDataByAuction(searchCriteria.auctionType, classes, searchCriteria.summonProfession, pageSize, offset)\n            const listedHeroes = decodeRecessiveGenesAndNormalize(pageOfListings.heroes)\n\n            // Analyze each of the heroes in auction\n            for (let i = 0; i < listedHeroes.length; i++) {\n                const heroToAnalyze = listedHeroes[i]\n                heroToAnalyze.auctionType = searchCriteria.auctionType\n                heroToAnalyze.summonCost = CalcuateSummonCost(heroToAnalyze)\n                heroToAnalyze.price = ToPrice(heroToAnalyze.price)\n                const classProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.mainClassGenes, heroToAnalyze.mainClassGenes, searchCriteria.summonClass)\n\n                if (searchCriteria.summonProfession) {\n                    const professionProbability = getProbabilityThatHeroesCanSummonTargetGene(mainHero.professionGenes, heroToAnalyze.professionGenes, searchCriteria.summonProfession)\n                    heroToAnalyze.targetProbability = classProbability && professionProbability ? classProbability.value * professionProbability.value : 0\n                } else {\n                    heroToAnalyze.targetProbability = classProbability ? classProbability.value : 0\n                }\n            }\n\n            // Remove any heroes who cannot be used to summon the target class\n            const filteredHeroes = listedHeroes.filter(hero => hero.targetProbability > 0)\n\n            console.log(`${allHeroes.length} existing heroes`)\n            console.log(`adding ${filteredHeroes.length} new heroes`)\n\n            // Merge and sort heroes by highest to lowest probability of summoning target class\n            allHeroes = allHeroes.concat(filteredHeroes)\n\n            console.log(`now ${allHeroes.length} total heroes`)\n\n            // Update state to display heroes\n            setHeroes(allHeroes)\n            setRandomLoadingMessage()\n\n            offset += pageSize\n            isLastPage = pageOfListings.length === 0\n\n            await delay(1000)\n\n            // ONLY LOAD 1 PAGE FOR TESTING\n            isLastPage = offset > 200\n        }\n\n        setIsLoading(false)\n        setHasLoaded(true)\n    }\n\n    // Changes which search form is displayed\n    const handleSearchFormToggle = () => {\n        setSearchForm(searchForm === 'simple' ? 'advanced' : 'simple')\n    }\n\n    // Change the current view\n    const handleViewToggled = (checked) => {\n        setView(checked ? 'front' : 'back')\n    }\n\n    let sortedHeroes = heroes\n\n    // Filter based on filter criteria\n    if (filters.summonsRemaining || filters.maxSummons || filters.minGen || filters.maxGen) {\n        sortedHeroes = sortedHeroes.filter(hero => {\n            const remainingSummons = !filters.summonsRemaining || Number(hero.summonsRemaining) >= Number(filters.summonsRemaining)\n            const maxSummons = !filters.maxSummons || Number(hero.maxSummons) >= Number(filters.maxSummons)\n            const minGen = filters.minGen === '' || Number(hero.generation) >= Number(filters.minGen)\n            const maxGen = filters.maxGen === '' || Number(hero.generation) <= Number(filters.maxGen)\n            return maxSummons && remainingSummons && minGen && maxGen\n        })\n    }\n\n    // Heroes are sorted by Probability by default, only sort here if a different sorting is requested\n    sortedHeroes = sortBy === 'probability' ?\n        sortedHeroes.sort((a, b) => a.targetProbability > b.targetProbability ? -1 : a.targetProbability < b.targetProbability ? 1 : 0) :\n        sortedHeroes.sort((a, b) => {\n            if (sortBy === 'price') {\n                const aPrice = a.price + (a.auctionType === 'sale' ? 0 : a.summonCost)\n                const bPrice = b.price + (b.auctionType === 'sale' ? 0 : b.summonCost)\n                return aPrice > bPrice ? 1 : aPrice < bPrice ? -1 : 0\n            }\n\n            return 0\n        })\n\n    return (\n        <>\n            <SearchFormSimple defaultSummonClass={mutationClass} isHeroLoaded={!!mainHero} onHeroChange={handleHeroChange} onToggle={handleSearchFormToggle} onSubmit={handleSubmit} />\n            <SortFilter onFiltersChange={handleFiltersChange} onSortByChange={handleSortByChange} onViewToggled={handleViewToggled} visible={heroes.length > 0} />\n            <LoadingMessage heroCount={heroes.length} loading={isLoading} loaded={hasLoaded} message={loadingMessage} />\n            <div className='hero-list'>\n                <MainHero hero={mainHero} view={view} />\n                <SummonsMatchList heroes={sortedHeroes} view={view} />\n            </div>\n        </>\n    )\n}\n\nexport default RegressiveSearchPage\n","import RegressiveSearchPage from './RegressiveSearchPage'\nexport default RegressiveSearchPage\n","import React from 'react'\nimport RegressiveSearchPage from '../RegressiveSearchPage'\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main className=\"App-main\">\n        <RegressiveSearchPage />\n      </main>\n    </div >\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}